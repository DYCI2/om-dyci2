
(:patch
 (:name "dyci2generator-midi")
 (:doc "")
 (:info
  (:created "2018/06/28 14:20:21")
  (:modified "2021/01/13 23:49:06")
  (:by "om-sharp")
  (:version 1.0200009))
 (:window (:size (1114 974)) (:position (476 25)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:type :function)
   (:reference import-midi-notes)
   (:group-id nil)
   (:name "import-midi-notes")
   (:x 92)
   (:y 141)
   (:w 139)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "file")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 0))
  (:box
   (:type :function)
   (:reference file-chooser)
   (:group-id nil)
   (:name "file-chooser")
   (:x 295)
   (:y 57)
   (:w 103)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock :locked)
   (:lambda nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 1))
  (:box
   (:type :value)
   (:reference pathname)
   (:group-id nil)
   (:name "value box")
   (:x 180)
   (:y 99)
   (:w 371)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock :locked)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value
    (:pathname
     (:directory
      (:absolute
       "Users"
       "bresson"
       "_SHARED-FILES"
       "IN-FILES"
       "MIDI"
       "kpcorpus"))
     (:device nil)
     (:host nil)
     (:name "ex10a")
     (:type "mid")))
   (:id 2))
  (:box
   (:type :abstraction)
   (:reference
    (:textfun
     (:name "get-labels")
     (:doc "")
     (:info (:created nil) (:modified nil) (:by nil) (:version nil))
     (:window (:size (500 500)) (:position (888 613)))
     (:text
      (:list
       ";;; Edit a valid LAMBDA EXPRESSION"
       ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
       "(lambda (lablist)   "
       "  (remove-duplicates"
       "   (mapcar 'cadr lablist)"
       "   :test 'string-equal)"
       "  )"))))
   (:group-id nil)
   (:name "get-labels")
   (:x 494)
   (:y 274)
   (:w 93)
   (:h 28)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "LABLIST")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 3))
  (:box
   (:type :object)
   (:reference textbuffer)
   (:group-id nil)
   (:name nil)
   (:x 487)
   (:y 322)
   (:w 110)
   (:h 88)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font (:font (:face "Calibri") (:size 12) (:style :italic)))
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "CONTENTS")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "CONTENTS") (:reactive nil)))
   (:window (:size (500 500)) (:position (659 383)))
   (:edition-params (:read-mode :list))
   (:value
    (:object
     (:class textbuffer)
     (:slots ((:contents (:list "A" "D" "G" "C" "F" "B" "E"))))
     (:add-slots ((:input-mode :lines-cols)))))
   (:id 4))
  (:box
   (:library "om-dyci2")
   (:type :object)
   (:reference (:symbol "DYCI2GENERATOR" "DYCI2"))
   (:group-id nil)
   (:name nil)
   (:x 199)
   (:y 339)
   (:w 242)
   (:h 69)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font (:font (:face "Calibri") (:size 12) (:style :italic)))
   (:align :center)
   (:display :text)
   (:showname nil)
   (:lock :locked)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "MEMORY")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LABLS")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "MEMORY") (:reactive nil))
    (:output (:name "LABLS") (:reactive nil)))
   (:window (:size (nil nil)) (:position (nil nil)))
   (:edition-params)
   (:value
    (:object
     (:class (:symbol "DYCI2GENERATOR" "DYCI2"))
     (:slots
      ((:memory
        (:list
         "(0 5333)"
         "(5333 10667)"
         "(10667 13333)"
         "(13333 16000)"
         "(16000 17333)"
         "(17333 18667)"
         "(18667 21333)"
         "(21333 26667)"
         "(26667 32000)"
         "(32000 34667)"
         "(34667 37333)"
         "(37333 40000)"
         "(40000 42667)"))
       (:labls
        (:list
         "C"
         "C"
         "A"
         "D"
         "G"
         "C"
         "G"
         "C"
         "G"
         "C"
         "F"
         "E"
         "B"
         "E"))))))
   (:id 5))
  (:box
   (:library "om-dyci2")
   (:type :function)
   (:reference (:symbol "DYCI2QUERY" "DYCI2"))
   (:group-id nil)
   (:name "dyci2query")
   (:x 215)
   (:y 506)
   (:w 112)
   (:h 33)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.5271497964859009D0
       0.6043302416801453D0
       0.648195743560791D0
       1.0D0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Calibri") (:size 14) (:style :bold)))
     (:t-or-nil t)))
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "QUERY")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 6))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "QueryFormatting")
     (:doc "")
     (:info (:created nil) (:modified nil) (:by nil) (:version nil))
     (:window (:size (321 297)) (:position (357 413)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "input 1") (:doc "")))
       (:group-id nil)
       (:name "input 1")
       (:x 162)
       (:y 50)
       (:w 60)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "output 1") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "output 1")
       (:x 124)
       (:y 155)
       (:w 68)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 1))
      (:box
       (:type :function)
       (:reference mapcar)
       (:group-id nil)
       (:name "mapcar")
       (:x 124)
       (:y 100)
       (:w 77)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "FUNCTION")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 2))
      (:box
       (:type :function)
       (:reference string-upcase)
       (:group-id nil)
       (:name "string-upcase")
       (:x 50)
       (:y 60)
       (:w 113)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda :lambda)
       (:inputs
        (:input
         (:type :standard)
         (:name "STRING")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3)))
     (:connections
      (:connection
       (:from (:box 0 :out 0))
       (:to (:box 2 :in 1))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style :curved :modif nil)))
      (:connection
       (:from (:box 2 :out 0))
       (:to (:box 1 :in 0))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style :curved :modif nil)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 2 :in 0))))))
   (:group-id nil)
   (:name "QueryFormatting")
   (:x 476)
   (:y 426)
   (:w 128)
   (:h 28)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "input 1")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "output 1") (:reactive nil)))
   (:id 7))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "read-query-output")
     (:doc "")
     (:info (:created nil) (:modified nil) (:by nil) (:version nil))
     (:window (:size (332 297)) (:position (84 114)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "input 1") (:doc "")))
       (:group-id nil)
       (:name "input 1")
       (:x 173)
       (:y 50)
       (:w 60)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "output 1") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "output 1")
       (:x 135)
       (:y 155)
       (:w 68)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 1))
      (:box
       (:type :function)
       (:reference mapcar)
       (:group-id nil)
       (:name "mapcar")
       (:x 135)
       (:y 100)
       (:w 77)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "FUNCTION")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 2))
      (:box
       (:type :function)
       (:reference read-from-string)
       (:group-id nil)
       (:name "read-from-string")
       (:x 50)
       (:y 55)
       (:w 131)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda :lambda)
       (:inputs
        (:input
         (:type :standard)
         (:name "STRING")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3)))
     (:connections
      (:connection
       (:from (:box 0 :out 0))
       (:to (:box 2 :in 1))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style :curved :modif nil)))
      (:connection
       (:from (:box 2 :out 0))
       (:to (:box 1 :in 0))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style :curved :modif nil)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 2 :in 0))))))
   (:group-id nil)
   (:name "read-query-output")
   (:x 202)
   (:y 544)
   (:w 140)
   (:h 28)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "input 1")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "output 1") (:reactive nil)))
   (:id 8))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "Remix")
     (:doc "")
     (:info (:created nil) (:modified nil) (:by nil) (:version nil))
     (:window (:size (502 412)) (:position (63 91)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "input 1") (:doc "")))
       (:group-id nil)
       (:name "input 1")
       (:x 29)
       (:y 47)
       (:w 60)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 2) (:name "input 2") (:doc "")))
       (:group-id nil)
       (:name "input 2")
       (:x 262)
       (:y 24)
       (:w 60)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 1))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "output 1") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "output 1")
       (:x 210)
       (:y 270)
       (:w 68)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 2))
      (:box
       (:type :abstraction)
       (:reference
        (:textfun
         (:name "select-midi-notes")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by nil)
          (:version nil))
         (:window (:size (500 500)) (:position (158 438)))
         (:text
          (:list
           ";;; Edit a valid LAMBDA EXPRESSION"
           ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
           "(lambda (list seg onset) "
           "  ;(print seg)"
           "  (let ((p1 (position (car seg) list :test '<= :key 'midinote-onset))"
           "        (p2 (position (cadr seg) list :test '> :from-end t :key 'midinote-onset)))"
           "    (when (<= p1 p2)"
           "      (loop for note in "
           "            (subseq list p1 p2) "
           "            collect"
           "            (make-midinote :onset (+ (- (midinote-onset note) (car seg)) onset)"
           "                           :pitch (midinote-pitch note) :vel (midinote-vel note) "
           "                           :dur (midinote-dur note) :channel (midinote-channel note))"
           "        "
           "            ))"
           "    ))"
           ""))))
       (:group-id nil)
       (:name "select-midi-notes")
       (:x 53)
       (:y 103)
       (:w 135)
       (:h 28)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock nil)
       (:lambda :lambda)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "SEG")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "ONSET")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:type :function)
       (:reference mapcar)
       (:group-id nil)
       (:name "mapcar")
       (:x 212)
       (:y 148)
       (:w 77)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "FUNCTION")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "more-lists")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 4))
      (:box
       (:type :function)
       (:reference flat)
       (:group-id nil)
       (:name "flat")
       (:x 217)
       (:y 215)
       (:w 55)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5))
      (:box
       (:type :function)
       (:reference dx->x)
       (:group-id nil)
       (:name "dx->x")
       (:x 321)
       (:y 165)
       (:w 74)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "START")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LIST")
         (:value (:list 1 1))
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 6))
      (:box
       (:type :abstraction)
       (:reference
        (:textfun
         (:name "durees")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by nil)
          (:version nil))
         (:window (:size nil) (:position nil))
         (:text
          (:list
           ";;; Edit a valid LAMBDA EXPRESSION"
           ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
           "(lambda (segments) "
           "  (loop for seg in segments "
           "        collect (- (cadr seg) (car seg))))"
           ""))))
       (:group-id nil)
       (:name "durees")
       (:x 331)
       (:y 101)
       (:w 74)
       (:h 28)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock nil)
       (:lambda nil)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "SEGMENTS")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 7))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 323)
       (:y 130)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 0)
       (:id 8)))
     (:connections
      (:connection
       (:from (:box 0 :out 0))
       (:to (:box 3 :in 0))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style :curved :modif nil)))
      (:connection
       (:from (:box 1 :out 0))
       (:to (:box 4 :in 1))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style :curved :modif nil)))
      (:connection (:from (:box 1 :out 0)) (:to (:box 7 :in 0)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 4 :in 0)))
      (:connection (:from (:box 4 :out 0)) (:to (:box 5 :in 0)))
      (:connection
       (:from (:box 5 :out 0))
       (:to (:box 2 :in 0))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style :curved :modif nil)))
      (:connection (:from (:box 6 :out 0)) (:to (:box 4 :in 2)))
      (:connection (:from (:box 7 :out 0)) (:to (:box 6 :in 1)))
      (:connection (:from (:box 8 :out 0)) (:to (:box 6 :in 0))))))
   (:group-id nil)
   (:name "Remix")
   (:x 128)
   (:y 598)
   (:w 84)
   (:h 28)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "input 1")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "input 2")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "output 1") (:reactive nil)))
   (:id 9))
  (:comment
   (:x 405)
   (:y 47)
   (:w 162)
   (:h 68)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "Unlock this box, choose a midi file with your labels. Then, re-lock them.
")
   (:id 10))
  (:comment
   (:x 602)
   (:y 323)
   (:w 129)
   (:h 113)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "Enter a query in accordance with your labels. WARNING : space are not parsed, replace it by a '-' (ex : A-mineur)")
   (:id 11))
  (:box
   (:type :abstraction)
   (:reference
    (:textfun
     (:name "get-lyrics-events")
     (:doc "")
     (:info (:created nil) (:modified nil) (:by nil) (:version nil))
     (:window (:size (705 459)) (:position (336 390)))
     (:text
      (:list
       ";;; Edit a valid LAMBDA EXPRESSION"
       ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
       "(lambda (evt-list) "
       "  "
       "  (loop for evt in evt-list "
       "        when (equal (om-midi::midi-evt-type evt) :lyric)"
       "        collect (list "
       "                 (om-midi::midi-evt-date evt)"
       "                 (string-upcase "
       "                  (remove #\\_"
       "                  (concatenate "
       "                   'string "
       "                   (mapcar 'code-char (om::first-n (om-midi::midi-evt-fields evt) 1))"
       "                   )"
       "                  )"
       "                  )"
       "                 )"
       "        "
       "        ))"
       ""))))
   (:group-id nil)
   (:name "get-lyrics-events")
   (:x 375)
   (:y 876/5)
   (:w 130)
   (:h 28)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "EVT-LIST")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 12))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "markers->segments")
     (:doc "")
     (:info (:created nil) (:modified nil) (:by nil) (:version nil))
     (:window (:size (360 391)) (:position (63 91)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "in") (:doc "")))
       (:group-id nil)
       (:name "in")
       (:x 183)
       (:y 25)
       (:w 40)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "out") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "out")
       (:x 167)
       (:y 282)
       (:w 40)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 1))
      (:box
       (:type :function)
       (:reference cdr)
       (:group-id nil)
       (:name "cdr")
       (:x 210)
       (:y 109)
       (:w 55)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "X")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 2))
      (:box
       (:type :function)
       (:reference butlast)
       (:group-id nil)
       (:name "butlast")
       (:x 131)
       (:y 109)
       (:w 75)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:type :function)
       (:reference mat-trans)
       (:group-id nil)
       (:name "mat-trans")
       (:x 153)
       (:y 188)
       (:w 92)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "MATRIX")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 4))
      (:box
       (:type :function)
       (:reference list)
       (:group-id nil)
       (:name "list")
       (:x 160)
       (:y 150)
       (:w 83)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :optional)
         (:name "x")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "x")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5))
      (:box
       (:type :function)
       (:reference mapcar)
       (:group-id nil)
       (:name "mapcar")
       (:x 93)
       (:y 237)
       (:w 77)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "FUNCTION")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 6))
      (:box
       (:type :function)
       (:reference format)
       (:group-id nil)
       (:name "format")
       (:x 53)
       (:y 192)
       (:w 74)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda :lambda)
       (:inputs
        (:input
         (:type :standard)
         (:name "DESTINATION")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "CONTROL-STRING")
         (:value "~A")
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "format-arguments")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 7))
      (:box
       (:type :value)
       (:reference null)
       (:group-id nil)
       (:name "value box")
       (:x 27)
       (:y 157)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value nil)
       (:id 8))
      (:box
       (:type :value)
       (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
       (:group-id nil)
       (:name "value box")
       (:x 64)
       (:y 157)
       (:w 41)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value "~A")
       (:id 9)))
     (:connections
      (:connection (:from (:box 0 :out 0)) (:to (:box 3 :in 0)))
      (:connection (:from (:box 0 :out 0)) (:to (:box 2 :in 0)))
      (:connection (:from (:box 2 :out 0)) (:to (:box 5 :in 1)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 5 :in 0)))
      (:connection (:from (:box 4 :out 0)) (:to (:box 6 :in 1)))
      (:connection (:from (:box 5 :out 0)) (:to (:box 4 :in 0)))
      (:connection (:from (:box 6 :out 0)) (:to (:box 1 :in 0)))
      (:connection (:from (:box 7 :out 0)) (:to (:box 6 :in 0)))
      (:connection (:from (:box 8 :out 0)) (:to (:box 7 :in 0)))
      (:connection (:from (:box 9 :out 0)) (:to (:box 7 :in 1))))))
   (:group-id nil)
   (:name "markers->segments")
   (:x 253)
   (:y 1481/5)
   (:w 148)
   (:h 28)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "in")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 13))
  (:box
   (:type :function)
   (:reference mat-trans)
   (:group-id nil)
   (:name "mat-trans")
   (:x 331)
   (:y 1091/5)
   (:w 92)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "MATRIX")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 14))
  (:box
   (:type :function)
   (:reference split)
   (:group-id nil)
   (:name "split")
   (:x 323)
   (:y 1276/5)
   (:w 102)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LIST")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "out") (:reactive nil))
    (:output (:name "out1") (:reactive nil)))
   (:id 15))
  (:box
   (:type :function)
   (:reference import-midi-events)
   (:group-id nil)
   (:name "import-midi-events")
   (:x 373)
   (:y 706/5)
   (:w 145)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "file")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 16))
  (:box
   (:type :function)
   (:reference permut-random)
   (:group-id nil)
   (:name "permut-random")
   (:x 479)
   (:y 463)
   (:w 124)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LIST")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 17))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 310)
   (:y 446)
   (:w 62)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list "A" "D"))
   (:id 18))
  (:box
   (:type :object)
   (:reference midi-track)
   (:group-id nil)
   (:name nil)
   (:x 24)
   (:y 196)
   (:w 174)
   (:h 63)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "MIDI-EVENTS")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "MIDI-EVENTS") (:reactive nil)))
   (:window (:size nil) (:position nil))
   (:edition-params)
   (:value
    (:object
     (:class midi-track)
     (:slots
      ((:onset 0)
       (:duration 1000)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
       (:default-frame-type midi-note)
       (:frames nil)
       (:midi-events nil)))))
   (:id 19))
  (:box
   (:type :object)
   (:reference midi-track)
   (:group-id nil)
   (:name nil)
   (:x 181)
   (:y 662)
   (:w 263)
   (:h 88)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "MIDI-EVENTS")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "MIDI-EVENTS") (:reactive nil)))
   (:window (:size nil) (:position nil))
   (:edition-params)
   (:value
    (:object
     (:class midi-track)
     (:slots
      ((:onset 0)
       (:duration 1000)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
       (:default-frame-type midi-note)
       (:frames nil)
       (:midi-events nil)))))
   (:id 20)))
 (:connections
  (:connection (:from (:box 0 :out 0)) (:to (:box 19 :in 1)))
  (:connection (:from (:box 1 :out 0)) (:to (:box 2 :in 0)))
  (:connection (:from (:box 2 :out 0)) (:to (:box 0 :in 0)))
  (:connection
   (:from (:box 2 :out 0))
   (:to (:box 16 :in 0))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 4 :in 1)))
  (:connection
   (:from (:box 4 :out 1))
   (:to (:box 7 :in 0))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection (:from (:box 5 :out 0)) (:to (:box 6 :in 0)))
  (:connection
   (:from (:box 6 :out 0))
   (:to (:box 8 :in 0))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection (:from (:box 7 :out 0)) (:to (:box 17 :in 0)))
  (:connection
   (:from (:box 8 :out 0))
   (:to (:box 9 :in 1))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection (:from (:box 9 :out 0)) (:to (:box 20 :in 1)))
  (:connection
   (:from (:box 12 :out 0))
   (:to (:box 3 :in 0))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection (:from (:box 12 :out 0)) (:to (:box 14 :in 0)))
  (:connection
   (:from (:box 13 :out 0))
   (:to (:box 5 :in 1))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection (:from (:box 14 :out 0)) (:to (:box 15 :in 0)))
  (:connection (:from (:box 15 :out 0)) (:to (:box 13 :in 0)))
  (:connection
   (:from (:box 15 :out 1))
   (:to (:box 5 :in 2))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection (:from (:box 16 :out 0)) (:to (:box 12 :in 0)))
  (:connection (:from (:box 18 :out 0)) (:to (:box 6 :in 1)))
  (:connection (:from (:box 19 :out 1)) (:to (:box 9 :in 0)))))