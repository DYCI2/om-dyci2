; OM File Header - Saved 2018/10/09 17:54:31
; (6.140001 :patc (om-make-point 10 10) (om-make-point 458 28) (om-make-point 955 974) "" 183 0 "2018/10/09 11:48:32" "2018/10/09 17:54:31")
; End File Header
; External resources 
; (list (list (quote :midi) "#P\"../../../../IN-FILES/MIDI/kpcorpus/ex40a.mid\""))
(in-package :om)(load-lib-for (quote ("om-dyci2")))(setf *om-current-persistent* (om-load-patch1 "dyci2generator-midi" (quote ((let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 136 810) (om-make-point 383 118) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (6200 5800 7400 6800 6500) (6200 5800 7400 6800 6500) (6200 5800 7400 6800 6500 7400) (6200 5800 7400 6800 6500) (6200 5800 7400 6800 6500 7400) (7700) (6200 5700 7700 7400 6900 6500) (6200 5700 7700 7400 6900 6500) (6200 5700 7700 7400 6900 6500) (6200 5700 7700 7400 6900 6500 7600) (6200 5700 7700 7400 6900 6500 7400) (5500 4300 7400) (6700 6500 5900) (6700 6500 5900) (6700 6500 5900 7400) (6700 6500 5900) (6700 6500 5900 7400) (5300 4100 6900) (6900 6300 6000) (6900 6300 6000) (6900 6300 6000) (6900 6300 6000 6700) (6900 6300 6000 6500) (4600 3400 7400) (7400 7000 6500 6200) (7400 7000 6500 6200) (7400 7000 6500 6200 7400) (7400 7000 6500 6200) (7400 7000 6500 6200 7400) (4800 3600 6000) (6400 6000 5500) (6400 6000 5500) (6400 6000 5500) (6400 6000 5500 6000) (6400 6000 5500 6000) (3900 7000) (5800 5400 7000 6600 6100) (5800 5400 7000 6600 6100) (5800 5400 7000 6600 6100) (5800 5400 7000 6600 6100 7000) (5800 5400 7000 6600 6100 7000) (4400 7200) (6000 5600 7200 6800 6600 6300) (6000 5600 7200 6800 6600 6300) (6000 5600 7200 6800 6600 6300) (6000 5600 7200 6800 6600 6300) (6000 5600 7200 6800 6600 6300 6800))) :lonset (quote (0 167 333 500 667 833 1000 1167 1333 1500 1667 1833 2000 2167 2333 2500 2667 2833 3000 3167 3333 3500 3667 3833 4000 4167 4333 4500 4667 4833 5000 5167 5333 5500 5667 5833 6000 6167 6333 6500 6667 6833 7000 7167 7333 7500 7667 7833 8000)) :ldur (quote ((333) (166 166 333 166 166) (167 167 167 167 167) (167 167 333 167 167 167) (166 166 166 166 166) (167 167 167 167 167 167) (333) (166 166 333 166 166 166) (167 167 334 167 167 167) (167 167 167 167 167 167) (166 166 166 166 166 166 166) (167 167 167 167 167 167 167) (1000 1000 500) (166 166 166) (167 167 167) (167 167 167 333) (166 166 166) (167 167 167 167) (1000 1000 333) (333 166 166) (334 167 167) (167 167 167) (166 166 166 166) (167 167 167 167) (1167 1167 333) (333 166 166 166) (167 167 167 167) (333 167 167 167 167) (166 166 166 166) (167 167 167 167 167) (1000 1000 333) (166 333 166) (167 334 167) (167 167 167) (166 166 166 166) (167 167 167 167) (167 333) (166 166 333 166 166) (167 167 334 167 167) (167 167 167 167 167) (166 166 166 166 166 166) (167 167 167 167 167 167) (167 333) (166 166 333 166 166 166) (167 167 334 167 167 167) (167 167 333 167 167 167) (166 166 166 166 166 166) (167 167 167 167 167 167 167))) :lvel (quote ((64) (64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64 64) (64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64 64) (64 64 64 64 64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64 64) (64 64 64) (64 64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64) (64 64 64 64 64) (64 64 64 64) (64 64 64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64) (64 64) (64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64 64))) :loffset (quote ((0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0))) :lchan (quote ((1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "remix" (om-load-patch-abs1 "remix" (quote ((let ((box (om-load-boxcall (quote genfun) "CONCAT" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" nil) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" nil))) (om-make-point 102 257) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 144 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 216 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SELECT" (quote select) (quote ((om-load-inputfun (quote input-funbox) "a music sequence" "SELF" nil) (om-load-inputfun (quote input-funbox) "an integer" "START" 0) (om-load-inputfun (quote input-funbox) "an integer" "END" 1))) (om-make-point 108 179) (om-make-point 81 59) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 206 186) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 206 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 142 373) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 226 48) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 112 113) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 1 1 nil 0) (7 0 2 0 nil 0) (8 0 3 0 nil 0) (2 0 4 0 nil 0) (3 0 5 0 nil 0) (4 0 5 1 nil 0) (4 1 5 2 nil 0) (1 0 6 0 nil 0))) 6.140001 nil "" (om-make-point 200 200) (om-make-point 369 508)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 142 701) (om-make-point 78 67) (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (6200 5800 7400 6800 6500) (6200 5800 7400 6800 6500) (6200 5800 7400 6800 6500 7400) (6200 5800 7400 6800 6500) (6200 5800 7400 6800 6500 7400) (7700) (6200 5700 7700 7400 6900 6500) (6200 5700 7700 7400 6900 6500) (6200 5700 7700 7400 6900 6500) (6200 5700 7700 7400 6900 6500 7600) (6200 5700 7700 7400 6900 6500 7400) (5500 4300 7400) (6700 6500 5900) (6700 6500 5900) (6700 6500 5900 7400) (6700 6500 5900) (6700 6500 5900 7400) (5300 4100 6900) (6900 6300 6000) (6900 6300 6000) (6900 6300 6000) (6900 6300 6000 6700) (6900 6300 6000 6500) (4600 3400 7400) (7400 7000 6500 6200) (7400 7000 6500 6200) (7400 7000 6500 6200 7400) (7400 7000 6500 6200) (7400 7000 6500 6200 7400) (4800 3600 6000) (6400 6000 5500) (6400 6000 5500) (6400 6000 5500) (6400 6000 5500 6000) (6400 6000 5500 6000) (3900 7000) (5800 5400 7000 6600 6100) (5800 5400 7000 6600 6100) (5800 5400 7000 6600 6100) (5800 5400 7000 6600 6100 7000) (5800 5400 7000 6600 6100 7000) (4400 7200) (6000 5600 7200 6800 6600 6300) (6000 5600 7200 6800 6600 6300) (6000 5600 7200 6800 6600 6300) (6000 5600 7200 6800 6600 6300) (6000 5600 7200 6800 6600 6300 6800))) :lonset (quote (0 167 333 500 667 833 1000 1167 1333 1500 1667 1833 2000 2167 2333 2500 2667 2833 3000 3167 3333 3500 3667 3833 4000 4167 4333 4500 4667 4833 5000 5167 5333 5500 5667 5833 6000 6167 6333 6500 6667 6833 7000 7167 7333 7500 7667 7833 8000)) :ldur (quote ((333) (166 166 333 166 166) (167 167 167 167 167) (167 167 333 167 167 167) (166 166 166 166 166) (167 167 167 167 167 167) (333) (166 166 333 166 166 166) (167 167 334 167 167 167) (167 167 167 167 167 167) (166 166 166 166 166 166 166) (167 167 167 167 167 167 167) (1000 1000 500) (166 166 166) (167 167 167) (167 167 167 333) (166 166 166) (167 167 167 167) (1000 1000 333) (333 166 166) (334 167 167) (167 167 167) (166 166 166 166) (167 167 167 167) (1167 1167 333) (333 166 166 166) (167 167 167 167) (333 167 167 167 167) (166 166 166 166) (167 167 167 167 167) (1000 1000 333) (166 333 166) (167 334 167) (167 167 167) (166 166 166 166) (167 167 167 167) (167 333) (166 166 333 166 166) (167 167 334 167 167) (167 167 167 167 167) (166 166 166 166 166 166) (167 167 167 167 167 167) (167 333) (166 166 333 166 166 166) (167 167 334 167 167 167) (167 167 333 167 167 167) (166 166 166 166 166 166) (167 167 167 167 167 167 167))) :lvel (quote ((64) (64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64 64) (64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64 64) (64 64 64 64 64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64 64) (64 64 64) (64 64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64) (64 64 64 64 64) (64 64 64 64) (64 64 64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64) (64 64) (64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64 64))) :loffset (quote ((0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0))) :lchan (quote ((1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 145 245) (om-make-point 225 118) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (5000 3800 6500) (6500 6200 5700) (6500 6200 5700) (6500 6200 5700) (6500 6200 5700 6400) (6500 6200 5700 6500) (4800 3600 6700) (6700 6300 5800) (6700 6300 5800) (6700 6300 5800) (6700 6300 5800 6700) (6700 6300 5800 6700) (5300 4100 6900) (6900 6300 6000) (6900 6300 6000) (6900 6300 6000) (6900 6300 6000 6700) (6900 6300 6000 6500) (4600 3400 7400) (7400 7000 6500 6200) (7400 7000 6500 6200) (7400 7000 6500 6200 7400) (7400 7000 6500 6200) (7400 7000 6500 6200 7400) (7400) (6200 5800 7400 6800 6500) (6200 5800 7400 6800 6500) (6200 5800 7400 6800 6500 7400) (6200 5800 7400 6800 6500) (6200 5800 7400 6800 6500 7400) (7700) (6200 5700 7700 7400 6900 6500) (6200 5700 7700 7400 6900 6500) (6200 5700 7700 7400 6900 6500) (6200 5700 7700 7400 6900 6500 7600) (6200 5700 7700 7400 6900 6500 7400) (6900) (6400 5700 6900 6700 6100) (6400 5700 6900 6700 6100) (6400 5700 6900 6700 6100) (6400 5700 6900 6700 6100 7100) (6400 5700 6900 6700 6100 7300) (7400) (5700 5000 6900 6500 6200) (5700 5000 6900 6500 6200) (5700 5000 6900 6500 6200) (5700 5000 6900 6500 6200) (5700 5000 6900 6500 6200 7400) (5500 4300 7400) (6700 6500 5900) (6700 6500 5900) (6700 6500 5900 7400) (6700 6500 5900) (6700 6500 5900 7400) (4800 3600 7400) (7200 6700 6400 5800) (6700 6400 5800) (6700 6400 5800 7000) (6700 6700 6400 5800) (6700 6400 5800) (6500) (6500 6000 5700) (6500 6000 5700) (6500 6000 5700) (6500 6000 5700 6700) (6500 6000 5700 6900) (4800 6700) (6400 6000 5500) (6400 6000 5500) (6400 6000 5500) (6400 6000 5500) (6400 6000 5500 6000) (4900 3700 6100 6100) (6500 5800 5500) (6500 5800 5500) (6500 5800 5500 6100) (6500 5800 5500) (6500 5800 5500 6100) (4800 3600 6000) (6400 6000 5500) (6400 6000 5500) (6400 6000 5500) (6400 6000 5500 6000) (6400 6000 5500 6000) (4900 3700 6100 6100) (6500 5800 5500) (6500 5800 5500) (6500 5800 5500) (6500 5800 5500 6100) (6500 5800 5500 6100) (4800 3600 6000) (6400 6000 5500) (6400 6000 5500) (6400 6000 5500) (6400 6000 5500 6000) (6400 6000 5500 6000) (4100 6800) (5600 5300 6800 6500 6000) (5600 5300 6800 6500 6000) (5600 5300 6800 6500 6000) (5600 5300 6800 6500 6000 6700) (5600 5300 6800 6500 6000 6500) (3900 7000) (5800 5400 7000 6600 6100) (5800 5400 7000 6600 6100) (5800 5400 7000 6600 6100) (5800 5400 7000 6600 6100 7000) (5800 5400 7000 6600 6100 7000) (4400 7200) (6000 5600 7200 6800 6600 6300) (6000 5600 7200 6800 6600 6300) (6000 5600 7200 6800 6600 6300) (6000 5600 7200 6800 6600 6300) (6000 5600 7200 6800 6600 6300 6800) (4900 3700 7700) (6500 6100 7700 6800) (6500 6100 7700 6800))) :lonset (quote (1833 2000 2167 2333 2500 2667 2833 3000 3167 3333 3500 3667 3833 4000 4167 4333 4500 4667 4833 5000 5167 5333 5500 5667 5833 6000 6167 6333 6500 6667 6833 7000 7167 7333 7500 7667 7833 8000 8167 8333 8500 8667 8833 9000 9167 9333 9500 9667 9833 10000 10167 10333 10500 10667 10833 11000 11167 11333 11500 11667 11833 12000 12167 12333 12500 12667 12833 13000 13167 13333 13500 13667 13833 14000 14167 14333 14500 14667 14833 15000 15167 15333 15500 15667 15833 16000 16167 16333 16500 16667 16833 17000 17167 17333 17500 17667 17833 18000 18167 18333 18500 18667 18833 19000 19167 19333 19500 19667 19833 20000 20167 20333 20500 20667 20833 21000 21167 21333 21500)) :ldur (quote ((167) (1000 1000 333) (333 166 166) (334 167 167) (167 167 167) (166 166 166 166) (167 167 167 167) (1000 1000 333) (333 166 166) (334 167 167) (167 167 167) (166 166 166 166) (167 167 167 167) (1000 1000 333) (333 166 166) (334 167 167) (167 167 167) (166 166 166 166) (167 167 167 167) (1167 1167 333) (333 166 166 166) (167 167 167 167) (333 167 167 167 167) (166 166 166 166) (167 167 167 167 167) (333) (166 166 333 166 166) (167 167 167 167 167) (167 167 333 167 167 167) (166 166 166 166 166) (167 167 167 167 167 167) (333) (166 166 333 166 166 166) (167 167 334 167 167 167) (167 167 167 167 167 167) (166 166 166 166 166 166 166) (167 167 167 167 167 167 167) (333) (166 166 333 166 166) (167 167 334 167 167) (167 167 167 167 167) (166 166 166 166 166 166) (167 167 167 167 167 167) (500) (166 166 166 166 166) (167 167 167 167 167) (167 167 167 167 167) (166 166 166 166 166) (167 167 167 167 167 167) (1000 1000 500) (166 166 166) (167 167 167) (167 167 167 333) (166 166 166) (167 167 167 167) (2000 3000 250) (250 166 166 166) (167 167 167) (167 167 167 250) (250 166 166 166) (167 167 167) (333) (333 166 166) (334 167 167) (167 167 167) (166 166 166 166) (167 167 167 167) (1000 500) (166 166 166) (167 167 167) (167 167 167) (166 166 166) (167 167 167 167) (1000 1000 833 500) (166 166 166) (167 167 167) (167 167 167 500) (166 166 166) (167 167 167 167) (1000 1000 333) (166 333 166) (167 334 167) (167 167 167) (166 166 166 166) (167 167 167 167) (1000 1000 833 667) (166 166 166) (167 167 167) (167 167 167) (166 166 166 333) (167 167 167 167) (1000 1000 333) (166 333 166) (167 167 167) (167 167 167) (166 166 166 166) (167 167 167 167) (167 333) (166 166 333 166 166) (167 167 334 167 167) (167 167 167 167 167) (166 166 166 166 166 166) (167 167 167 167 167 167) (167 333) (166 166 333 166 166) (167 167 334 167 167) (167 167 167 167 167) (166 166 166 166 166 166) (167 167 167 167 167 167) (167 333) (166 166 333 166 166 166) (167 167 334 167 167 167) (167 167 333 167 167 167) (166 166 166 166 166 166) (167 167 167 167 167 167 167) (167 167 333) (166 166 333 166) (167 167 167 167))) :lvel (quote ((64) (64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64) (64 64 64 64 64) (64 64 64 64) (64 64 64 64 64) (64) (64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64 64) (64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64 64) (64 64 64 64 64 64 64) (64) (64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64) (64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64 64) (64 64 64) (64 64 64 64) (64 64 64) (64 64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64) (64 64 64) (64) (64 64 64) (64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64) (64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64) (64 64 64) (64 64 64) (64 64 64 64) (64 64 64) (64 64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64) (64 64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64) (64 64) (64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64) (64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64) (64 64 64 64 64 64 64) (64 64 64) (64 64 64 64) (64 64 64 64))) :loffset (quote ((0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (83 0 0 0) (0 0 0) (0 0 0 0) (83 0 0 0) (0 0 0) (0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "READ-FROM-STRING" (quote read-from-string) (quote ((om-load-inputfun (quote input-funbox) "STRING" "STRING" nil))) (om-make-point 430 683) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 527 733) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 710 579) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DYCI2QUERY" (quote dyci2::dyci2query) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "QUERY" nil))) (om-make-point 573 668) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "DYCI2GENERATOR" (quote dyci2::dyci2generator) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "memory" nil) (om-load-inputfun (quote input-funbox) "" "labls" nil))) (om-make-point 396 563) (om-make-point 171 85) (if (find-class (quote dyci2::dyci2generator) nil) (make-instance (quote dyci2::dyci2generator) :memory (list "(1833 3000)" "(3000 4000)" "(4000 5000)" "(5000 6000)" "(6000 7000)" "(7000 8000)" "(8000 9000)" "(9000 10000)" "(10000 11000)" "(11000 12000)" "(12000 13000)" "(13000 14000)" "(14000 15000)" "(15000 16000)" "(16000 17000)" "(17000 18000)" "(18000 19000)" "(19000 20000)" "(20000 21000)") :labls (list "D" "C" "F" "B" "X" "D" "A" "D" "G" "C" "F" "C" "G" "C" "G" "C" "F" "E" "A" "D") :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 250 280) (om-make-point 150 100))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "markers->segments" (om-load-patch-abs1 "markers->segments" (quote ((let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 170 206) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 87 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 20 133) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 56 123) (om-make-point 47 30) "~A" "\"~A\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FORMAT" (quote format) (quote ((om-load-inputfun (quote input-funbox) "DESTINATION" "DESTINATION" nil) (om-load-inputfun (quote input-funbox) "CONTROL-STRING" "CONTROL-STRING" "~A") (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 56 169) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 190 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 123 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 148 147) (om-make-point 50 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 87 278) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 157 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (4 0 1 0 nil 0) (0 0 1 1 nil 0) (2 0 4 0 nil 0) (3 0 4 1 nil 0) (9 0 5 0 nil 0) (9 0 6 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (1 0 8 0 nil 0))) 6.140001 nil "" (om-make-point 93 552) (om-make-point 280 413)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 400 479) nil (list (list "(1833 3000)" "(3000 4000)" "(4000 5000)" "(5000 6000)" "(6000 7000)" "(7000 8000)" "(8000 9000)" "(9000 10000)" "(10000 11000)" "(11000 12000)" "(12000 13000)" "(13000 14000)" "(14000 15000)" "(15000 16000)" "(16000 17000)" "(17000 18000)" "(18000 19000)" "(19000 20000)" "(20000 21000)")) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 475 408) nil nil "&" nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 641 500) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRING-UPCASE" (quote string-upcase) (quote ((om-load-inputfun (quote input-funbox) "STRING" "STRING" nil))) (om-make-point 568 448) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 647 387) (om-make-point 71 88) (load-buffer-textfile (quote ("B" "X" "G" "C" "F" "E" "A" "D" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 200 77) (quote "Enter a query in accordance with your labels. WARNING : space are not parsed, replace it by a '-' (ex : A-mineur)") "" (om-make-point 729 388) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 485 344) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "get-labels" (om-load-lisp-abspatch "get-labels" 6.140001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (lablist)   $  (remove-duplicates$   (mapcar 'cadr lablist)$   :test 'string-equal)$  )") (quote ((om-load-inputfun (quote input-funbox) "" "LABLIST" nil))) (om-make-point 646 309) nil (list (list "B" "X" "G" "C" "F" "E" "A" "D")) nil "get-labels"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "get-lyrics" (om-load-patch-abs1 "get-lyrics" (quote ((let ((box (om-load-boxcall (quote lispfun) "SUBSEQ" (quote subseq) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "START" "START" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 180 257) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 116 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MIDIEVENT" (quote midievent) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "midi event type" "ev-type" (quote :keyon) (list (list "Note" (quote :note)) (list "KeyOn " (quote :keyon)) (list "KeyOff" (quote :keyoff)) (list "KeyPress" (quote :keypress)) (list "CtrlChange" (quote :ctrlchange)) (list "ProgChange" (quote :progchange)) (list "ChanPress" (quote :chanpress)) (list "PitchWheel/PitchBend" (quote :pitchbend)) (list "SongPos" (quote :songpos)) (list "SongSel" (quote :songsel)) (list "Clock" (quote :clock)) (list "Start" (quote :start)) (list "Continue" (quote :continue)) (list "Stop" (quote :stop)) (list "Tune" (quote :tune)) (list "ActiveSens" (quote :activesens)) (list "Reset" (quote :reset)) (list "SysEx" (quote :sysex)) (list "Stream" (quote :stream)) (list "Private" (quote :private)) (list "Process" (quote :process)) (list "DProcess" (quote :dprocess)) (list "QFrame" (quote :qframe)) (list "Ctrl14b" (quote :ctrl14b)) (list "NonRegParam" (quote :nonregparam)) (list "RegParam" (quote :regparam)) (list "SeqNum" (quote :seqnum)) (list "Textual" (quote :textual)) (list "Copyright" (quote :copyright)) (list "SeqName" (quote :seqname)) (list "InstrName" (quote :instrname)) (list "Lyric" (quote :lyric)) (list "Marker" (quote :marker)) (list "CuePoint" (quote :cuepoint)) (list "ChanPrefix" (quote :chanprefix)) (list "EndTrack" (quote :endtrack)) (list "Tempo" (quote :tempo)) (list "SMPTEOffset" (quote :smpteoffset)) (list "TimeSign" (quote :timesign)) (list "KeySign" (quote :keysign)) (list "Specific" (quote :specific)))) (om-load-inputfun (quote input-funbox) "date" "ev-date" 0) (om-load-inputfun (quote input-funbox) "track" "ev-ref" 0) (om-load-inputfun (quote input-funbox) "port" "ev-port" 0) (om-load-inputfun (quote input-funbox) "channel" "ev-chan" 1) (om-load-inputfun (quote input-funbox) "event content" "ev-fields" nil))) (om-make-point 100 186) (om-make-point 71 64) (if (find-class (quote midievent) nil) (let ((newobj (make-instance (quote midievent) :ev-type (quote :keyon) :ev-date 0 :ev-ref 0 :ev-port 0 :ev-chan 1 :ev-fields nil :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ME-TEXTINFO" (quote me-textinfo) (quote ((om-load-inputfun (quote input-funbox) "a MIDIEvent or list of MIDIEvents" "SELF" nil))) (om-make-point 75 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 105 354) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "lyrics-event" 0 (om-make-point 77 43) "" "lyrics-event" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 6 0 0 nil 0) (2 2 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (1 0 4 0 nil 0))) 6.140001 nil "" (om-make-point 200 200) (om-make-point 290 480)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 480 214) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 531 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 679 86) (om-make-point 48 30) (quote :lyric) ":lyric" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TEST-TYPE" (quote test-type) (quote ((om-load-inputfun (quote input-funbox) "a MidiEvent" "SELF" nil) (om-load-inputfunmenu1 (quote input-funmenu) "a MIDI event type" "TYPE" (quote :lyric) (list (list "Note" (quote :note)) (list "KeyOn " (quote :keyon)) (list "KeyOff" (quote :keyoff)) (list "KeyPress" (quote :keypress)) (list "CtrlChange" (quote :ctrlchange)) (list "ProgChange" (quote :progchange)) (list "ChanPress" (quote :chanpress)) (list "PitchWheel/PitchBend" (quote :pitchbend)) (list "SongPos" (quote :songpos)) (list "SongSel" (quote :songsel)) (list "Clock" (quote :clock)) (list "Start" (quote :start)) (list "Continue" (quote :continue)) (list "Stop" (quote :stop)) (list "Tune" (quote :tune)) (list "ActiveSens" (quote :activesens)) (list "Reset" (quote :reset)) (list "SysEx" (quote :sysex)) (list "Stream" (quote :stream)) (list "Private" (quote :private)) (list "Process" (quote :process)) (list "DProcess" (quote :dprocess)) (list "QFrame" (quote :qframe)) (list "Ctrl14b" (quote :ctrl14b)) (list "NonRegParam" (quote :nonregparam)) (list "RegParam" (quote :regparam)) (list "SeqNum" (quote :seqnum)) (list "Textual" (quote :textual)) (list "Copyright" (quote :copyright)) (list "SeqName" (quote :seqname)) (list "InstrName" (quote :instrname)) (list "Lyric" (quote :lyric)) (list "Marker" (quote :marker)) (list "CuePoint" (quote :cuepoint)) (list "ChanPrefix" (quote :chanprefix)) (list "EndTrack" (quote :endtrack)) (list "Tempo" (quote :tempo)) (list "SMPTEOffset" (quote :smpteoffset)) (list "TimeSign" (quote :timesign)) (list "KeySign" (quote :keysign)) (list "Specific" (quote :specific)))))) (om-make-point 645 116) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-MIDIEVENTS" (quote get-midievents) (quote ((om-load-inputfun (quote input-funbox) "score element object" "SELF" nil) (om-load-inputfun (quote input-funbox) "lambda test function for midi events to extract" "TEST" nil))) (om-make-point 569 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ex40a.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 322 82) (om-make-point 104 82) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "Users" "bresson" "_SHARED-FILES" "IN-FILES" "MIDI" "kpcorpus")) :device nil :host nil :name "ex40a" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ex40a.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player outport)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :midi-player) 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 174 43) (om-make-point 414 30) "/Users/bresson/_SHARED-FILES/IN-FILES/MIDI/kpcorpus/ex40a.mid" "\"/Users/bresson/_SHARED-FILES/IN-FILES/MIDI/kpcorpus/ex40a.mid\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (4 0 1 1 nil 0) (21 0 2 0 nil 0) (3 0 4 0 nil 0) (6 0 4 1 nil 0) (10 0 5 0 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (8 0 7 1 nil 0) (9 1 7 2 nil 0) (9 0 8 0 nil 0) (14 0 9 0 nil 0) (11 0 10 0 nil 0) (12 1 10 1 nil 0) (15 0 12 1 nil 0) (17 0 14 0 nil 0) (17 0 15 0 nil 0) (16 0 17 0 nil 0) (20 0 17 1 nil 0) (18 0 19 1 nil 0) (21 0 20 0 nil 0) (19 0 20 1 nil 0) (22 0 21 0 nil 0))) nil 6.140001))