; OM File Header - Saved 2018/10/09 17:54:55
; (6.140001 :patc (om-make-point 10 10) (om-make-point 1267 138) (om-make-point 870 722) "" 183 0 "2018/10/09 12:30:46" "2018/10/09 17:54:55")
; End File Header
(in-package :om)(load-lib-for (quote ("om-dyci2")))(setf *om-current-persistent* (om-load-patch1 "dyci2generator-basic" (quote ((let ((box (om-load-boxcall (quote abstraction) "debug" (om-load-lisp-abspatch "debug" 6.140001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda () (listen *terminal-io*))") (quote nil) (om-make-point 622 136) nil (list nil) nil "debug"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 304 510) (om-make-point 112 30) (list "A" "B" "A" "A") "(\"A\" \"B\" \"A\" \"A\")" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 128 69) (quote "initalize a DYCI2 Generator") "" (om-make-point 470 401) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 357 344) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRING+" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 293 297) (om-make-point 74 43) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NUMBER-TO-STRING" (quote number-to-string) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil))) (om-make-point 427 183) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 360 182) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 325 139) (om-make-point 24 30) 15 "15" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 245 182) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 195 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 182 71) (om-make-point 103 30) (list "A" "B" "C" "D") "(\"A\" \"B\" \"C\" \"D\")" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DYCI2QUERY" (quote dyci2::dyci2query) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "QUERY" nil))) (om-make-point 262 556) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "DYCI2GENERATOR" (quote dyci2::dyci2generator) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "memory" nil) (om-load-inputfun (quote input-funbox) "" "labls" nil))) (om-make-point 145 403) (om-make-point 248 78) (if (find-class (quote dyci2::dyci2generator) nil) (make-instance (quote dyci2::dyci2generator) :memory (list "D0" "D1" "B2" "D3" "A4" "C5" "C6" "C7" "B8" "B9" "C10" "D11" "C12" "C13" "D14") :labls (list "D" "D" "B" "D" "A" "C" "C" "C" "B" "B" "C" "D" "C" "C" "D") :from-file t)) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 128 69) (quote "generates a random memory from labels") "" (om-make-point 441 328) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 461 256) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 3 0 nil 0) (8 0 3 1 nil 0) (14 0 3 2 nil 0) (7 0 6 1 nil 0) (9 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 11 0 nil 0) (1 0 11 1 nil 0) (3 0 12 1 nil 0) (8 0 12 2 nil 0) (5 0 14 0 nil 0) (6 0 14 1 nil 0))) nil 6.140001))