
(:patch
 (:name
  "OMDYCI2-Tuto3-LoopGenScenariosOnSingleFiles_STRETCH_VersionTarget")
 (:doc "")
 (:info
  (:created "2018/10/12 13:57:27")
  (:modified "2021/07/15 16:35:47")
  (:by "om-sharp")
  (:version 1.03))
 (:window (:size (1766 945)) (:position (-1920 -698)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 1098)
   (:y 763)
   (:w 38)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.38799214363098145D0
       0.4924229383468628D0
       0.5947297811508179D0
       1.0D0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 100)
   (:id 0))
  (:comment
   (:x 485)
   (:y 79)
   (:w 244)
   (:h 76)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Helvetica") (:size 14) (:style :bold)))
     (:t-or-nil t)))
   (:align nil)
   (:text
    "4a) Select an \"audio corpus\" (audio files + corresponding markers and labels in text annotations files)")
   (:id 1))
  (:comment
   (:x 38)
   (:y 413)
   (:w 222)
   (:h 110)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Helvetica") (:size 14) (:style :bold)))
     (:t-or-nil t)))
   (:align nil)
   (:text
    "5) Set maximum continuities for the output audio files (Loop 2 nested in Loop 1)
1st value for the \"scenario track\", queue of the list for the other tracks")
   (:id 2))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 49)
   (:y 536)
   (:w 88)
   (:h 33)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.8902462720870972D0
       0.6694902181625366D0
       0.2833995819091797D0
       0.53333337))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list 30 20 10))
   (:id 3))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 1586)
   (:y 202)
   (:w 177)
   (:h 31)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.8902462720870972D0
       0.6694902181625366D0
       0.2833995819091797D0
       0.5019608))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "Mauro.Lanza.9.Chop.Holder-2")
   (:id 4))
  (:comment
   (:x 217)
   (:y 147)
   (:w 284)
   (:h 59)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Helvetica") (:size 14) (:style :bold)))
     (:t-or-nil t)))
   (:align nil)
   (:text
    "1) Select the active dimensions, here (duration pitch intensity),
and set parameters to process the labels")
   (:id 5))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 1530)
   (:y 241)
   (:w 109)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.8902462720870972D0
       0.6694902181625366D0
       0.2833995819091797D0
       0.53333337))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list 0 0 10 0 0))
   (:id 6))
  (:comment
   (:x 1073)
   (:y 744)
   (:w 112)
   (:h 22)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "Crossfade (ms)")
   (:id 7))
  (:box
   (:type :abstraction)
   (:reference
    (:textfun
     (:name "function_process_label")
     (:doc "")
     (:info (:created nil) (:modified nil) (:by nil) (:version nil))
     (:window (:size (588 652)) (:position (156 358)))
     (:text
      (:list
       ";;; Edit a valid LAMBDA EXPRESSION"
       ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
       "(lambda (e list_activation_labels) "
       "  (let ("
       "        (div_dur (nth 0 list_activation_labels))"
       "        (mod_12 (nth 1 list_activation_labels))"
       "        (div_intens  (nth 2 list_activation_labels))"
       "        (vc (nth 3 list_activation_labels))"
       "        (nmf (nth 4 list_activation_labels))"
       "        (query_dur (nth 0 e))"
       "        (query_pitch (nth 1 e))"
       "        (query_intens  (nth 2 e))"
       "        (query_vc (nth 3 e))"
       "        (query_nmf (nth 4 e))"
       "        )"
       "    (write-to-string"
       "     (list "
       "      ;duration label"
       "      (if (and (> div_dur 0) (> query_dur -1))"
       "          (round (/ query_dur div_dur)) "
       "        -1)"
       "      ;pitch label"
       "     (if (and (> mod_12 0) (> query_pitch -1))"
       "         (if (= mod_12 2) "
       "             (if (= (round query_pitch) 0) -1 (mod (round query_pitch)12))"
       "           (round query_pitch))"
       "       -1)"
       "      ;intensity label"
       "      (if (and (> div_intens 0)  (> query_intens -1))"
       "          (round (/ query_intens div_intens)) "
       "        -1)"
       "      ;voice casting label"
       "      (if (and (> vc 0)  (> query_vc -1)) "
       "          (round (/ query_vc vc)) "
       "        -1)"
       "      ;nmf label"
       "      (if (and (> nmf 0)  (> query_nmf -1)) "
       "          (round (/ query_nmf nmf)) "
       "        -1)"
       "      )"
       "     )"
       "    ))"))))
   (:group-id nil)
   (:name "function_process_label")
   (:x 409)
   (:y 281)
   (:w 161)
   (:h 32)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.36772552132606507D0
       0.6007713079452515D0
       0.018747687339782715D0
       1.0D0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda :lambda)
   (:pre-delay 0)
   (:inputs
    (:input (:type :standard) (:name "E") (:value nil) (:reactive nil))
    (:input
     (:type :standard)
     (:name "LIST_ACTIVATION_LABELS")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 8))
  (:comment
   (:x 75)
   (:y 41)
   (:w 492)
   (:h 22)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Helvetica") (:size 12) (:style :bold)))
     (:t-or-nil t)))
   (:align nil)
   (:text
    "/!\\ preferences/files and folders/ if output file exists --> auto-rename")
   (:id 9))
  (:comment
   (:x 1333)
   (:y 847)
   (:w 320)
   (:h 64)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "Yellow boxes: generation parameters
Blue boxes: other parameters (titles, crossfades ,etc.)
Green boxes: for advanced users
Red boxes: run (selection then « v »)")
   (:id 10))
  (:box
   (:library "om-dyci2")
   (:type :object)
   (:reference (:symbol "DYCI2GENERATOR" "DYCI2"))
   (:group-id nil)
   (:name nil)
   (:x 513)
   (:y 517)
   (:w 231)
   (:h 102)
   (:color (:color-or-nil (:color nil) (:t-or-nil nil)))
   (:border (:number-or-nil (:number 4.0) (:t-or-nil t)))
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Helvetica") (:size 12) (:style :bold)))
     (:t-or-nil t)))
   (:align :center)
   (:display :text)
   (:showname t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "MEMORY")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LABLS")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "MEMORY") (:reactive nil))
    (:output (:name "LABLS") (:reactive nil)))
   (:window (:size nil) (:position nil))
   (:edition-params)
   (:value
    (:object
     (:class (:symbol "DYCI2GENERATOR" "DYCI2"))
     (:slots
      ((:memory
        (:list
         "(1 0 336)"
         "(1 336 1544)"
         "(1 1544 3552)"
         "(1 3552 5540)"
         "(1 5540 7542)"
         "(1 7542 10002)"
         "(1 10002 10346)"
         "(1 10346 10758)"
         "(1 10758 11132)"
         "(1 11132 11544)"
         "(1 11544 13000)"
         "(1 13000 13550)"
         "(1 13550 13992)"
         "(1 13992 15552)"
         "(1 15552 21962)"
         "(1 21962 22332)"
         "(1 22332 23542)"
         "(1 23542 24064)"
         "(1 24064 24304)"
         "(1 24304 24622)"
         "(1 24622 25360)"
         "(1 25360 26410)"
         "(1 26410 31674)"
         "(1 31674 32382)"
         "(1 32382 32962)"
         "(1 32962 33958)"
         "(1 33958 34204)"
         "(1 34204 34426)"
         "(1 34426 35950)"
         "(1 35950 36182)"
         "(1 36182 37066)"
         "(1 37066 39300)"
         "(1 39300 39764)"
         "(1 39764 39994)"
         "(1 39994 41190)"
         "(1 41190 41548)"
         "(1 41548 42000)"
         "(1 42000 42662)"
         "(1 42662 43794)"
         "(1 43794 44474)"
         "(1 44474 46894)"
         "(1 46894 47184)"
         "(1 47184 47748)"
         "(1 47748 48218)"
         "(1 48218 49276)"
         "(1 49276 49628)"
         "(1 49628 50198)"
         "(1 50198 52310)"
         "(1 52310 53794)"
         "(1 53794 54566)"
         "(1 54566 54844)"
         "(1 54844 55254)"
         "(1 55254 55846)"
         "(1 55846 56282)"
         "(1 56282 56926)"
         "(1 56926 57262)"
         "(1 57262 57772)"
         "(1 57772 58072)"
         "(1 58072 59938)"
         "(1 59938 61250)"
         "(1 61250 62142)"
         "(1 62142 62878)"
         "(1 62878 63472)"
         "(1 63472 64470)"
         "(1 64470 64884)"
         "(1 64884 65964)"
         "(1 65964 67244)"
         "(1 67244 68602)"
         "(1 68602 68954)"
         "(1 68954 69206)"
         "(1 69206 69798)"
         "(1 69798 70148)"
         "(1 70148 71322)"
         "(1 71322 71608)"
         "(1 71608 71996)"
         "(1 71996 72326)"
         "(1 72326 73282)"
         "(1 73282 73644)"
         "(1 73644 75112)"
         "(1 75112 75876)"
         "(1 75876 76306)"
         "(1 76306 76670)"
         "(1 76670 77000)"
         "(1 77000 77358)"
         "(1 77358 77676)"
         "(1 77676 79778)"
         "(1 79778 80178)"
         "(1 80178 80690)"
         "(1 80690 81418)"
         "(1 81418 81686)"
         "(1 81686 83418)"
         "(1 83418 83624)"
         "(1 83624 83920)"
         "(1 83920 84414)"
         "(1 84414 84694)"
         "(1 84694 84974)"
         "(1 84974 85254)"
         "(1 85254 85748)"
         "(1 85748 86218)"
         "(1 86218 86504)"
         "(1 86504 86764)"
         "(1 86764 87186)"
         "(1 87186 88470)"
         "(1 88470 89828)"
         "(1 89828 91386)"
         "(1 91386 91604)"
         "(1 91604 92590)"
         "(1 92590 92838)"
         "(1 92838 93178)"
         "(1 93178 93660)"
         "(1 93660 93902)"
         "(1 93902 94316)"
         "(1 94316 94612)"
         "(1 94612 95006)"
         "(1 95006 95324)"
         "(1 95324 96708)"
         "(1 96708 98018)"
         "(1 98018 98338)"
         "(1 98338 98872)"
         "(1 98872 99122)"
         "(1 99122 99414)"
         "(1 99414 99666)"
         "(1 99666 100000)"
         "(1 100000 100352)"
         "(1 100352 100564)"
         "(1 100564 102456)"
         "(1 102456 103512)"
         "(1 103512 103844)"
         "(1 103844 104262)"
         "(1 104262 104554)"
         "(1 104554 106366)"
         "(1 106366 107264)"
         "(1 107264 107964)"
         "(1 107964 108248)"
         "(1 108248 108674)"
         "(1 108674 109226)"
         "(1 109226 109516)"
         "(1 109516 109752)"
         "(1 109752 112328)"
         "(1 112328 112694)"
         "(1 112694 113342)"
         "(1 113342 114570)"
         "(1 114570 115586)"
         "(1 115586 116184)"
         "(1 116184 116884)"
         "(1 116884 117320)"
         "(1 117320 117610)"
         "(1 117610 117834)"
         "(1 117834 118322)"
         "(1 118322 118840)"
         "(1 118840 119228)"
         "(1 119228 119716)"
         "(1 119716 120994)"
         "(1 120994 121330)"
         "(1 121330 121884)"
         "(1 121884 122114)"
         "(1 122114 122668)"
         "(1 122668 122998)"
         "(1 122998 123326)"
         "(1 123326 124032)"
         "(1 124032 126498)"
         "(1 126498 126844)"
         "(1 126844 127692)"
         "(1 127692 128962)"
         "(1 128962 129230)"
         "(1 129230 130710)"
         "(1 130710 130958)"
         "(1 130958 131202)"
         "(1 131202 131758)"
         "(1 131758 132222)"
         "(1 132222 132524)"
         "(1 132524 134478)"
         "(1 134478 134766)"
         "(1 134766 135146)"
         "(1 135146 135508)"
         "(1 135508 136332)"
         "(1 136332 136998)"
         "(1 136998 137976)"
         "(1 137976 138488)"
         "(1 138488 138766)"
         "(1 138766 139540)"
         "(1 139540 140324)"
         "(1 140324 140612)"
         "(1 140612 140988)"
         "(1 140988 141490)"
         "(1 141490 141886)"
         "(1 141886 142234)"
         "(1 142234 144008)"
         "(1 144008 144528)"
         "(1 144528 144874)"
         "(1 144874 145118)"
         "(1 145118 145664)"
         "(1 145664 146188)"
         "(1 146188 146536)"
         "(1 146536 149508)"
         "(1 149508 150024)"
         "(1 150024 150684)"
         "(1 150684 152416)"
         "(1 152416 153270)"
         "(1 153270 153702)"
         "(1 153702 153952)"
         "(1 153952 155770)"
         "(1 155770 156420)"
         "(1 156420 156700)"
         "(1 156700 157150)"
         "(1 157150 157676)"
         "(1 157676 157990)"
         "(1 157990 158356)"
         "(1 158356 158800)"
         "(1 158800 159218)"
         "(1 159218 159438)"
         "(1 159438 159788)"
         "(1 159788 160008)"
         "(1 160008 160478)"
         "(1 160478 160716)"
         "(1 160716 161014)"
         "(1 161014 161256)"
         "(1 161256 161500)"
         "(1 161500 161846)"
         "(1 161846 162192)"
         "(1 162192 162502)"
         "(1 162502 162798)"
         "(1 162798 163372)"
         "(1 163372 163786)"
         "(1 163786 164450)"
         "(1 164450 165252)"
         "(1 165252 165578)"
         "(1 165578 166052)"
         "(1 166052 166412)"
         "(1 166412 166636)"
         "(1 166636 166968)"
         "(1 166968 167566)"
         "(1 167566 168280)"
         "(1 168280 168742)"
         "(1 168742 171000)"
         "(1 171000 171226)"
         "(1 171226 171802)"
         "(1 171802 172040)"
         "(1 172040 172278)"
         "(1 172278 172504)"
         "(1 172504 172742)"
         "(1 172742 173032)"
         "(1 173032 173326)"
         "(1 173326 173588)"
         "(1 173588 174494)"
         "(1 174494 175036)"
         "(1 175036 175352)"
         "(1 175352 175938)"
         "(1 175938 176448)"
         "(1 176448 177138)"
         "(1 177138 177546)"
         "(1 177546 177926)"
         "(1 177926 178550)"
         "(1 178550 179180)"
         "(1 179180 180276)"
         "(1 180276 180572)"
         "(1 180572 180868)"
         "(1 180868 181116)"
         "(1 181116 181640)"
         "(1 181640 182080)"
         "(1 182080 182856)"
         "(1 182856 183378)"
         "(1 183378 183648)"
         "(1 183648 183888)"
         "(1 183888 184442)"
         "(1 184442 184716)"
         "(1 184716 185014)"
         "(1 185014 185246)"
         "(1 185246 185498)"
         "(1 185498 185842)"
         "(1 185842 186198)"
         "(1 186198 186514)"
         "(1 186514 186810)"
         "(1 186810 187394)"
         "(1 187394 188450)"
         "(1 188450 190054)"
         "(1 190054 190422)"
         "(1 190422 190644)"
         "(1 190644 190962)"
         "(1 190962 191562)"
         "(1 191562 193946)"
         "(1 193946 194992)"
         "(1 194992 195216)"
         "(1 195216 195526)"
         "(1 195526 195994)"
         "(1 195994 196282)"
         "(1 196282 196514)"
         "(1 196514 196744)"
         "(1 196744 197022)"
         "(1 197022 197316)"
         "(1 197316 197590)"
         "(1 197590 198260)"
         "(1 198260 198566)"
         "(1 198566 199050)"
         "(1 199050 199344)"
         "(1 199344 199936)"
         "(1 199936 200234)"
         "(1 200234 200814)"
         "(1 200814 201280)"
         "(1 201280 201730)"
         "(1 201730 201998)"
         "(1 201998 204274)"
         "(1 204274 204700)"
         "(1 204700 205112)"
         "(1 205112 205800)"
         "(1 205800 206204)"
         "(1 206204 206694)"
         "(1 206694 207374)"
         "(1 207374 207732)"
         "(1 207732 208024)"
         "(1 208024 208452)"
         "(1 208452 208716)"
         "(1 208716 209012)"
         "(1 209012 209234)"
         "(1 209234 209502)"
         "(1 209502 209846)"
         "(1 209846 210194)"
         "(1 210194 210488)"
         "(1 210488 210796)"
         "(1 210796 211064)"
         "(1 211064 213064)"
         "(1 213064 214050)"
         "(1 214050 214420)"
         "(1 214420 214660)"
         "(1 214660 214966)"
         "(1 214966 215388)"
         "(1 215388 215750)"
         "(1 215750 216042)"
         "(1 216042 218068)"
         "(1 218068 218988)"
         "(1 218988 219236)"
         "(1 219236 219798)"
         "(1 219798 220040)"
         "(1 220040 220268)"
         "(1 220268 220518)"
         "(1 220518 220746)"
         "(1 220746 221296)"
         "(1 221296 221582)"
         "(1 221582 222596)"
         "(1 222596 223054)"
         "(1 223054 223344)"
         "(1 223344 223938)"
         "(1 223938 224238)"
         "(1 224238 225270)"
         "(1 225270 225972)"
         "(1 225972 226550)"
         "(1 226550 226738)"
         "(1 226738 227210)"
         "(1 227210 227432)"
         "(1 227432 228364)"
         "(1 228364 228598)"
         "(1 228598 229008)"
         "(1 229008 229828)"
         "(1 229828 230906)"
         "(1 230906 231760)"
         "(1 231760 232056)"
         "(1 232056 232526)"
         "(1 232526 232726)"
         "(1 232726 233084)"
         "(1 233084 233328)"
         "(1 233328 233650)"
         "(1 233650 234222)"
         "(1 234222 234426)"
         "(1 234426 235572)"
         "(1 235572 236064)"
         "(1 236064 236646)"
         "(1 236646 237684)"
         "(1 237684 239618)"
         "(1 239618 239868)"
         "(1 239868 242416)"
         "(1 242416 242722)"
         "(1 242722 243102)"
         "(1 243102 243426)"
         "(1 243426 244052)"
         "(1 244052 244336)"
         "(1 244336 244646)"
         "(1 244646 244888)"
         "(1 244888 245150)"
         "(1 245150 245428)"
         "(1 245428 245722)"
         "(1 245722 246494)"
         "(1 246494 249322)"
         "(1 249322 251662)"
         "(1 251662 252132)"
         "(1 252132 252542)"
         "(1 252542 253414)"
         "(1 253414 253610)"
         "(1 253610 254146)"
         "(1 254146 254758)"
         "(1 254758 256128)"
         "(1 256128 258172)"))
       (:labls
        (:list
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 6 -1 -1)"
         "(-1 -1 6 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 7 -1 -1)"
         "(-1 -1 6 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 7 -1 -1)"
         "(-1 -1 7 -1 -1)"
         "(-1 -1 7 -1 -1)"
         "(-1 -1 5 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 7 -1 -1)"
         "(-1 -1 6 -1 -1)"
         "(-1 -1 7 -1 -1)"
         "(-1 -1 6 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 8 -1 -1)"
         "(-1 -1 5 -1 -1)"
         "(-1 -1 7 -1 -1)"
         "(-1 -1 7 -1 -1)"
         "(-1 -1 6 -1 -1)"
         "(-1 -1 5 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 8 -1 -1)"
         "(-1 -1 5 -1 -1)"
         "(-1 -1 7 -1 -1)"
         "(-1 -1 6 -1 -1)"
         "(-1 -1 5 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 5 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 5 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 5 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 5 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 5 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 1 -1 -1)"
         "(-1 -1 1 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 1 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 1 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 1 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 1 -1 -1)"
         "(-1 -1 1 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 1 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 1 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 1 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 5 -1 -1)"
         "(-1 -1 5 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 5 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 5 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 1 -1 -1)"))))))
   (:id 11))
  (:comment
   (:x 563)
   (:y 622)
   (:w 188)
   (:h 22)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font
      (:font (:face "Helvetica") (:size 12) (:style :bold :italic)))
     (:t-or-nil t)))
   (:align nil)
   (:text "Audio generator - other tracks")
   (:id 12))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 1178)
   (:y 676)
   (:w 115)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.3151020407676697D0
       0.41455078125D0
       0.5224196910858154D0
       1.0D0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "OutputTuto3")
   (:id 13))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 1792)
   (:y 199)
   (:w 160)
   (:h 32)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.8902462720870972D0
       0.6694902181625366D0
       0.2833995819091797D0
       0.5019608))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "Drum.Solo.Horns-2")
   (:id 14))
  (:box
   (:type :abstraction)
   (:reference
    (:patch-from-file
     (:pathname
      (:directory (:relative :up "abstractions"))
      (:device nil)
      (:host nil)
      (:name "output_folder_sync")
      (:type "opat"))))
   (:group-id nil)
   (:name "output_folder_sync")
   (:x 1222)
   (:y 756)
   (:w 145)
   (:h 36)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock :eval-once)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "mem_dir")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "scen_dir")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "head_title")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "root_dir")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "parameters_names")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "parameters_values")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "remove_scen_mode")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "sync_mode")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "output 1") (:reactive nil)))
   (:id 15))
  (:comment
   (:x 1257)
   (:y 577)
   (:w 124)
   (:h 22)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font
      (:font (:face "Helvetica") (:size 12) (:style :bold :italic)))
     (:t-or-nil t)))
   (:align nil)
   (:text "Scenario generator")
   (:id 16))
  (:comment
   (:x 969)
   (:y 99)
   (:w 244)
   (:h 59)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Helvetica") (:size 14) (:style :bold)))
     (:t-or-nil t)))
   (:align nil)
   (:text
    "2) Select the scenario generation directory
(then Loop 1 : 1 file --> 1 scenario)")
   (:id 17))
  (:comment
   (:x 69)
   (:y 22)
   (:w 1168)
   (:h 74)
   (:fgcolor nil)
   (:bgcolor
    (:color-or-nil
     (:color
      (:color
       0.8902462720870972D0
       0.6694902181625366D0
       0.2833995819091797D0
       0.48235294))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Helvetica") (:size 18) (:style :bold)))
     (:t-or-nil t)))
   (:align nil)
   (:text
    "OM-DYCI2 - Advanced tutorial 2: AUTOMATIC GENERATION OF EVOLUTIVE SCENARIOS ON THE WHOLE SCENARIO DIRECTORY
- an evolutive scenario [length determined at step 4) max continuity defined at step 5)] generated on the whole directory
- the events in the resulting voices are stretched so that all the tracks are syncronized on track 1 (see patch Cb)")
   (:id 18))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "this_patch_parent_directory")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size nil) (:position nil))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:in (:type omselfin) (:index 0) (:name "BOX") (:doc "")))
       (:group-id nil)
       (:name "BOX")
       (:x 127)
       (:y 58)
       (:w 49)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:out
         (:type omout)
         (:name "this_patch_parent_directory")
         (:index 1)
         (:doc "")))
       (:group-id nil)
       (:name "this_patch_parent_directory")
       (:x 60)
       (:y 247)
       (:w 182)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 1))
      (:box
       (:type :function)
       (:reference mypathname)
       (:group-id nil)
       (:name "mypathname")
       (:x 97)
       (:y 136)
       (:w 107)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "OMPERSISTANTOBJECT")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 2))
      (:box
       (:type :function)
       (:reference container)
       (:group-id nil)
       (:name "container")
       (:x 107)
       (:y 103)
       (:w 87)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "OMBOX")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:type :function)
       (:reference directory-namestring)
       (:group-id nil)
       (:name "directory-namestring")
       (:x 77)
       (:y 193)
       (:w 147)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "P")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 4)))
     (:connections
      (:connection (:from (:box 0 :out 0)) (:to (:box 3 :in 0)))
      (:connection (:from (:box 2 :out 0)) (:to (:box 4 :in 0)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 2 :in 0)))
      (:connection (:from (:box 4 :out 0)) (:to (:box 1 :in 0))))))
   (:group-id nil)
   (:name "this_patch_parent_directory")
   (:x 1004)
   (:y 259)
   (:w 186)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :value)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs)
   (:outputs
    (:output (:name "this_patch_parent_directory") (:reactive nil)))
   (:id 19))
  (:box
   (:type :function)
   (:reference debug-dyci2)
   (:group-id nil)
   (:name "debug-dyci2")
   (:x 1413)
   (:y 219)
   (:w 106)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 20))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 311)
   (:y 210)
   (:w 174)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.8902462720870972D0
       0.6694902181625366D0
       0.2833995819091797D0
       0.53333337))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list "dur" "pitch_mode" "energy"))
   (:id 21))
  (:comment
   (:x 1417)
   (:y 719)
   (:w 279)
   (:h 106)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Helvetica") (:size 12) (:style :bold)))
     (:t-or-nil t)))
   (:align nil)
   (:text
    "6) Sync mode
nil: no synchronization
t: the events of all the tracks are stretched to match the durations of the events in track 1
(if using this mode, introducing duration classes in step 1, for instance 50ms or 100ms may be preferible)")
   (:id 22))
  (:comment
   (:x 780)
   (:y 929)
   (:w 203)
   (:h 22)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Helvetica") (:size 12) (:style :bold)))
     (:t-or-nil t)))
   (:align nil)
   (:text "7) EVALUATE")
   (:id 23))
  (:box
   (:type :object)
   (:reference sound)
   (:group-id nil)
   (:name nil)
   (:x 686)
   (:y 969)
   (:w 837)
   (:h 136)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value :choose-file)
     (:reactive t)))
   (:outputs (:output (:name "SELF") (:reactive nil)))
   (:window (:size nil) (:position nil))
   (:edition-params)
   (:value
    (:object
     (:class sound)
     (:slots
      ((:onset 0)
       (:duration 0)
       (:n-samples nil)
       (:n-channels nil)
       (:sample-rate nil)
       (:smpl-type :float)
       (:sample-size 16)))
     (:add-slots
      ((:markers nil)
       (:gain 1.0)
       (:access-from-file nil)
       (:file-pathname nil)))))
   (:id 24))
  (:box
   (:type :interface)
   (:reference list-selection)
   (:group-id nil)
   (:name "list-selection")
   (:x 33)
   (:y 958)
   (:w 622)
   (:h 386)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:multiple-selection nil)
   (:cell-height 12)
   (:cell-font
    (:font (:face "Lucida Grande") (:size 11) (:style :plain)))
   (:output-mode :value)
   (:inputs
    (:input (:type :key) (:name "items") (:value nil) (:reactive t)))
   (:outputs (:output (:name "value") (:reactive t)))
   (:value nil)
   (:items nil)
   (:selection nil)
   (:id 25))
  (:comment
   (:x 29)
   (:y 915)
   (:w 203)
   (:h 36)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Helvetica") (:size 12) (:style :bold)))
     (:t-or-nil t)))
   (:align nil)
   (:text "8) EVALUATE, THEN CMD + CLICK ON THE PATHS")
   (:id 26))
  (:box
   (:type :function)
   (:reference flat)
   (:group-id nil)
   (:name "flat")
   (:x 492)
   (:y 885)
   (:w 54)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LST")
     (:value nil)
     (:reactive t)))
   (:outputs (:output (:name "out") (:reactive t)))
   (:id 27))
  (:box
   (:library "om-dyci2")
   (:type :object)
   (:reference (:symbol "DYCI2GENERATOR" "DYCI2"))
   (:group-id nil)
   (:name nil)
   (:x 788)
   (:y 521)
   (:w 231)
   (:h 102)
   (:color (:color-or-nil (:color nil) (:t-or-nil nil)))
   (:border (:number-or-nil (:number 4.0) (:t-or-nil t)))
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Helvetica") (:size 12) (:style :bold)))
     (:t-or-nil t)))
   (:align :center)
   (:display :text)
   (:showname t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "MEMORY")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LABLS")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "MEMORY") (:reactive nil))
    (:output (:name "LABLS") (:reactive nil)))
   (:window (:size nil) (:position nil))
   (:edition-params)
   (:value
    (:object
     (:class (:symbol "DYCI2GENERATOR" "DYCI2"))
     (:slots
      ((:memory
        (:list
         "(1 0 266)"
         "(1 266 656)"
         "(1 656 878)"
         "(1 878 1984)"
         "(1 1984 2244)"
         "(1 2244 2502)"
         "(1 2502 2872)"
         "(1 2872 3986)"
         "(1 3986 4268)"
         "(1 4268 4650)"
         "(1 4650 4886)"
         "(1 4886 5984)"
         "(1 5984 6250)"
         "(1 6250 6506)"
         "(1 6506 6896)"
         "(1 6896 7976)"
         "(1 7976 8266)"
         "(1 8266 8638)"
         "(1 8638 8880)"
         "(1 8880 9396)"
         "(1 9396 9980)"
         "(1 9980 10244)"
         "(1 10244 10504)"
         "(1 10504 10878)"
         "(1 10878 11988)"
         "(1 11988 12264)"
         "(1 12264 12514)"
         "(1 12514 12884)"
         "(1 12884 13990)"
         "(1 13990 14256)"
         "(1 14256 14500)"
         "(1 14500 14888)"
         "(1 14888 15982)"
         "(1 15982 16266)"
         "(1 16266 16538)"
         "(1 16538 16884)"
         "(1 16884 17400)"
         "(1 17400 17796)"
         "(1 17796 17976)"
         "(1 17976 18266)"
         "(1 18266 18506)"
         "(1 18506 18870)"
         "(1 18870 19980)"
         "(1 19980 20514)"
         "(1 20514 20868)"
         "(1 20868 21264)"
         "(1 21264 21980)"
         "(1 21980 22254)"
         "(1 22254 22504)"
         "(1 22504 22856)"
         "(1 22856 23984)"
         "(1 23984 24288)"
         "(1 24288 24648)"
         "(1 24648 24884)"
         "(1 24884 25442)"
         "(1 25442 25982)"
         "(1 25982 26264)"
         "(1 26264 26506)"
         "(1 26506 26878)"
         "(1 26878 27422)"
         "(1 27422 27988)"
         "(1 27988 28320)"
         "(1 28320 28880)"
         "(1 28880 29312)"
         "(1 29312 29986)"
         "(1 29986 30246)"
         "(1 30246 30508)"
         "(1 30508 30896)"
         "(1 30896 31928)"
         "(1 31928 32224)"
         "(1 32224 32512)"
         "(1 32512 32848)"
         "(1 32848 33236)"
         "(1 33236 33946)"
         "(1 33946 34202)"
         "(1 34202 34464)"
         "(1 34464 34828)"
         "(1 34828 35950)"
         "(1 35950 36214)"
         "(1 36214 36602)"
         "(1 36602 36838)"
         "(1 36838 37938)"
         "(1 37938 38214)"
         "(1 38214 38468)"
         "(1 38468 38836)"
         "(1 38836 39158)"
         "(1 39158 39942)"))
       (:labls
        (:list
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 1 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 1 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 0 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 1 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 0 -1 -1)"
         "(-1 -1 0 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 0 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 0 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 1 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 0 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 1 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 2 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 4 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 1 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 3 -1 -1)"
         "(-1 -1 5 -1 -1)"
         "(-1 -1 1 -1 -1)"))))))
   (:id 28))
  (:comment
   (:x 789)
   (:y 621)
   (:w 251)
   (:h 22)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font
      (:font (:face "Helvetica") (:size 12) (:style :bold :italic)))
     (:t-or-nil t)))
   (:align nil)
   (:text "Audio generator - 1st \"scenario\" track")
   (:id 29))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "loop-process-dataset")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (1143 719)) (:position (-1415 -546)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "lab_files") (:doc "")))
       (:group-id nil)
       (:name "lab_files")
       (:x 223)
       (:y 68)
       (:w 66)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :optional)
         (:name "internal input value")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "mem") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "mem")
       (:x 433)
       (:y 477)
       (:w 49)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 1))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 2)
         (:name "list_activation_labels")
         (:doc "")))
       (:group-id nil)
       (:name "list_activation_labels")
       (:x 411)
       (:y 76)
       (:w 141)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 2))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 3)
         (:name "function_process_labels")
         (:doc "")))
       (:group-id nil)
       (:name "function_process_labels")
       (:x 588)
       (:y 76)
       (:w 161)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:type :io)
       (:reference
        (:out
         (:type omout)
         (:name "before_lambda")
         (:index 2)
         (:doc "")))
       (:group-id nil)
       (:name "before_lambda")
       (:x 706)
       (:y 486)
       (:w 102)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 4))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "durations") (:index 3) (:doc "")))
       (:group-id nil)
       (:name "durations")
       (:x 874)
       (:y 492)
       (:w 102)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 5))
      (:box
       (:type :object)
       (:reference textbuffer)
       (:group-id nil)
       (:name "TEXTBUFFER")
       (:x 219)
       (:y 176)
       (:w 148)
       (:h 82)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font
        (:font (:face "Calibri") (:size 12) (:style :italic)))
       (:align :center)
       (:display :mini-view)
       (:showname t)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "CONTENTS")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "SELF") (:reactive nil))
        (:output (:name "CONTENTS") (:reactive nil)))
       (:window (:size nil) (:position nil))
       (:edition-params (:read-mode :lines-cols))
       (:value
        (:object
         (:class textbuffer)
         (:slots ((:contents nil)))
         (:add-slots ((:input-mode :lines-cols)))))
       (:id 6))
      (:box
       (:type :special)
       (:reference iterate)
       (:group-id nil)
       (:name "iterate")
       (:x 326)
       (:y 453)
       (:w 57)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "action")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "action")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "action")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 7))
      (:box
       (:type :special)
       (:reference collect)
       (:group-id nil)
       (:name "collect")
       (:x 429)
       (:y 372)
       (:w 57)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "push")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 8))
      (:box
       (:type :function)
       (:reference flat)
       (:group-id nil)
       (:name "flat")
       (:x 430)
       (:y 433)
       (:w 54)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 9))
      (:box
       (:type :function)
       (:reference mapcar)
       (:group-id nil)
       (:name "mapcar")
       (:x 408)
       (:y 318)
       (:w 78)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "FUNCTION")
         (:value box)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LIST")
         (:value name)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 10))
      (:box
       (:type :abstraction)
       (:reference
        (:textfun
         (:name "select-labels")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size (1205 417)) (:position (66 154)))
         (:text
          (:list
           ";;; Edit a valid LAMBDA EXPRESSION"
           ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
           "(lambda (lines list_activation_labels)"
           "  (loop for line in lines "
           "        collect (append "
           "                 ;(list (if (> (nth 0 list_activation_labels) 0) (round (/ (- (sec->ms (second line)) (sec->ms (first line))) (nth 0 list_activation_labels))) -1))"
           "                 ;(list (if (> (nth 0 list_activation_labels) 0) (- (sec->ms (second line)) (sec->ms (first line)))  -1))"
           "                 (list (- (sec->ms (second line)) (sec->ms (first line))))"
           "                 ;(list (- (second line) (first line)))"
           "                 (loop for i from 1 to (- (length list_activation_labels) 1)"
           "                       ;collect (if (> (nth i list_activation_labels) 0) (nth (+ i 1) line) -1)"
           "                       collect (nth (+ i 1) line)"
           "                       )"
           "                 )"
           "        into labels"
           "        finally return labels"
           "        )"
           "  )"
           ""))))
       (:group-id nil)
       (:name "select-labels")
       (:x 438)
       (:y 264)
       (:w 115)
       (:h 28)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock :eval-once)
       (:lambda nil)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "LINES")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LIST_ACTIVATION_LABELS")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 11))
      (:box
       (:type :special)
       (:reference loop-list)
       (:group-id nil)
       (:name "list-loop")
       (:x 224)
       (:y 117)
       (:w 65)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "list")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "i") (:reactive nil)))
       (:id 12))
      (:box
       (:type :special)
       (:reference collect)
       (:group-id nil)
       (:name "collect")
       (:x 561)
       (:y 338)
       (:w 57)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "push")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 13))
      (:box
       (:type :special)
       (:reference collect)
       (:group-id nil)
       (:name "collect")
       (:x 868)
       (:y 285)
       (:w 57)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "push")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 14))
      (:box
       (:type :abstraction)
       (:reference
        (:textfun
         (:name "durations")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size (1196 660)) (:position (42 69)))
         (:text
          (:list
           ";;; Edit a valid LAMBDA EXPRESSION"
           ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
           "(lambda (lines list_activation_labels)"
           "  (loop for line in lines "
           "        collect (append "
           "                 ;(list (if (> (nth 0 list_activation_labels) 0) (round (/ (- (sec->ms (second line)) (sec->ms (first line))) (nth 0 list_activation_labels))) -1))"
           "                 ;(list (if (> (nth 0 list_activation_labels) 0) (- (sec->ms (second line)) (sec->ms (first line)))  -1))"
           "                 ;(list "
           "                  (- (sec->ms (second line)) (sec->ms (first line)))"
           "                  ;)"
           "                 ;(list (- (second line) (first line)))"
           "                 ;(loop for i from 1 to (- (length list_activation_labels) 1)"
           "                 ;      ;collect (if (> (nth i list_activation_labels) 0) (nth (+ i 1) line) -1)"
           "                 ;      collect (nth (+ i 1) line)"
           "                       )"
           "                 )"
           "        ;into labels"
           "        ;finally return labels"
           "        )"
           ""))))
       (:group-id nil)
       (:name "durations")
       (:x 662)
       (:y 239)
       (:w 115)
       (:h 28)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock :eval-once)
       (:lambda nil)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "LINES")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LIST_ACTIVATION_LABELS")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 15))
      (:box
       (:type :function)
       (:reference flat)
       (:group-id nil)
       (:name "flat")
       (:x 980)
       (:y 382)
       (:w 54)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 16)))
     (:connections
      (:connection (:from (:box 0 :out 0)) (:to (:box 12 :in 0)))
      (:connection (:from (:box 2 :out 0)) (:to (:box 11 :in 1)))
      (:connection (:from (:box 2 :out 0)) (:to (:box 15 :in 1)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 10 :in 0)))
      (:connection (:from (:box 6 :out 1)) (:to (:box 11 :in 0)))
      (:connection (:from (:box 6 :out 1)) (:to (:box 15 :in 0)))
      (:connection (:from (:box 8 :out 0)) (:to (:box 7 :in 0)))
      (:connection (:from (:box 8 :out 1)) (:to (:box 9 :in 0)))
      (:connection (:from (:box 9 :out 0)) (:to (:box 1 :in 0)))
      (:connection (:from (:box 10 :out 0)) (:to (:box 8 :in 0)))
      (:connection (:from (:box 11 :out 0)) (:to (:box 10 :in 1)))
      (:connection (:from (:box 11 :out 0)) (:to (:box 13 :in 0)))
      (:connection (:from (:box 12 :out 0)) (:to (:box 6 :in 0)))
      (:connection
       (:from (:box 13 :out 0))
       (:to (:box 7 :in 1))
       (:attributes (:color nil :style nil :modif (0 12/71))))
      (:connection (:from (:box 13 :out 1)) (:to (:box 4 :in 0)))
      (:connection (:from (:box 14 :out 0)) (:to (:box 7 :in 2)))
      (:connection (:from (:box 14 :out 1)) (:to (:box 16 :in 0)))
      (:connection (:from (:box 15 :out 0)) (:to (:box 14 :in 0)))
      (:connection (:from (:box 16 :out 0)) (:to (:box 5 :in 0))))))
   (:group-id nil)
   (:name "loop-process-dataset")
   (:x 2469/2)
   (:y 484)
   (:w 150)
   (:h 36)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock :eval-once)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "lab_files")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "list_activation_labels")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "function_process_labels")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "mem") (:reactive nil))
    (:output (:name "before_lambda") (:reactive nil))
    (:output (:name "durations") (:reactive nil)))
   (:id 30))
  (:box
   (:type :function)
   (:reference (:symbol "OM-DIRECTORY" "OM-API"))
   (:group-id nil)
   (:name "om-directory")
   (:x 2417/2)
   (:y 400)
   (:w 105)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock :eval-once)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "PATH")
     (:value nil)
     (:reactive nil))
    (:input (:type :key) (:name "type") (:value nil) (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 31))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 2695/2)
   (:y 323)
   (:w 100)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.030046656727790833D0
       0.24989540874958038D0
       0.4119427800178528D0
       0.5019608))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "seg_desc")
   (:id 32))
  (:box
   (:type :abstraction)
   (:reference
    (:textfun
     (:name "make-local-dyci2-path")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size nil) (:position nil))
     (:text
      (:list
       ";;; Edit a valid LAMBDA EXPRESSION"
       ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
       "(lambda (folder corpus_subfolder) "
       "  (namestring "
       "   (merge-pathnames "
       "    (string+ folder \"Corpus/\" corpus_subfolder \"/\") "
       "    ;(om-user-home)"
       "    )))"
       "  "))))
   (:group-id nil)
   (:name "make-local-dyci2-path")
   (:x 2313/2)
   (:y 369)
   (:w 155)
   (:h 29)
   (:color (:color-or-nil (:color nil) (:t-or-nil nil)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "FOLDER")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "CORPUS_SUBFOLDER")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 33))
  (:box
   (:type :special)
   (:reference loop-list)
   (:group-id nil)
   (:name "list-loop")
   (:x 1196)
   (:y 429)
   (:w 63)
   (:h 42)
   (:color (:color-or-nil (:color nil) (:t-or-nil nil)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:inputs
    (:input
     (:type :standard)
     (:name "list")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "i") (:reactive nil)))
   (:id 34))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "loop-process-dataset")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (918 736)) (:position (-1322 -589)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "lab_files") (:doc "")))
       (:group-id nil)
       (:name "lab_files")
       (:x 212)
       (:y 2)
       (:w 66)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :optional)
         (:name "internal input value")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "sound") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "sound")
       (:x 229)
       (:y 509)
       (:w 68)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 1))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "mem") (:index 2) (:doc "")))
       (:group-id nil)
       (:name "mem")
       (:x 489)
       (:y 512)
       (:w 49)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 2))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 2)
         (:name "list_activation_labels")
         (:doc "")))
       (:group-id nil)
       (:name "list_activation_labels")
       (:x 545)
       (:y 6)
       (:w 141)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :optional)
         (:name "internal input value")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "labels") (:index 3) (:doc "")))
       (:group-id nil)
       (:name "labels")
       (:x 594)
       (:y 507)
       (:w 53)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 4))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 3)
         (:name "extension_audio_files")
         (:doc "")))
       (:group-id nil)
       (:name "extension_audio_files")
       (:x 717)
       (:y 2)
       (:w 147)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :optional)
         (:name "internal input value")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 4)
         (:name "function_process_label")
         (:doc "")))
       (:group-id nil)
       (:name "function_process_label")
       (:x 956)
       (:y 38)
       (:w 155)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :optional)
         (:name "internal input value")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 6))
      (:box
       (:type :object)
       (:reference textbuffer)
       (:group-id nil)
       (:name "TEXTBUFFER")
       (:x 284)
       (:y 115)
       (:w 148)
       (:h 82)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font
        (:font (:face "Calibri") (:size 12) (:style :italic)))
       (:align :center)
       (:display :mini-view)
       (:showname t)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "CONTENTS")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "SELF") (:reactive nil))
        (:output (:name "CONTENTS") (:reactive nil)))
       (:window (:size nil) (:position nil))
       (:edition-params (:read-mode :lines-cols))
       (:value
        (:object
         (:class textbuffer)
         (:slots ((:contents nil)))
         (:add-slots ((:input-mode :lines-cols)))))
       (:id 7))
      (:box
       (:type :object)
       (:reference sound)
       (:group-id nil)
       (:name nil)
       (:x 114)
       (:y 312)
       (:w 300)
       (:h 71)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font
        (:font (:face "Calibri") (:size 12) (:style :italic)))
       (:align :center)
       (:display :mini-view)
       (:showname nil)
       (:show-markers t)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value :choose-file)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "markers")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "access-from-file")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "SELF") (:reactive nil))
        (:output (:name "markers") (:reactive nil))
        (:output (:name "access-from-file") (:reactive nil)))
       (:window (:size nil) (:position nil))
       (:edition-params)
       (:value
        (:object
         (:class sound)
         (:slots
          ((:onset 0)
           (:duration 0)
           (:n-samples nil)
           (:n-channels nil)
           (:sample-rate nil)
           (:smpl-type :float)
           (:sample-size 16)))
         (:add-slots
          ((:markers nil)
           (:gain 1.0)
           (:access-from-file nil)
           (:file-pathname nil)))))
       (:id 8))
      (:box
       (:type :function)
       (:reference (:symbol "OM-MAKE-PATHNAME" "OM-API"))
       (:group-id nil)
       (:name "om-make-pathname")
       (:x 93)
       (:y 205)
       (:w 145)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :key)
         (:name "directory")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "name")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "type")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 9))
      (:box
       (:type :function)
       (:reference pathname-name)
       (:group-id nil)
       (:name "pathname-name")
       (:x 97)
       (:y 119)
       (:w 125)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "P")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 10))
      (:comment
       (:x 21)
       (:y 324)
       (:w 63)
       (:h 50)
       (:fgcolor nil)
       (:bgcolor nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:text "le même nom mais en .wav")
       (:id 11))
      (:box
       (:type :abstraction)
       (:reference
        (:textfun
         (:name "make-markers")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size (500 500)) (:position (602 127)))
         (:text
          (:list
           ";;; Edit a valid LAMBDA EXPRESSION"
           ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
           "(lambda (lines processed_labels)"
           "  (loop for i from 0 to (- (length lines) 1)"
           "        collect"
           "         (list"
           "          (sec->ms (first (nth i lines)))"
           "          ;(first (nth i lines))"
           "          (write-to-string (nth i processed_labels))"
           "          )         "
           "         )"
           "  )"
           ""
           ";(lambda (lines list_activation_labels)"
           ";  (loop for line in lines collect"
           ";        (list"
           ";         (sec->ms (first line))"
           ";         (number-to-string (round (fourth line)))"
           ";         )"
           ";        ))"))))
       (:group-id nil)
       (:name "make-markers")
       (:x 271)
       (:y 279)
       (:w 115)
       (:h 28)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock nil)
       (:lambda nil)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "LINES")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "PROCESSED_LABELS")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 12))
      (:box
       (:type :special)
       (:reference iterate)
       (:group-id nil)
       (:name "iterate")
       (:x 357)
       (:y 461)
       (:w 57)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "action")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "action")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "action")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 13))
      (:box
       (:type :special)
       (:reference collect)
       (:group-id nil)
       (:name "collect")
       (:x 235)
       (:y 400)
       (:w 57)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "push")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 14))
      (:box
       (:type :abstraction)
       (:reference
        (:textfun
         (:name "make-memory")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size nil) (:position nil))
         (:text
          (:list
           ";;; Edit a valid LAMBDA EXPRESSION"
           ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
           "(lambda (lines n processed_labels) "
           "  (loop for line in lines "
           "        collect (write-to-string (list n (sec->ms (first line)) (sec->ms (second line))))"
           "        ;collect (write-to-string (list n (first line) (second line)))"
           "        into mem-segments"
           "        finally return (list mem-segments processed_labels))"
           ")"
           "                                 "
           "#|"
           "(lambda (lines n  list_activation_labels) "
           "  (loop for line in lines "
           "        collect (write-to-string (list n (sec->ms (first line)) (sec->ms (second line))))"
           "        into mem-segments"
           "        ;collect (write-to-string (round (/ (fourth line) div_intens)))"
           "        ;collect (write-to-string (list (round (/ (fourth line) div_intens))))"
           "        collect (write-to-string"
           "                 (list "
           "                 ; duree"
           "                  (if (> div_dur 0) (round (/ (- (sec->ms (second line)) (sec->ms (first line))) div_dur)) -1)"
           "                 ;pitch"
           "                  (if (= mod_12 1) "
           "                      (if (= (round (third line)) 0) -1 (mod (round (third line))12))"
           "                    (if (< mod_12 0) -1 (round (third line)))"
           "                    )"
           "                 ;inten"
           "                  (if (> div_intens 0) (round (/ (fourth line) div_intens)) -1)"
           "                 ;voice casting"
           "                  (if (> vc 0) (round (/ (fifth line) vc)) -1)"
           "                 ;nmf"
           "                  (if (> nmf 0) (round (/ (sixth line) nmf)) -1)"
           "                 ))"
           "        into labels"
           "        finally return (list mem-segments labels)))"
           "|#"
           "                                 "))))
       (:group-id nil)
       (:name "make-memory")
       (:x 461)
       (:y 281)
       (:w 200)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock nil)
       (:lambda nil)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "LINES")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "N")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "PROCESSED_LABELS")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 15))
      (:box
       (:type :special)
       (:reference collect)
       (:group-id nil)
       (:name "collect")
       (:x 485)
       (:y 387)
       (:w 57)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "push")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 16))
      (:box
       (:type :function)
       (:reference length)
       (:group-id nil)
       (:name "length")
       (:x 375)
       (:y 51)
       (:w 71)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SEQUENCE")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 17))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 502)
       (:y 57)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 1)
       (:id 18))
      (:comment
       (:x 556)
       (:y 102)
       (:w 47)
       (:h 22)
       (:fgcolor nil)
       (:bgcolor nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:text "#sound")
       (:id 19))
      (:box
       (:type :function)
       (:reference split)
       (:group-id nil)
       (:name "split")
       (:x 554)
       (:y 335)
       (:w 59)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "out") (:reactive nil))
        (:output (:name "out1") (:reactive nil)))
       (:id 20))
      (:box
       (:type :special)
       (:reference collect)
       (:group-id nil)
       (:name "collect")
       (:x 592)
       (:y 388)
       (:w 57)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "push")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 21))
      (:box
       (:type :function)
       (:reference flat)
       (:group-id nil)
       (:name "flat")
       (:x 486)
       (:y 468)
       (:w 54)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 22))
      (:box
       (:type :function)
       (:reference flat)
       (:group-id nil)
       (:name "flat")
       (:x 593)
       (:y 462)
       (:w 54)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 23))
      (:box
       (:type :abstraction)
       (:reference
        (:textfun
         (:name "select-labels")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size nil) (:position nil))
         (:text
          (:list
           ";;; Edit a valid LAMBDA EXPRESSION"
           ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
           "(lambda (lines list_activation_labels)"
           "  (loop for line in lines "
           "        collect (append "
           "                 ;(list (if (> (nth 0 list_activation_labels) 0) (round (/ (- (sec->ms (second line)) (sec->ms (first line))) (nth 0 list_activation_labels))) -1))"
           "                 ;(list (if (> (nth 0 list_activation_labels) 0) (- (sec->ms (second line)) (sec->ms (first line)))  -1))"
           "                 (list (- (sec->ms (second line)) (sec->ms (first line))))"
           "                 (loop for i from 1 to (- (length list_activation_labels) 1)"
           "                       ;collect (if (> (nth i list_activation_labels) 0) (nth (+ i 1) line) -1)"
           "                       collect (nth (+ i 1) line)"
           "                       )"
           "                 )"
           "        into labels"
           "        finally return labels"
           "        )"
           "  )"
           ""))))
       (:group-id nil)
       (:name "select-labels")
       (:x 767)
       (:y 243)
       (:w 115)
       (:h 28)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock nil)
       (:lambda nil)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "LINES")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LIST_ACTIVATION_LABELS")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 24))
      (:box
       (:type :function)
       (:reference mapcar)
       (:group-id nil)
       (:name "mapcar")
       (:x 753)
       (:y 294)
       (:w 78)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "FUNCTION")
         (:value box)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LIST")
         (:value name)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 25))
      (:box
       (:type :value)
       (:reference symbol)
       (:group-id nil)
       (:name "value box")
       (:x 416)
       (:y 277)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value t)
       (:id 26))
      (:box
       (:type :special)
       (:reference loop-list)
       (:group-id nil)
       (:name "list-loop")
       (:x 213)
       (:y 54)
       (:w 65)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "list")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "i") (:reactive nil)))
       (:id 27))
      (:box
       (:type :special)
       (:reference loop-for)
       (:group-id nil)
       (:name "for")
       (:x 508)
       (:y 92)
       (:w 40)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "from")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "to")
         (:value 10)
         (:reactive nil)))
       (:outputs (:output (:name "i") (:reactive nil)))
       (:id 28)))
     (:connections
      (:connection (:from (:box 0 :out 0)) (:to (:box 27 :in 0)))
      (:connection (:from (:box 0 :out 0)) (:to (:box 17 :in 0)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 24 :in 1)))
      (:connection
       (:from (:box 5 :out 0))
       (:to (:box 9 :in 2))
       (:attributes (:color nil :style nil :modif (0 1/3))))
      (:connection (:from (:box 6 :out 0)) (:to (:box 25 :in 0)))
      (:connection
       (:from (:box 7 :out 1))
       (:to (:box 12 :in 0))
       (:attributes (:color nil :style nil :modif (0 11/92))))
      (:connection
       (:from (:box 7 :out 1))
       (:to (:box 15 :in 0))
       (:attributes (:color nil :style nil :modif (0 11/94))))
      (:connection (:from (:box 7 :out 1)) (:to (:box 24 :in 0)))
      (:connection (:from (:box 8 :out 0)) (:to (:box 14 :in 0)))
      (:connection (:from (:box 9 :out 0)) (:to (:box 8 :in 0)))
      (:connection (:from (:box 10 :out 0)) (:to (:box 9 :in 1)))
      (:connection (:from (:box 12 :out 0)) (:to (:box 8 :in 1)))
      (:connection (:from (:box 14 :out 0)) (:to (:box 13 :in 0)))
      (:connection (:from (:box 14 :out 1)) (:to (:box 1 :in 0)))
      (:connection (:from (:box 15 :out 0)) (:to (:box 20 :in 0)))
      (:connection (:from (:box 16 :out 0)) (:to (:box 13 :in 1)))
      (:connection (:from (:box 16 :out 1)) (:to (:box 22 :in 0)))
      (:connection (:from (:box 17 :out 0)) (:to (:box 28 :in 1)))
      (:connection (:from (:box 18 :out 0)) (:to (:box 28 :in 0)))
      (:connection (:from (:box 20 :out 0)) (:to (:box 16 :in 0)))
      (:connection (:from (:box 20 :out 1)) (:to (:box 21 :in 0)))
      (:connection (:from (:box 21 :out 0)) (:to (:box 13 :in 2)))
      (:connection (:from (:box 21 :out 1)) (:to (:box 23 :in 0)))
      (:connection (:from (:box 22 :out 0)) (:to (:box 2 :in 0)))
      (:connection (:from (:box 23 :out 0)) (:to (:box 4 :in 0)))
      (:connection (:from (:box 24 :out 0)) (:to (:box 25 :in 1)))
      (:connection (:from (:box 25 :out 0)) (:to (:box 12 :in 1)))
      (:connection (:from (:box 25 :out 0)) (:to (:box 15 :in 2)))
      (:connection (:from (:box 26 :out 0)) (:to (:box 8 :in 2)))
      (:connection (:from (:box 27 :out 0)) (:to (:box 7 :in 0)))
      (:connection (:from (:box 27 :out 0)) (:to (:box 10 :in 0)))
      (:connection (:from (:box 27 :out 0)) (:to (:box 9 :in 0)))
      (:connection (:from (:box 28 :out 0)) (:to (:box 15 :in 1))))))
   (:group-id nil)
   (:name "loop-process-dataset")
   (:x 859)
   (:y 472)
   (:w 150)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "lab_files")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "list_activation_labels")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "extension_audio_files")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "function_process_label")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "sound") (:reactive nil))
    (:output (:name "mem") (:reactive nil))
    (:output (:name "labels") (:reactive nil)))
   (:id 35))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 973)
   (:y 425)
   (:w 48)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.030046656727790833D0
       0.24989540874958038D0
       0.4119427800178528D0
       0.5019608))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "wav")
   (:id 36))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 1133)
   (:y 442)
   (:w 53)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 37))
  (:box
   (:type :function)
   (:reference (:symbol "OM-DIRECTORY" "OM-API"))
   (:group-id nil)
   (:name "om-directory")
   (:x 2134/5)
   (:y 399)
   (:w 105)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "PATH")
     (:value nil)
     (:reactive nil))
    (:input (:type :key) (:name "type") (:value nil) (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 38))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 2714/5)
   (:y 378)
   (:w 100)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.030046656727790833D0
       0.24989540874958038D0
       0.4119427800178528D0
       0.5019608))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "seg_desc")
   (:id 39))
  (:box
   (:type :abstraction)
   (:reference
    (:textfun
     (:name "make-local-dyci2-path")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size nil) (:position nil))
     (:text
      (:list
       ";;; Edit a valid LAMBDA EXPRESSION"
       ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
       "(lambda (folder corpus_subfolder) "
       "  (namestring "
       "   (merge-pathnames "
       "    (string+ folder \"Corpus/\" corpus_subfolder \"/\") "
       "    ;(om::om-user-home)"
       "    )))"
       "  "))))
   (:group-id nil)
   (:name "make-local-dyci2-path")
   (:x 1874/5)
   (:y 369)
   (:w 155)
   (:h 28)
   (:color (:color-or-nil (:color nil) (:t-or-nil nil)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "FOLDER")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "CORPUS_SUBFOLDER")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 40))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "loop-process-dataset")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size nil) (:position nil))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "lab_files") (:doc "")))
       (:group-id nil)
       (:name "lab_files")
       (:x 212)
       (:y 2)
       (:w 66)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :optional)
         (:name "internal input value")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "sound") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "sound")
       (:x 229)
       (:y 509)
       (:w 68)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 1))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "mem") (:index 2) (:doc "")))
       (:group-id nil)
       (:name "mem")
       (:x 489)
       (:y 512)
       (:w 49)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 2))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 2)
         (:name "list_activation_labels")
         (:doc "")))
       (:group-id nil)
       (:name "list_activation_labels")
       (:x 545)
       (:y 6)
       (:w 141)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :optional)
         (:name "internal input value")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "labels") (:index 3) (:doc "")))
       (:group-id nil)
       (:name "labels")
       (:x 594)
       (:y 507)
       (:w 53)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 4))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 3)
         (:name "extension_audio_files")
         (:doc "")))
       (:group-id nil)
       (:name "extension_audio_files")
       (:x 717)
       (:y 2)
       (:w 147)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :optional)
         (:name "internal input value")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 4)
         (:name "function_process_label")
         (:doc "")))
       (:group-id nil)
       (:name "function_process_label")
       (:x 956)
       (:y 38)
       (:w 155)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :optional)
         (:name "internal input value")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 6))
      (:box
       (:type :object)
       (:reference textbuffer)
       (:group-id nil)
       (:name "TEXTBUFFER")
       (:x 284)
       (:y 115)
       (:w 148)
       (:h 82)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font
        (:font (:face "Calibri") (:size 12) (:style :italic)))
       (:align :center)
       (:display :mini-view)
       (:showname t)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "CONTENTS")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "SELF") (:reactive nil))
        (:output (:name "CONTENTS") (:reactive nil)))
       (:window (:size nil) (:position nil))
       (:edition-params (:read-mode :lines-cols))
       (:value
        (:object
         (:class textbuffer)
         (:slots ((:contents nil)))
         (:add-slots ((:input-mode :lines-cols)))))
       (:id 7))
      (:box
       (:type :object)
       (:reference sound)
       (:group-id nil)
       (:name nil)
       (:x 113)
       (:y 320)
       (:w 297)
       (:h 56)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font
        (:font (:face "Calibri") (:size 12) (:style :italic)))
       (:align :center)
       (:display :hidden)
       (:showname nil)
       (:show-markers t)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value :choose-file)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "markers")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "access-from-file")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "file-pathname")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "sample-rate")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "n-channels")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "n-samples")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "SELF") (:reactive nil))
        (:output (:name "markers") (:reactive nil))
        (:output (:name "access-from-file") (:reactive nil))
        (:output (:name "file-pathname") (:reactive nil))
        (:output (:name "sample-rate") (:reactive nil))
        (:output (:name "n-channels") (:reactive nil))
        (:output (:name "n-samples") (:reactive nil)))
       (:window (:size nil) (:position nil))
       (:edition-params)
       (:value
        (:object
         (:class sound)
         (:slots
          ((:onset 0)
           (:duration 0)
           (:n-samples nil)
           (:n-channels nil)
           (:sample-rate nil)
           (:smpl-type :float)
           (:sample-size 16)))
         (:add-slots
          ((:markers nil)
           (:gain 1.0)
           (:access-from-file nil)
           (:file-pathname nil)))))
       (:id 8))
      (:box
       (:type :function)
       (:reference (:symbol "OM-MAKE-PATHNAME" "OM-API"))
       (:group-id nil)
       (:name "om-make-pathname")
       (:x 91)
       (:y 205)
       (:w 145)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :key)
         (:name "directory")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "name")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "type")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 9))
      (:box
       (:type :function)
       (:reference pathname-name)
       (:group-id nil)
       (:name "pathname-name")
       (:x 97)
       (:y 119)
       (:w 125)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "P")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 10))
      (:comment
       (:x 21)
       (:y 324)
       (:w 63)
       (:h 50)
       (:fgcolor nil)
       (:bgcolor nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:text "le même nom mais en .wav")
       (:id 11))
      (:box
       (:type :abstraction)
       (:reference
        (:textfun
         (:name "make-markers")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size nil) (:position nil))
         (:text
          (:list
           ";;; Edit a valid LAMBDA EXPRESSION"
           ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
           "(lambda (lines processed_labels)"
           "  (loop for i from 0 to (- (length lines) 1)"
           "        collect"
           "         (list"
           "          (sec->ms (first (nth i lines)))"
           "          ;(first (nth i lines))"
           "          (write-to-string (nth i processed_labels))"
           "          )         "
           "         )"
           "  )"
           ""
           ";(lambda (lines list_activation_labels)"
           ";  (loop for line in lines collect"
           ";        (list"
           ";         (sec->ms (first line))"
           ";         (number-to-string (round (fourth line)))"
           ";         )"
           ";        ))"))))
       (:group-id nil)
       (:name "make-markers")
       (:x 200)
       (:y 267)
       (:w 115)
       (:h 28)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock nil)
       (:lambda nil)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "LINES")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "PROCESSED_LABELS")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 12))
      (:box
       (:type :special)
       (:reference iterate)
       (:group-id nil)
       (:name "iterate")
       (:x 357)
       (:y 461)
       (:w 57)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "action")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "action")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "action")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 13))
      (:box
       (:type :special)
       (:reference collect)
       (:group-id nil)
       (:name "collect")
       (:x 235)
       (:y 400)
       (:w 57)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "push")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 14))
      (:box
       (:type :abstraction)
       (:reference
        (:textfun
         (:name "make-memory")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size nil) (:position nil))
         (:text
          (:list
           ";;; Edit a valid LAMBDA EXPRESSION"
           ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
           "(lambda (lines n processed_labels) "
           "  (loop for line in lines "
           "        collect (write-to-string (list n (sec->ms (first line)) (sec->ms (second line))))"
           "        ;collect (write-to-string (list n (first line) (second line)))"
           "        into mem-segments"
           "        finally return (list mem-segments processed_labels))"
           ")"
           "                                 "
           "#|"
           "(lambda (lines n  list_activation_labels) "
           "  (loop for line in lines "
           "        collect (write-to-string (list n (sec->ms (first line)) (sec->ms (second line))))"
           "        into mem-segments"
           "        ;collect (write-to-string (round (/ (fourth line) div_intens)))"
           "        ;collect (write-to-string (list (round (/ (fourth line) div_intens))))"
           "        collect (write-to-string"
           "                 (list "
           "                 ; duree"
           "                  (if (> div_dur 0) (round (/ (- (sec->ms (second line)) (sec->ms (first line))) div_dur)) -1)"
           "                 ;pitch"
           "                  (if (= mod_12 1) "
           "                      (if (= (round (third line)) 0) -1 (mod (round (third line))12))"
           "                    (if (< mod_12 0) -1 (round (third line)))"
           "                    )"
           "                 ;inten"
           "                  (if (> div_intens 0) (round (/ (fourth line) div_intens)) -1)"
           "                 ;voice casting"
           "                  (if (> vc 0) (round (/ (fifth line) vc)) -1)"
           "                 ;nmf"
           "                  (if (> nmf 0) (round (/ (sixth line) nmf)) -1)"
           "                 ))"
           "        into labels"
           "        finally return (list mem-segments labels)))"
           "|#"
           "                                 "))))
       (:group-id nil)
       (:name "make-memory")
       (:x 461)
       (:y 281)
       (:w 200)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock nil)
       (:lambda nil)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "LINES")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "N")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "PROCESSED_LABELS")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 15))
      (:box
       (:type :special)
       (:reference collect)
       (:group-id nil)
       (:name "collect")
       (:x 485)
       (:y 387)
       (:w 57)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "push")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 16))
      (:box
       (:type :function)
       (:reference length)
       (:group-id nil)
       (:name "length")
       (:x 375)
       (:y 51)
       (:w 71)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SEQUENCE")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 17))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 502)
       (:y 57)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 1)
       (:id 18))
      (:comment
       (:x 556)
       (:y 102)
       (:w 47)
       (:h 22)
       (:fgcolor nil)
       (:bgcolor nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:text "#sound")
       (:id 19))
      (:box
       (:type :function)
       (:reference split)
       (:group-id nil)
       (:name "split")
       (:x 554)
       (:y 335)
       (:w 59)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "out") (:reactive nil))
        (:output (:name "out1") (:reactive nil)))
       (:id 20))
      (:box
       (:type :special)
       (:reference collect)
       (:group-id nil)
       (:name "collect")
       (:x 592)
       (:y 388)
       (:w 57)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "push")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 21))
      (:box
       (:type :function)
       (:reference flat)
       (:group-id nil)
       (:name "flat")
       (:x 486)
       (:y 468)
       (:w 54)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 22))
      (:box
       (:type :function)
       (:reference flat)
       (:group-id nil)
       (:name "flat")
       (:x 593)
       (:y 462)
       (:w 54)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 23))
      (:box
       (:type :abstraction)
       (:reference
        (:textfun
         (:name "select-labels")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size nil) (:position nil))
         (:text
          (:list
           ";;; Edit a valid LAMBDA EXPRESSION"
           ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
           "(lambda (lines list_activation_labels)"
           "  (loop for line in lines "
           "        collect (append "
           "                 ;(list (if (> (nth 0 list_activation_labels) 0) (round (/ (- (sec->ms (second line)) (sec->ms (first line))) (nth 0 list_activation_labels))) -1))"
           "                 ;(list (if (> (nth 0 list_activation_labels) 0) (- (sec->ms (second line)) (sec->ms (first line)))  -1))"
           "                 (list (- (sec->ms (second line)) (sec->ms (first line))))"
           "                 ;(list (- (second line) (first line)))"
           "                 (loop for i from 1 to (- (length list_activation_labels) 1)"
           "                       ;collect (if (> (nth i list_activation_labels) 0) (nth (+ i 1) line) -1)"
           "                       collect (nth (+ i 1) line)"
           "                       )"
           "                 )"
           "        into labels"
           "        finally return labels"
           "        )"
           "  )"
           ""))))
       (:group-id nil)
       (:name "select-labels")
       (:x 767)
       (:y 243)
       (:w 115)
       (:h 28)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock nil)
       (:lambda nil)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "LINES")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LIST_ACTIVATION_LABELS")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 24))
      (:box
       (:type :function)
       (:reference mapcar)
       (:group-id nil)
       (:name "mapcar")
       (:x 753)
       (:y 294)
       (:w 78)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "FUNCTION")
         (:value box)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LIST")
         (:value name)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 25))
      (:box
       (:type :value)
       (:reference symbol)
       (:group-id nil)
       (:name "value box")
       (:x 279)
       (:y 288)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value t)
       (:id 26))
      (:box
       (:type :special)
       (:reference loop-list)
       (:group-id nil)
       (:name "list-loop")
       (:x 213)
       (:y 54)
       (:w 65)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "list")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "i") (:reactive nil)))
       (:id 27))
      (:box
       (:type :special)
       (:reference loop-for)
       (:group-id nil)
       (:name "for")
       (:x 508)
       (:y 92)
       (:w 40)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "from")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "to")
         (:value 10)
         (:reactive nil)))
       (:outputs (:output (:name "i") (:reactive nil)))
       (:id 28)))
     (:connections
      (:connection (:from (:box 0 :out 0)) (:to (:box 27 :in 0)))
      (:connection (:from (:box 0 :out 0)) (:to (:box 17 :in 0)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 24 :in 1)))
      (:connection
       (:from (:box 5 :out 0))
       (:to (:box 9 :in 2))
       (:attributes (:color nil :style nil :modif (0 1/3))))
      (:connection (:from (:box 6 :out 0)) (:to (:box 25 :in 0)))
      (:connection
       (:from (:box 7 :out 1))
       (:to (:box 12 :in 0))
       (:attributes (:color nil :style nil :modif (0 11/92))))
      (:connection
       (:from (:box 7 :out 1))
       (:to (:box 15 :in 0))
       (:attributes (:color nil :style nil :modif (0 11/94))))
      (:connection (:from (:box 7 :out 1)) (:to (:box 24 :in 0)))
      (:connection (:from (:box 8 :out 0)) (:to (:box 14 :in 0)))
      (:connection (:from (:box 9 :out 0)) (:to (:box 8 :in 0)))
      (:connection (:from (:box 10 :out 0)) (:to (:box 9 :in 1)))
      (:connection (:from (:box 12 :out 0)) (:to (:box 8 :in 1)))
      (:connection (:from (:box 14 :out 0)) (:to (:box 13 :in 0)))
      (:connection (:from (:box 14 :out 1)) (:to (:box 1 :in 0)))
      (:connection (:from (:box 15 :out 0)) (:to (:box 20 :in 0)))
      (:connection (:from (:box 16 :out 0)) (:to (:box 13 :in 1)))
      (:connection (:from (:box 16 :out 1)) (:to (:box 22 :in 0)))
      (:connection (:from (:box 17 :out 0)) (:to (:box 28 :in 1)))
      (:connection (:from (:box 18 :out 0)) (:to (:box 28 :in 0)))
      (:connection (:from (:box 20 :out 0)) (:to (:box 16 :in 0)))
      (:connection (:from (:box 20 :out 1)) (:to (:box 21 :in 0)))
      (:connection (:from (:box 21 :out 0)) (:to (:box 13 :in 2)))
      (:connection (:from (:box 21 :out 1)) (:to (:box 23 :in 0)))
      (:connection (:from (:box 22 :out 0)) (:to (:box 2 :in 0)))
      (:connection (:from (:box 23 :out 0)) (:to (:box 4 :in 0)))
      (:connection (:from (:box 24 :out 0)) (:to (:box 25 :in 1)))
      (:connection (:from (:box 25 :out 0)) (:to (:box 12 :in 1)))
      (:connection (:from (:box 25 :out 0)) (:to (:box 15 :in 2)))
      (:connection (:from (:box 26 :out 0)) (:to (:box 8 :in 2)))
      (:connection (:from (:box 27 :out 0)) (:to (:box 7 :in 0)))
      (:connection (:from (:box 27 :out 0)) (:to (:box 10 :in 0)))
      (:connection (:from (:box 27 :out 0)) (:to (:box 9 :in 0)))
      (:connection (:from (:box 28 :out 0)) (:to (:box 15 :in 1))))))
   (:group-id nil)
   (:name "loop-process-dataset")
   (:x 2264/5)
   (:y 455)
   (:w 150)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "lab_files")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "list_activation_labels")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "extension_audio_files")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "function_process_label")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "sound") (:reactive nil))
    (:output (:name "mem") (:reactive nil))
    (:output (:name "labels") (:reactive nil)))
   (:id 41))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 2714/5)
   (:y 414)
   (:w 48)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.030046656727790833D0
       0.24989540874958038D0
       0.4119427800178528D0
       0.5019608))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "wav")
   (:id 42))
  (:box
   (:type :function)
   (:reference file-namestring)
   (:group-id nil)
   (:name "file-namestring")
   (:x 1280)
   (:y 704)
   (:w 117)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "P")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 43))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 650)
   (:y 735)
   (:w 53)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 44))
  (:box
   (:type :value)
   (:reference symbol)
   (:group-id nil)
   (:name "value box")
   (:x 1351)
   (:y 795)
   (:w 53)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.8902462720870972D0
       0.6694902181625366D0
       0.2833995819091797D0
       0.53333337))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value t)
   (:id 45))
  (:box
   (:type :special)
   (:reference iterate)
   (:group-id nil)
   (:name "iterate")
   (:x 1757)
   (:y 288)
   (:w 60)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.85 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:inputs
    (:input
     (:type :standard)
     (:name "action")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "action")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "action")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "action")
     (:value nil)
     (:reactive nil)))
   (:outputs)
   (:id 46))
  (:box
   (:type :special)
   (:reference collect)
   (:group-id nil)
   (:name "collect")
   (:x 934)
   (:y 831)
   (:w 56)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.7 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:inputs
    (:input
     (:type :standard)
     (:name "data-in")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "push")
     (:value t)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "init")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "collect") (:reactive nil))
    (:output (:name "data-out") (:reactive t))
    (:output (:name "init") (:reactive nil)))
   (:id 47))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "remove-scenario-file-from-memory")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (1018 356)) (:position (-1242 177)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 1)
         (:name "mem-directory")
         (:doc "")))
       (:group-id nil)
       (:name "mem-directory")
       (:x 56)
       (:y 40)
       (:w 99)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 2)
         (:name "scenario-file")
         (:doc "")))
       (:group-id nil)
       (:name "scenario-file")
       (:x 731)
       (:y 86)
       (:w 87)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 1))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "mem-corpus") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "mem-corpus")
       (:x 97)
       (:y 201)
       (:w 89)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 2))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 3)
         (:name "remove-scen-file-from-memory")
         (:doc "")))
       (:group-id nil)
       (:name "remove-scen-file-from-memory")
       (:x 158)
       (:y 34)
       (:w 186)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 4) (:name "root_dir") (:doc "")))
       (:group-id nil)
       (:name "root_dir")
       (:x 571)
       (:y 77)
       (:w 87)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 4))
      (:box
       (:type :abstraction)
       (:reference
        (:textfun
         (:name "remove-scen-file")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size (500 500)) (:position (-529 112)))
         (:text
          (:list
           ";;; Edit a valid LAMBDA EXPRESSION"
           ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
           "(lambda (scenario-file memory-directory remove-scen-file) "
           "  (if remove-scen-file"
           "      (remove scenario-file memory-directory :test (lambda (x y) (string-equal (namestring x) (namestring y))))"
           "    memory-directory) "
           "  )"
           ""))))
       (:group-id nil)
       (:name "remove-scen-file")
       (:x 50)
       (:y 100)
       (:w 127)
       (:h 28)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock nil)
       (:lambda nil)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "SCENARIO-FILE")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "MEMORY-DIRECTORY")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "REMOVE-SCEN-FILE")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5))
      (:box
       (:type :function)
       (:reference (:symbol "OM-MAKE-PATHNAME" "OM-API"))
       (:group-id nil)
       (:name "om-make-pathname")
       (:x 692)
       (:y 226)
       (:w 145)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock :eval-once)
       (:lambda nil)
       (:inputs
        (:input
         (:type :key)
         (:name "directory")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "name")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "type")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 6))
      (:box
       (:type :function)
       (:reference pathname-name)
       (:group-id nil)
       (:name "pathname-name")
       (:x 669)
       (:y 173)
       (:w 125)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "P")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 7))
      (:box
       (:type :function)
       (:reference pathname-type)
       (:group-id nil)
       (:name "pathname-type")
       (:x 800)
       (:y 172)
       (:w 118)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "P")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 8)))
     (:connections
      (:connection
       (:from (:box 0 :out 0))
       (:to (:box 5 :in 1))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style :curved :modif nil)))
      (:connection
       (:from (:box 1 :out 0))
       (:to (:box 7 :in 0))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style :curved :modif nil)))
      (:connection (:from (:box 1 :out 0)) (:to (:box 8 :in 0)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 5 :in 2)))
      (:connection (:from (:box 4 :out 0)) (:to (:box 6 :in 0)))
      (:connection
       (:from (:box 5 :out 0))
       (:to (:box 2 :in 0))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style :curved :modif nil)))
      (:connection (:from (:box 6 :out 0)) (:to (:box 5 :in 0)))
      (:connection (:from (:box 7 :out 0)) (:to (:box 6 :in 1)))
      (:connection (:from (:box 8 :out 0)) (:to (:box 6 :in 2))))))
   (:group-id nil)
   (:name "remove-scenario-file-from-memory")
   (:x 658)
   (:y 373)
   (:w 222)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "mem-directory")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "scenario-file")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "remove-scen-file-from-memory")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "root_dir")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "mem-corpus") (:reactive nil)))
   (:id 48))
  (:box
   (:type :value)
   (:reference symbol)
   (:group-id nil)
   (:name "value box")
   (:x 708)
   (:y 153)
   (:w 53)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.8902462720870972D0
       0.6694902181625366D0
       0.2833995819091797D0
       0.53333337))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value t)
   (:id 49))
  (:comment
   (:x 704)
   (:y 92)
   (:w 244)
   (:h 76)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Helvetica") (:size 14) (:style :bold)))
     (:t-or-nil t)))
   (:align nil)
   (:text
    "4b) Remove scenario file from memory of the second generator

")
   (:id 50))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name
      "loop_interpretations_variations_scenarios_remove_scen_sync")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (1583 798)) (:position (-1889 -713)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "SCENARIO") (:doc "")))
       (:group-id nil)
       (:name "SCENARIO")
       (:x 2)
       (:y 9)
       (:w 167)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "out") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "out")
       (:x 773)
       (:y 800)
       (:w 40)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 1))
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 2) (:name "LENGTH") (:doc "")))
       (:group-id nil)
       (:name "LENGTH")
       (:x 304)
       (:y 20)
       (:w 71)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 2))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 3)
         (:name "SCEN-MAX-CONT-LIST")
         (:doc "")))
       (:group-id nil)
       (:name "SCEN-MAX-CONT-LIST")
       (:x 150)
       (:y 11)
       (:w 153)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 4)
         (:name "VOICE-MAX-CONT-LIST")
         (:doc "")))
       (:group-id nil)
       (:name "VOICE-MAX-CONT-LIST")
       (:x 384)
       (:y 17)
       (:w 168)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 4))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 5)
         (:name "VOICE_GENERATOR_MASTER")
         (:doc "")))
       (:group-id nil)
       (:name "VOICE_GENERATOR_MASTER")
       (:x 561)
       (:y 59)
       (:w 199)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 6)
         (:name "SOUND_DB_MASTER")
         (:doc "")))
       (:group-id nil)
       (:name "SOUND_DB_MASTER")
       (:x 603)
       (:y 128)
       (:w 145)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 6))
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 7) (:name "XFADE") (:doc "")))
       (:group-id nil)
       (:name "XFADE")
       (:x 556)
       (:y 153)
       (:w 62)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 7))
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 8) (:name "RES_DIR") (:doc "")))
       (:group-id nil)
       (:name "RES_DIR")
       (:x 517)
       (:y 20)
       (:w 74)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 8))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 9)
         (:name "VOICE_GENERATOR_SLAVE")
         (:doc "")))
       (:group-id nil)
       (:name "VOICE_GENERATOR_SLAVE")
       (:x 824)
       (:y 55)
       (:w 187)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 9))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 10)
         (:name "SOUND_DB_SLAVE")
         (:doc "")))
       (:group-id nil)
       (:name "SOUND_DB_SLAVE")
       (:x 866)
       (:y 124)
       (:w 134)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 10))
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 11) (:name "Durations") (:doc "")))
       (:group-id nil)
       (:name "Durations")
       (:x 1091)
       (:y 41)
       (:w 167)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 11))
      (:box
       (:type :function)
       (:reference write-to-string)
       (:group-id nil)
       (:name "write-to-string")
       (:x 314)
       (:y 76)
       (:w 111)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "OBJECT")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 12))
      (:box
       (:type :function)
       (:reference list)
       (:group-id nil)
       (:name "list")
       (:x 344)
       (:y 112)
       (:w 53)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :optional)
         (:name "x")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 13))
      (:box
       (:type :function)
       (:reference car)
       (:group-id nil)
       (:name "car")
       (:x 440)
       (:y 128)
       (:w 55)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "X")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 14))
      (:box
       (:type :function)
       (:reference cdr)
       (:group-id nil)
       (:name "cdr")
       (:x 495)
       (:y 129)
       (:w 55)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "X")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 15))
      (:box
       (:type :function)
       (:reference list)
       (:group-id nil)
       (:name "list")
       (:x 442)
       (:y 160)
       (:w 53)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :optional)
         (:name "x")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 16))
      (:box
       (:type :function)
       (:reference cons)
       (:group-id nil)
       (:name "cons")
       (:x 687)
       (:y 610)
       (:w 63)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "CAR")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "CDR")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 17))
      (:box
       (:type :special)
       (:reference iterate)
       (:group-id nil)
       (:name "iterate")
       (:x 633)
       (:y 777)
       (:w 60)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "action")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "action")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "action")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "action")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 18))
      (:box
       (:type :special)
       (:reference collect)
       (:group-id nil)
       (:name "collect")
       (:x 644)
       (:y 705)
       (:w 56)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "push")
         (:value t)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 19))
      (:box
       (:type :function)
       (:reference flat)
       (:group-id nil)
       (:name "flat")
       (:x 766)
       (:y 763)
       (:w 54)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 20))
      (:box
       (:type :abstraction)
       (:reference
        (:patch
         (:name "generate_interpretations_of_scenario_sync_master")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size (1109 824)) (:position (-1726 -651)))
         (:grid nil)
         (:lock nil)
         (:boxes
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 1) (:name "len_scen") (:doc "")))
           (:group-id nil)
           (:name "len_scen")
           (:x 652)
           (:y 155)
           (:w 74)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 0))
          (:box
           (:type :io)
           (:reference
            (:out (:type omout) (:name "out") (:index 1) (:doc "")))
           (:group-id nil)
           (:name "out")
           (:x 38)
           (:y 753)
           (:w 68)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "out-value")
             (:value nil)
             (:reactive nil)))
           (:outputs)
           (:id 1))
          (:box
           (:type :io)
           (:reference
            (:in
             (:type omin)
             (:index 2)
             (:name "scen_max_cont")
             (:doc "")))
           (:group-id nil)
           (:name "scen_max_cont")
           (:x 736)
           (:y 159)
           (:w 127)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 2))
          (:box
           (:type :io)
           (:reference
            (:out
             (:type omout)
             (:name "list_dur_sync_master")
             (:index 2)
             (:doc "")))
           (:group-id nil)
           (:name "list_dur_sync_master")
           (:x 104)
           (:y 754)
           (:w 135)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "out-value")
             (:value nil)
             (:reactive nil)))
           (:outputs)
           (:id 3))
          (:box
           (:type :io)
           (:reference
            (:in
             (:type omin)
             (:index 3)
             (:name "voice_max_cont_list")
             (:doc "")))
           (:group-id nil)
           (:name "voice_max_cont_list")
           (:x 448)
           (:y 73)
           (:w 130)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 4))
          (:box
           (:type :io)
           (:reference
            (:in
             (:type omin)
             (:index 4)
             (:name "path_output_directory")
             (:doc "")))
           (:group-id nil)
           (:name "path_output_directory")
           (:x 817)
           (:y 260)
           (:w 148)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 5))
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 5) (:name "xfade") (:doc "")))
           (:group-id nil)
           (:name "xfade")
           (:x 272)
           (:y 292)
           (:w 51)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 6))
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 6) (:name "scenario") (:doc "")))
           (:group-id nil)
           (:name "scenario")
           (:x 298)
           (:y 167)
           (:w 81)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 7))
          (:box
           (:type :io)
           (:reference
            (:in
             (:type omin)
             (:index 7)
             (:name "voice_generator")
             (:doc "")))
           (:group-id nil)
           (:name "voice_generator")
           (:x 14)
           (:y 50)
           (:w 108)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 8))
          (:box
           (:type :io)
           (:reference
            (:in
             (:type omin)
             (:index 8)
             (:name "snd_database")
             (:doc "")))
           (:group-id nil)
           (:name "snd_database")
           (:x 5)
           (:y 304)
           (:w 104)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 9))
          (:box
           (:type :special)
           (:reference iterate)
           (:group-id nil)
           (:name "iterate")
           (:x 179)
           (:y 715)
           (:w 105)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.85 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "action")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "action")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "action")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "action")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "action")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "action")
             (:value nil)
             (:reactive nil)))
           (:outputs)
           (:id 10))
          (:box
           (:type :function)
           (:reference length)
           (:group-id nil)
           (:name "length")
           (:x 452)
           (:y 311)
           (:w 71)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock :eval-once)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "SEQUENCE")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 11))
          (:box
           (:type :function)
           (:reference make-list)
           (:group-id nil)
           (:name "make-list")
           (:x 757)
           (:y 349)
           (:w 86)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "SIZE")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :key)
             (:name "initial-element")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 12))
          (:box
           (:type :function)
           (:reference make-list)
           (:group-id nil)
           (:name "make-list")
           (:x 577)
           (:y 349)
           (:w 86)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "SIZE")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :key)
             (:name "initial-element")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 13))
          (:box
           (:type :function)
           (:reference make-list)
           (:group-id nil)
           (:name "make-list")
           (:x 665)
           (:y 349)
           (:w 86)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "SIZE")
             (:value 1)
             (:reactive nil))
            (:input
             (:type :key)
             (:name "initial-element")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 14))
          (:box
           (:type :function)
           (:reference format)
           (:group-id nil)
           (:name "format")
           (:x 573)
           (:y 278)
           (:w 125)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "DESTINATION")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "CONTROL-STRING")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "format-arguments")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "format-arguments")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 15))
          (:box
           (:type :value)
           (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
           (:group-id nil)
           (:name "value box")
           (:x 581)
           (:y 234)
           (:w 73)
           (:h 30)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value "[L~DC~D]")
           (:id 16))
          (:box
           (:type :function)
           (:reference (:symbol "OM-PRINT-FORMAT" "OM-LISP"))
           (:group-id nil)
           (:name "om-print-format")
           (:x 901)
           (:y 576)
           (:w 120)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "FORMAT-STRING")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "args")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "prompt")
             (:value "DYCI2")
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 17))
          (:box
           (:type :value)
           (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
           (:group-id nil)
           (:name "value box")
           (:x 843)
           (:y 504)
           (:w 102)
           (:h 30)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value "ITERATION #~D")
           (:id 18))
          (:box
           (:type :function)
           (:reference list)
           (:group-id nil)
           (:name "list")
           (:x 929)
           (:y 544)
           (:w 53)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :optional)
             (:name "x")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 19))
          (:box
           (:type :function)
           (:reference (:symbol "OM-PRINT-FORMAT" "OM-LISP"))
           (:group-id nil)
           (:name "om-print-format")
           (:x 313)
           (:y 588)
           (:w 120)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "FORMAT-STRING")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "args")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "prompt")
             (:value "DYCI2")
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 20))
          (:box
           (:type :value)
           (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
           (:group-id nil)
           (:name "value box")
           (:x 246)
           (:y 554)
           (:w 248)
           (:h 30)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value "FILTERED GENERATED SEQUENCE~A")
           (:id 21))
          (:box
           (:type :function)
           (:reference list)
           (:group-id nil)
           (:name "list")
           (:x 342)
           (:y 529)
           (:w 53)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :optional)
             (:name "x")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 22))
          (:box
           (:type :abstraction)
           (:reference
            (:patch-from-file
             (:pathname
              (:directory (:relative :up "abstractions"))
              (:device nil)
              (:host nil)
              (:name "path_generated_sequence")
              (:type "opat"))))
           (:group-id nil)
           (:name "path_generated_sequence")
           (:x 631)
           (:y 495)
           (:w 182)
           (:h 41)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:display :hidden)
           (:lock nil)
           (:lambda nil)
           (:pre-delay 0)
           (:inputs
            (:input
             (:type :standard)
             (:name "name_scen")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "len_scen")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "cont_scen")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "idtf_gen")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "cont_gen")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "path_output_directory")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "path") (:reactive nil)))
           (:id 23))
          (:box
           (:type :special)
           (:reference collect)
           (:group-id nil)
           (:name "collect")
           (:x 44)
           (:y 615)
           (:w 56)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.7 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "data-in")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "push")
             (:value t)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "init")
             (:value nil)
             (:reactive nil)))
           (:outputs
            (:output (:name "collect") (:reactive nil))
            (:output (:name "data-out") (:reactive nil))
            (:output (:name "init") (:reactive nil)))
           (:id 24))
          (:box
           (:type :abstraction)
           (:reference
            (:patch-from-file
             (:pathname
              (:directory (:relative :up "abstractions"))
              (:device nil)
              (:host nil)
              (:name "generate_sequence")
              (:type "opat"))))
           (:group-id nil)
           (:name "generate_sequence")
           (:x 39)
           (:y 139)
           (:w 153)
           (:h 52)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:display :hidden)
           (:lock :eval-once)
           (:lambda nil)
           (:pre-delay 0)
           (:inputs
            (:input
             (:type :standard)
             (:name "generator")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "max_continuity")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "scenario")
             (:value nil)
             (:reactive nil)))
           (:outputs
            (:output
             (:name "filtered_generated_sequence")
             (:reactive nil))
            (:output (:name "generated_sequence") (:reactive nil)))
           (:id 25))
          (:box
           (:type :function)
           (:reference (:symbol "OM-PRINT-FORMAT" "OM-LISP"))
           (:group-id nil)
           (:name "om-print-format")
           (:x 502)
           (:y 762)
           (:w 120)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "FORMAT-STRING")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "args")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "prompt")
             (:value "DYCI2")
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 26))
          (:box
           (:type :value)
           (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
           (:group-id nil)
           (:name "value box")
           (:x 435)
           (:y 728)
           (:w 248)
           (:h 30)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value "OUTPUT REMIX ~A")
           (:id 27))
          (:box
           (:type :function)
           (:reference list)
           (:group-id nil)
           (:name "list")
           (:x 531)
           (:y 703)
           (:w 53)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :optional)
             (:name "x")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 28))
          (:box
           (:type :abstraction)
           (:reference
            (:patch-from-file
             (:pathname
              (:directory (:relative :up "abstractions"))
              (:device nil)
              (:host nil)
              (:name "remix_supervp_master")
              (:type "opat"))))
           (:group-id nil)
           (:name "remix_supervp_master")
           (:x 38)
           (:y 409)
           (:w 160)
           (:h 60)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:display :hidden)
           (:lock nil)
           (:lambda nil)
           (:pre-delay 0)
           (:inputs
            (:input
             (:type :standard)
             (:name "SOUNDS")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "SEGMENTS")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "CROSSFADE")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "outfile")
             (:value nil)
             (:reactive nil)))
           (:outputs
            (:output (:name "out") (:reactive nil))
            (:output (:name "list_dur") (:reactive nil)))
           (:id 29))
          (:box
           (:type :special)
           (:reference collect)
           (:group-id nil)
           (:name "collect")
           (:x 110)
           (:y 616)
           (:w 56)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.7 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "data-in")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "push")
             (:value t)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "init")
             (:value nil)
             (:reactive nil)))
           (:outputs
            (:output (:name "collect") (:reactive nil))
            (:output (:name "data-out") (:reactive nil))
            (:output (:name "init") (:reactive nil)))
           (:id 30))
          (:box
           (:type :special)
           (:reference loop-for)
           (:group-id nil)
           (:name "for")
           (:x 896)
           (:y 410)
           (:w 50)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.85 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "from")
             (:value 1)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "to")
             (:value 3)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "by")
             (:value 1)
             (:reactive nil)))
           (:outputs (:output (:name "i") (:reactive nil)))
           (:id 31))
          (:box
           (:type :special)
           (:reference loop-list)
           (:group-id nil)
           (:name "list-loop")
           (:x 273)
           (:y 66)
           (:w 65)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.85 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "list")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "i") (:reactive nil)))
           (:id 32))
          (:box
           (:type :special)
           (:reference loop-list)
           (:group-id nil)
           (:name "list-loop")
           (:x 800)
           (:y 406)
           (:w 65)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.85 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "list")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "i") (:reactive nil)))
           (:id 33))
          (:box
           (:type :special)
           (:reference loop-list)
           (:group-id nil)
           (:name "list-loop")
           (:x 671)
           (:y 407)
           (:w 65)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.85 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "list")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "i") (:reactive nil)))
           (:id 34))
          (:box
           (:type :special)
           (:reference loop-list)
           (:group-id nil)
           (:name "list-loop")
           (:x 583)
           (:y 407)
           (:w 65)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.85 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "list")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "i") (:reactive nil)))
           (:id 35)))
         (:connections
          (:connection
           (:from (:box 0 :out 0))
           (:to (:box 14 :in 1))
           (:attributes (:color nil :style nil :modif (0 -131/495))))
          (:connection (:from (:box 0 :out 0)) (:to (:box 15 :in 2)))
          (:connection
           (:from (:box 2 :out 0))
           (:to (:box 12 :in 1))
           (:attributes (:color nil :style nil :modif (0 -131/496))))
          (:connection (:from (:box 2 :out 0)) (:to (:box 15 :in 3)))
          (:connection
           (:from (:box 4 :out 0))
           (:to (:box 11 :in 0))
           (:attributes (:color nil :style nil :modif (0 -3/41))))
          (:connection
           (:from (:box 4 :out 0))
           (:to (:box 32 :in 0))
           (:attributes (:color nil :style nil :modif (0 -11/60))))
          (:connection (:from (:box 5 :out 0)) (:to (:box 23 :in 5)))
          (:connection (:from (:box 6 :out 0)) (:to (:box 29 :in 2)))
          (:connection
           (:from (:box 7 :out 0))
           (:to (:box 25 :in 2))
           (:attributes
            (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
          (:connection
           (:from (:box 8 :out 0))
           (:to (:box 25 :in 0))
           (:attributes
            (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
          (:connection (:from (:box 9 :out 0)) (:to (:box 29 :in 0)))
          (:connection
           (:from (:box 11 :out 0))
           (:to (:box 31 :in 1))
           (:attributes
            (:color nil :style nil :modif (0 45973/277033))))
          (:connection
           (:from (:box 11 :out 0))
           (:to (:box 12 :in 0))
           (:attributes (:color nil :style nil :modif (0 190/429))))
          (:connection
           (:from (:box 11 :out 0))
           (:to (:box 13 :in 0))
           (:attributes
            (:color nil :style nil :modif (0 26489/59345))))
          (:connection
           (:from (:box 11 :out 0))
           (:to (:box 14 :in 0))
           (:attributes (:color nil :style nil :modif (0 0.445338))))
          (:connection (:from (:box 12 :out 0)) (:to (:box 33 :in 0)))
          (:connection (:from (:box 13 :out 0)) (:to (:box 35 :in 0)))
          (:connection (:from (:box 14 :out 0)) (:to (:box 34 :in 0)))
          (:connection (:from (:box 15 :out 0)) (:to (:box 13 :in 1)))
          (:connection (:from (:box 16 :out 0)) (:to (:box 15 :in 1)))
          (:connection (:from (:box 17 :out 0)) (:to (:box 10 :in 0)))
          (:connection (:from (:box 18 :out 0)) (:to (:box 17 :in 0)))
          (:connection (:from (:box 19 :out 0)) (:to (:box 17 :in 1)))
          (:connection (:from (:box 20 :out 0)) (:to (:box 10 :in 3)))
          (:connection (:from (:box 21 :out 0)) (:to (:box 20 :in 0)))
          (:connection (:from (:box 22 :out 0)) (:to (:box 20 :in 1)))
          (:connection (:from (:box 23 :out 0)) (:to (:box 29 :in 3)))
          (:connection (:from (:box 24 :out 0)) (:to (:box 10 :in 1)))
          (:connection (:from (:box 24 :out 1)) (:to (:box 1 :in 0)))
          (:connection
           (:from (:box 25 :out 0))
           (:to (:box 22 :in 0))
           (:attributes
            (:color
             (:color 0.2 0.4 0.5 1.0)
             :style
             nil
             :modif
             (0 -43/289))))
          (:connection (:from (:box 25 :out 0)) (:to (:box 29 :in 1)))
          (:connection (:from (:box 26 :out 0)) (:to (:box 10 :in 2)))
          (:connection (:from (:box 27 :out 0)) (:to (:box 26 :in 0)))
          (:connection (:from (:box 28 :out 0)) (:to (:box 26 :in 1)))
          (:connection (:from (:box 29 :out 0)) (:to (:box 24 :in 0)))
          (:connection (:from (:box 29 :out 1)) (:to (:box 30 :in 0)))
          (:connection (:from (:box 30 :out 0)) (:to (:box 10 :in 4)))
          (:connection (:from (:box 30 :out 1)) (:to (:box 3 :in 0)))
          (:connection (:from (:box 31 :out 0)) (:to (:box 19 :in 0)))
          (:connection (:from (:box 31 :out 0)) (:to (:box 23 :in 3)))
          (:connection (:from (:box 32 :out 0)) (:to (:box 23 :in 4)))
          (:connection
           (:from (:box 32 :out 0))
           (:to (:box 25 :in 1))
           (:attributes
            (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
          (:connection (:from (:box 33 :out 0)) (:to (:box 23 :in 2)))
          (:connection (:from (:box 34 :out 0)) (:to (:box 23 :in 1)))
          (:connection
           (:from (:box 35 :out 0))
           (:to (:box 23 :in 0))))))
       (:group-id nil)
       (:name "generate_interpretations_of_scenario_sync_master")
       (:x 340)
       (:y 485)
       (:w 311)
       (:h 62)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock nil)
       (:lambda nil)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "len_scen")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "scen_max_cont")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "voice_max_cont_list")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "path_output_directory")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "xfade")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "scenario")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "voice_generator")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "snd_database")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "out") (:reactive nil))
        (:output (:name "list_dur_sync_master") (:reactive nil)))
       (:id 21))
      (:box
       (:type :abstraction)
       (:reference
        (:patch
         (:name "generate_interpretations_of_scenario_sync_slave")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size (1202 1005)) (:position (-1459 -713)))
         (:grid nil)
         (:lock nil)
         (:boxes
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 1) (:name "len_scen") (:doc "")))
           (:group-id nil)
           (:name "len_scen")
           (:x 652)
           (:y 155)
           (:w 74)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 0))
          (:box
           (:type :io)
           (:reference
            (:out (:type omout) (:name "out") (:index 1) (:doc "")))
           (:group-id nil)
           (:name "out")
           (:x 38)
           (:y 753)
           (:w 68)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "out-value")
             (:value nil)
             (:reactive nil)))
           (:outputs)
           (:id 1))
          (:box
           (:type :io)
           (:reference
            (:in
             (:type omin)
             (:index 2)
             (:name "scen_max_cont")
             (:doc "")))
           (:group-id nil)
           (:name "scen_max_cont")
           (:x 736)
           (:y 159)
           (:w 127)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 2))
          (:box
           (:type :io)
           (:reference
            (:in
             (:type omin)
             (:index 3)
             (:name "voice_max_cont_list")
             (:doc "")))
           (:group-id nil)
           (:name "voice_max_cont_list")
           (:x 448)
           (:y 73)
           (:w 130)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 3))
          (:box
           (:type :io)
           (:reference
            (:in
             (:type omin)
             (:index 4)
             (:name "path_output_directory")
             (:doc "")))
           (:group-id nil)
           (:name "path_output_directory")
           (:x 817)
           (:y 260)
           (:w 148)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 4))
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 5) (:name "xfade") (:doc "")))
           (:group-id nil)
           (:name "xfade")
           (:x 272)
           (:y 292)
           (:w 51)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 5))
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 6) (:name "scenario") (:doc "")))
           (:group-id nil)
           (:name "scenario")
           (:x 298)
           (:y 167)
           (:w 81)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 6))
          (:box
           (:type :io)
           (:reference
            (:in
             (:type omin)
             (:index 7)
             (:name "voice_generator")
             (:doc "")))
           (:group-id nil)
           (:name "voice_generator")
           (:x 14)
           (:y 50)
           (:w 108)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 7))
          (:box
           (:type :io)
           (:reference
            (:in
             (:type omin)
             (:index 8)
             (:name "snd_database")
             (:doc "")))
           (:group-id nil)
           (:name "snd_database")
           (:x 5)
           (:y 304)
           (:w 104)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 8))
          (:box
           (:type :io)
           (:reference
            (:in
             (:type omin)
             (:index 9)
             (:name "slave_list_dur_sync")
             (:doc "")))
           (:group-id nil)
           (:name "slave_list_dur_sync")
           (:x 817)
           (:y 47)
           (:w 127)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 0.0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 9))
          (:box
           (:type :special)
           (:reference iterate)
           (:group-id nil)
           (:name "iterate")
           (:x 179)
           (:y 715)
           (:w 105)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.85 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "action")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "action")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "action")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "action")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "action")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "action")
             (:value nil)
             (:reactive nil)))
           (:outputs)
           (:id 10))
          (:box
           (:type :function)
           (:reference length)
           (:group-id nil)
           (:name "length")
           (:x 452)
           (:y 311)
           (:w 71)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock :eval-once)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "SEQUENCE")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 11))
          (:box
           (:type :function)
           (:reference make-list)
           (:group-id nil)
           (:name "make-list")
           (:x 757)
           (:y 349)
           (:w 86)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "SIZE")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :key)
             (:name "initial-element")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 12))
          (:box
           (:type :function)
           (:reference make-list)
           (:group-id nil)
           (:name "make-list")
           (:x 577)
           (:y 349)
           (:w 86)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "SIZE")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :key)
             (:name "initial-element")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 13))
          (:box
           (:type :function)
           (:reference make-list)
           (:group-id nil)
           (:name "make-list")
           (:x 665)
           (:y 349)
           (:w 86)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "SIZE")
             (:value 1)
             (:reactive nil))
            (:input
             (:type :key)
             (:name "initial-element")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 14))
          (:box
           (:type :function)
           (:reference format)
           (:group-id nil)
           (:name "format")
           (:x 573)
           (:y 278)
           (:w 125)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "DESTINATION")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "CONTROL-STRING")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "format-arguments")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "format-arguments")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 15))
          (:box
           (:type :value)
           (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
           (:group-id nil)
           (:name "value box")
           (:x 581)
           (:y 234)
           (:w 73)
           (:h 30)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value "[L~DC~D]")
           (:id 16))
          (:box
           (:type :function)
           (:reference (:symbol "OM-PRINT-FORMAT" "OM-LISP"))
           (:group-id nil)
           (:name "om-print-format")
           (:x 901)
           (:y 576)
           (:w 120)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "FORMAT-STRING")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "args")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "prompt")
             (:value "DYCI2")
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 17))
          (:box
           (:type :value)
           (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
           (:group-id nil)
           (:name "value box")
           (:x 843)
           (:y 504)
           (:w 102)
           (:h 30)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value "ITERATION #~D")
           (:id 18))
          (:box
           (:type :function)
           (:reference list)
           (:group-id nil)
           (:name "list")
           (:x 929)
           (:y 544)
           (:w 53)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :optional)
             (:name "x")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 19))
          (:box
           (:type :function)
           (:reference (:symbol "OM-PRINT-FORMAT" "OM-LISP"))
           (:group-id nil)
           (:name "om-print-format")
           (:x 313)
           (:y 588)
           (:w 120)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "FORMAT-STRING")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "args")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "prompt")
             (:value "DYCI2")
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 20))
          (:box
           (:type :value)
           (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
           (:group-id nil)
           (:name "value box")
           (:x 246)
           (:y 554)
           (:w 248)
           (:h 30)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value "FILTERED GENERATED SEQUENCE~A")
           (:id 21))
          (:box
           (:type :function)
           (:reference list)
           (:group-id nil)
           (:name "list")
           (:x 342)
           (:y 529)
           (:w 53)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :optional)
             (:name "x")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 22))
          (:box
           (:type :abstraction)
           (:reference
            (:patch-from-file
             (:pathname
              (:directory (:relative :up "abstractions"))
              (:device nil)
              (:host nil)
              (:name "path_generated_sequence")
              (:type "opat"))))
           (:group-id nil)
           (:name "path_generated_sequence")
           (:x 631)
           (:y 495)
           (:w 182)
           (:h 41)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:display :hidden)
           (:lock nil)
           (:lambda nil)
           (:pre-delay 0)
           (:inputs
            (:input
             (:type :standard)
             (:name "name_scen")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "len_scen")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "cont_scen")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "idtf_gen")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "cont_gen")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "path_output_directory")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "path") (:reactive nil)))
           (:id 23))
          (:box
           (:type :special)
           (:reference collect)
           (:group-id nil)
           (:name "collect")
           (:x 44)
           (:y 615)
           (:w 56)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.7 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "data-in")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "push")
             (:value t)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "init")
             (:value nil)
             (:reactive nil)))
           (:outputs
            (:output (:name "collect") (:reactive nil))
            (:output (:name "data-out") (:reactive nil))
            (:output (:name "init") (:reactive nil)))
           (:id 24))
          (:box
           (:type :abstraction)
           (:reference
            (:patch-from-file
             (:pathname
              (:directory (:relative :up "abstractions"))
              (:device nil)
              (:host nil)
              (:name "generate_sequence")
              (:type "opat"))))
           (:group-id nil)
           (:name "generate_sequence")
           (:x 39)
           (:y 139)
           (:w 153)
           (:h 52)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:display :hidden)
           (:lock :eval-once)
           (:lambda nil)
           (:pre-delay 0)
           (:inputs
            (:input
             (:type :standard)
             (:name "generator")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "max_continuity")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "scenario")
             (:value nil)
             (:reactive nil)))
           (:outputs
            (:output
             (:name "filtered_generated_sequence")
             (:reactive nil))
            (:output (:name "generated_sequence") (:reactive nil)))
           (:id 25))
          (:box
           (:type :function)
           (:reference (:symbol "OM-PRINT-FORMAT" "OM-LISP"))
           (:group-id nil)
           (:name "om-print-format")
           (:x 502)
           (:y 762)
           (:w 120)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "FORMAT-STRING")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "args")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "prompt")
             (:value "DYCI2")
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 26))
          (:box
           (:type :value)
           (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
           (:group-id nil)
           (:name "value box")
           (:x 435)
           (:y 728)
           (:w 248)
           (:h 30)
           (:color
            (:color-or-nil
             (:color (:color 1.0 1.0 1.0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value "OUTPUT REMIX ~A")
           (:id 27))
          (:box
           (:type :function)
           (:reference list)
           (:group-id nil)
           (:name "list")
           (:x 531)
           (:y 703)
           (:w 53)
           (:h 30)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :optional)
             (:name "x")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 28))
          (:box
           (:type :abstraction)
           (:reference
            (:patch-from-file
             (:pathname
              (:directory (:relative :up "abstractions"))
              (:device nil)
              (:host nil)
              (:name "remix_supervp_slave")
              (:type "opat"))))
           (:group-id nil)
           (:name "remix_supervp_slave")
           (:x 25)
           (:y 442)
           (:w 151)
           (:h 60)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:display :hidden)
           (:lock nil)
           (:lambda nil)
           (:pre-delay 0)
           (:inputs
            (:input
             (:type :standard)
             (:name "SOUNDS")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "SEGMENTS")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "CROSSFADE")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "outfile")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "LIST_DUR")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 29))
          (:box
           (:type :special)
           (:reference loop-for)
           (:group-id nil)
           (:name "for")
           (:x 896)
           (:y 410)
           (:w 50)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.85 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "from")
             (:value 1)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "to")
             (:value 3)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "by")
             (:value 1)
             (:reactive nil)))
           (:outputs (:output (:name "i") (:reactive nil)))
           (:id 30))
          (:box
           (:type :special)
           (:reference loop-list)
           (:group-id nil)
           (:name "list-loop")
           (:x 273)
           (:y 66)
           (:w 65)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.85 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "list")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "i") (:reactive nil)))
           (:id 31))
          (:box
           (:type :special)
           (:reference loop-list)
           (:group-id nil)
           (:name "list-loop")
           (:x 800)
           (:y 406)
           (:w 65)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.85 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "list")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "i") (:reactive nil)))
           (:id 32))
          (:box
           (:type :special)
           (:reference loop-list)
           (:group-id nil)
           (:name "list-loop")
           (:x 671)
           (:y 407)
           (:w 65)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.85 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "list")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "i") (:reactive nil)))
           (:id 33))
          (:box
           (:type :special)
           (:reference loop-list)
           (:group-id nil)
           (:name "list-loop")
           (:x 583)
           (:y 407)
           (:w 65)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.85 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "list")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "i") (:reactive nil)))
           (:id 34)))
         (:connections
          (:connection
           (:from (:box 0 :out 0))
           (:to (:box 14 :in 1))
           (:attributes (:color nil :style nil :modif (0 -131/495))))
          (:connection (:from (:box 0 :out 0)) (:to (:box 15 :in 2)))
          (:connection
           (:from (:box 2 :out 0))
           (:to (:box 12 :in 1))
           (:attributes (:color nil :style nil :modif (0 -131/496))))
          (:connection (:from (:box 2 :out 0)) (:to (:box 15 :in 3)))
          (:connection
           (:from (:box 3 :out 0))
           (:to (:box 11 :in 0))
           (:attributes (:color nil :style nil :modif (0 -3/41))))
          (:connection
           (:from (:box 3 :out 0))
           (:to (:box 31 :in 0))
           (:attributes (:color nil :style nil :modif (0 -11/60))))
          (:connection (:from (:box 4 :out 0)) (:to (:box 23 :in 5)))
          (:connection (:from (:box 5 :out 0)) (:to (:box 29 :in 2)))
          (:connection
           (:from (:box 6 :out 0))
           (:to (:box 25 :in 2))
           (:attributes
            (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
          (:connection
           (:from (:box 7 :out 0))
           (:to (:box 25 :in 0))
           (:attributes
            (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
          (:connection (:from (:box 8 :out 0)) (:to (:box 29 :in 0)))
          (:connection (:from (:box 9 :out 0)) (:to (:box 29 :in 4)))
          (:connection
           (:from (:box 11 :out 0))
           (:to (:box 30 :in 1))
           (:attributes
            (:color nil :style nil :modif (0 45973/277033))))
          (:connection
           (:from (:box 11 :out 0))
           (:to (:box 12 :in 0))
           (:attributes (:color nil :style nil :modif (0 190/429))))
          (:connection
           (:from (:box 11 :out 0))
           (:to (:box 13 :in 0))
           (:attributes
            (:color nil :style nil :modif (0 26489/59345))))
          (:connection
           (:from (:box 11 :out 0))
           (:to (:box 14 :in 0))
           (:attributes (:color nil :style nil :modif (0 0.445338))))
          (:connection (:from (:box 12 :out 0)) (:to (:box 32 :in 0)))
          (:connection (:from (:box 13 :out 0)) (:to (:box 34 :in 0)))
          (:connection (:from (:box 14 :out 0)) (:to (:box 33 :in 0)))
          (:connection (:from (:box 15 :out 0)) (:to (:box 13 :in 1)))
          (:connection (:from (:box 16 :out 0)) (:to (:box 15 :in 1)))
          (:connection (:from (:box 17 :out 0)) (:to (:box 10 :in 0)))
          (:connection (:from (:box 18 :out 0)) (:to (:box 17 :in 0)))
          (:connection (:from (:box 19 :out 0)) (:to (:box 17 :in 1)))
          (:connection (:from (:box 20 :out 0)) (:to (:box 10 :in 3)))
          (:connection (:from (:box 21 :out 0)) (:to (:box 20 :in 0)))
          (:connection (:from (:box 22 :out 0)) (:to (:box 20 :in 1)))
          (:connection (:from (:box 23 :out 0)) (:to (:box 29 :in 3)))
          (:connection (:from (:box 24 :out 0)) (:to (:box 10 :in 1)))
          (:connection (:from (:box 24 :out 1)) (:to (:box 1 :in 0)))
          (:connection
           (:from (:box 25 :out 0))
           (:to (:box 22 :in 0))
           (:attributes
            (:color
             (:color 0.2 0.4 0.5 1.0)
             :style
             nil
             :modif
             (0 0.062068947))))
          (:connection (:from (:box 25 :out 0)) (:to (:box 29 :in 1)))
          (:connection (:from (:box 26 :out 0)) (:to (:box 10 :in 2)))
          (:connection (:from (:box 27 :out 0)) (:to (:box 26 :in 0)))
          (:connection (:from (:box 28 :out 0)) (:to (:box 26 :in 1)))
          (:connection (:from (:box 29 :out 0)) (:to (:box 24 :in 0)))
          (:connection (:from (:box 30 :out 0)) (:to (:box 19 :in 0)))
          (:connection (:from (:box 30 :out 0)) (:to (:box 23 :in 3)))
          (:connection (:from (:box 31 :out 0)) (:to (:box 23 :in 4)))
          (:connection
           (:from (:box 31 :out 0))
           (:to (:box 25 :in 1))
           (:attributes
            (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
          (:connection (:from (:box 32 :out 0)) (:to (:box 23 :in 2)))
          (:connection (:from (:box 33 :out 0)) (:to (:box 23 :in 1)))
          (:connection
           (:from (:box 34 :out 0))
           (:to (:box 23 :in 0))))))
       (:group-id nil)
       (:name "generate_interpretations_of_scenario_sync_slave")
       (:x 815)
       (:y 469)
       (:w 303)
       (:h 60)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock nil)
       (:lambda nil)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "len_scen")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "scen_max_cont")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "voice_max_cont_list")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "path_output_directory")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "xfade")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "scenario")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "voice_generator")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "snd_database")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "slave_list_dur_sync")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 22))
      (:box
       (:type :special)
       (:reference loop-list)
       (:group-id nil)
       (:name "list-loop")
       (:x 194)
       (:y 96)
       (:w 65)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "list")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "i") (:reactive nil)))
       (:id 23))
      (:box
       (:type :function)
       (:reference (:symbol "OM-PRINT-FORMAT" "OM-LISP"))
       (:group-id nil)
       (:name "om-print-format")
       (:x 144)
       (:y 709)
       (:w 120)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "FORMAT-STRING")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "args")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "prompt")
         (:value "DYCI2")
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 24))
      (:box
       (:type :value)
       (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
       (:group-id nil)
       (:name "value box")
       (:x 48)
       (:y 673)
       (:w 123)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value "NEW SCENARIO: ~A")
       (:id 25))
      (:box
       (:type :function)
       (:reference list)
       (:group-id nil)
       (:name "list")
       (:x 173)
       (:y 674)
       (:w 53)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :optional)
         (:name "x")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 26))
      (:box
       (:type :function)
       (:reference (:symbol "OM-PRINT-FORMAT" "OM-LISP"))
       (:group-id nil)
       (:name "om-print-format")
       (:x 1194)
       (:y 700)
       (:w 120)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "FORMAT-STRING")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "args")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "prompt")
         (:value "DYCI2")
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 27))
      (:box
       (:type :value)
       (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
       (:group-id nil)
       (:name "value box")
       (:x 1098)
       (:y 664)
       (:w 123)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value "DURATION: ~A")
       (:id 28))
      (:box
       (:type :function)
       (:reference list)
       (:group-id nil)
       (:name "list")
       (:x 1223)
       (:y 665)
       (:w 53)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :optional)
         (:name "x")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 29)))
     (:connections
      (:connection (:from (:box 0 :out 0)) (:to (:box 26 :in 0)))
      (:connection (:from (:box 0 :out 0)) (:to (:box 21 :in 5)))
      (:connection (:from (:box 0 :out 0)) (:to (:box 22 :in 5)))
      (:connection (:from (:box 2 :out 0)) (:to (:box 12 :in 0)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 23 :in 0)))
      (:connection (:from (:box 4 :out 0)) (:to (:box 14 :in 0)))
      (:connection (:from (:box 4 :out 0)) (:to (:box 15 :in 0)))
      (:connection (:from (:box 5 :out 0)) (:to (:box 21 :in 6)))
      (:connection (:from (:box 6 :out 0)) (:to (:box 21 :in 7)))
      (:connection (:from (:box 7 :out 0)) (:to (:box 21 :in 4)))
      (:connection (:from (:box 7 :out 0)) (:to (:box 22 :in 4)))
      (:connection (:from (:box 8 :out 0)) (:to (:box 21 :in 3)))
      (:connection (:from (:box 8 :out 0)) (:to (:box 22 :in 3)))
      (:connection (:from (:box 9 :out 0)) (:to (:box 22 :in 6)))
      (:connection (:from (:box 10 :out 0)) (:to (:box 22 :in 7)))
      (:connection (:from (:box 11 :out 0)) (:to (:box 22 :in 8)))
      (:connection (:from (:box 11 :out 0)) (:to (:box 29 :in 0)))
      (:connection (:from (:box 12 :out 0)) (:to (:box 13 :in 0)))
      (:connection (:from (:box 13 :out 0)) (:to (:box 21 :in 0)))
      (:connection (:from (:box 13 :out 0)) (:to (:box 22 :in 0)))
      (:connection (:from (:box 14 :out 0)) (:to (:box 16 :in 0)))
      (:connection (:from (:box 15 :out 0)) (:to (:box 22 :in 2)))
      (:connection (:from (:box 16 :out 0)) (:to (:box 21 :in 2)))
      (:connection (:from (:box 17 :out 0)) (:to (:box 19 :in 0)))
      (:connection (:from (:box 19 :out 0)) (:to (:box 18 :in 1)))
      (:connection (:from (:box 19 :out 1)) (:to (:box 20 :in 0)))
      (:connection (:from (:box 20 :out 0)) (:to (:box 1 :in 0)))
      (:connection (:from (:box 21 :out 0)) (:to (:box 17 :in 0)))
      (:connection (:from (:box 22 :out 0)) (:to (:box 17 :in 1)))
      (:connection (:from (:box 23 :out 0)) (:to (:box 21 :in 1)))
      (:connection (:from (:box 23 :out 0)) (:to (:box 22 :in 1)))
      (:connection (:from (:box 24 :out 0)) (:to (:box 18 :in 2)))
      (:connection (:from (:box 25 :out 0)) (:to (:box 24 :in 0)))
      (:connection (:from (:box 26 :out 0)) (:to (:box 24 :in 1)))
      (:connection (:from (:box 27 :out 0)) (:to (:box 18 :in 0)))
      (:connection (:from (:box 28 :out 0)) (:to (:box 27 :in 0)))
      (:connection (:from (:box 29 :out 0)) (:to (:box 27 :in 1))))))
   (:group-id nil)
   (:name "loop_interpretations_variations_scenarios_remove_scen_sync")
   (:x 628)
   (:y 782)
   (:w 200)
   (:h 36)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "SCENARIO")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LENGTH")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "SCEN-MAX-CONT-LIST")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "VOICE-MAX-CONT-LIST")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "VOICE_GENERATOR_MASTER")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "SOUND_DB_MASTER")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "XFADE")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RES_DIR")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "VOICE_GENERATOR_SLAVE")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "SOUND_DB_SLAVE")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "Durations")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 51))
  (:box
   (:type :function)
   (:reference (:symbol "OM-PRINT-FORMAT" "OM-LISP"))
   (:group-id nil)
   (:name "om-print-format")
   (:x 1530)
   (:y 515)
   (:w 120)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FORMAT-STRING")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "args")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "prompt")
     (:value "DYCI2")
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 52))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 1391)
   (:y 454)
   (:w 248)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "DATASET ~A")
   (:id 53))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 1632)
   (:y 431)
   (:w 53)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 54))
  (:box
   (:type :function)
   (:reference (:symbol "OM-PRINT-FORMAT" "OM-LISP"))
   (:group-id nil)
   (:name "om-print-format")
   (:x 1650)
   (:y 645)
   (:w 120)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FORMAT-STRING")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "args")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "prompt")
     (:value "DYCI2")
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 55))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 1511)
   (:y 584)
   (:w 248)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "DATASET BEFORE LAMBDA ~A")
   (:id 56))
  (:box
   (:type :function)
   (:reference (:symbol "OM-PRINT-FORMAT" "OM-LISP"))
   (:group-id nil)
   (:name "om-print-format")
   (:x 1764)
   (:y 765)
   (:w 120)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FORMAT-STRING")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "args")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "prompt")
     (:value "DYCI2")
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 57))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 1625)
   (:y 704)
   (:w 248)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "DUR ~A")
   (:id 58))
  (:box
   (:type :function)
   (:reference length)
   (:group-id nil)
   (:name "length")
   (:x 1869)
   (:y 966)
   (:w 71)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SEQUENCE")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 59))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 1326)
   (:y 47)
   (:w 232)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.8902462720870972D0
       0.6694902181625366D0
       0.2833995819091797D0
       0.5019608))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "49-Haas.Limited.Holder.Transpo-2")
   (:id 60))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 1354)
   (:y 79)
   (:w 232)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.8902462720870972D0
       0.6694902181625366D0
       0.2833995819091797D0
       0.5019608))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "Mauro.Lanza.9.Chop.Holder-2")
   (:id 61))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 1279)
   (:y 129)
   (:w 232)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.8902462720870972D0
       0.6694902181625366D0
       0.2833995819091797D0
       0.5019608))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "70-Sopranino.Piano.Holder-2")
   (:id 62))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 1572)
   (:y 39)
   (:w 232)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.8902462720870972D0
       0.6694902181625366D0
       0.2833995819091797D0
       0.5019608))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "44-Ecstatics.Resonator-2")
   (:id 63))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 1245)
   (:y 16)
   (:w 255)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.8902462720870972D0
       0.6694902181625366D0
       0.2833995819091797D0
       0.5019608))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "12-Ableton.Vamporium.Holder.Sample-2")
   (:id 64))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 1858)
   (:y 27)
   (:w 160)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.8902462720870972D0
       0.6694902181625366D0
       0.2833995819091797D0
       0.5019608))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "Drum.Solo.Horns-2")
   (:id 65))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 1075)
   (:y 174)
   (:w 232)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.8902462720870972D0
       0.6694902181625366D0
       0.2833995819091797D0
       0.5019608))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "Tenney.Saxony.Resonator-2")
   (:id 66))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 1555)
   (:y 10)
   (:w 232)
   (:h 30)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.8902462720870972D0
       0.6694902181625366D0
       0.2833995819091797D0
       0.5019608))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "15-Bedrossian.Resonator.Holder-2")
   (:id 67)))
 (:connections
  (:connection (:from (:box 0 :out 0)) (:to (:box 51 :in 6)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 51 :in 3)))
  (:connection
   (:from (:box 4 :out 0))
   (:to (:box 40 :in 1))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection (:from (:box 4 :out 0)) (:to (:box 15 :in 0)))
  (:connection
   (:from (:box 6 :out 0))
   (:to (:box 8 :in 1))
   (:attributes (:color nil :style nil :modif (0 -55/1026))))
  (:connection
   (:from (:box 6 :out 0))
   (:to (:box 30 :in 1))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection
   (:from (:box 6 :out 0))
   (:to (:box 41 :in 1))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection (:from (:box 6 :out 0)) (:to (:box 35 :in 1)))
  (:connection (:from (:box 6 :out 0)) (:to (:box 15 :in 5)))
  (:connection
   (:from (:box 8 :out 0))
   (:to (:box 30 :in 2))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection (:from (:box 8 :out 0)) (:to (:box 35 :in 3)))
  (:connection
   (:from (:box 8 :out 0))
   (:to (:box 41 :in 3))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection (:from (:box 11 :out 0)) (:to (:box 51 :in 8)))
  (:connection (:from (:box 13 :out 0)) (:to (:box 15 :in 2)))
  (:connection
   (:from (:box 14 :out 0))
   (:to (:box 33 :in 1))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection (:from (:box 15 :out 0)) (:to (:box 51 :in 7)))
  (:connection
   (:from (:box 19 :out 0))
   (:to (:box 33 :in 0))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection
   (:from (:box 19 :out 0))
   (:to (:box 40 :in 0))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection (:from (:box 19 :out 0)) (:to (:box 15 :in 3)))
  (:connection
   (:from (:box 21 :out 0))
   (:to (:box 15 :in 4))
   (:attributes (:color nil :style nil :modif (0 0.15722433))))
  (:connection
   (:from (:box 25 :out 0))
   (:to (:box 24 :in 0))
   (:attributes (:color nil :style nil :modif (-5704/81855 0))))
  (:connection (:from (:box 27 :out 0)) (:to (:box 25 :in 0)))
  (:connection (:from (:box 28 :out 0)) (:to (:box 51 :in 4)))
  (:connection (:from (:box 30 :out 0)) (:to (:box 54 :in 0)))
  (:connection (:from (:box 30 :out 0)) (:to (:box 51 :in 0)))
  (:connection (:from (:box 30 :out 1)) (:to (:box 55 :in 1)))
  (:connection (:from (:box 30 :out 2)) (:to (:box 57 :in 1)))
  (:connection (:from (:box 30 :out 2)) (:to (:box 59 :in 0)))
  (:connection (:from (:box 30 :out 2)) (:to (:box 51 :in 10)))
  (:connection (:from (:box 31 :out 0)) (:to (:box 34 :in 0)))
  (:connection
   (:from (:box 32 :out 0))
   (:to (:box 31 :in 1))
   (:attributes (:color nil :style nil :modif (0 19/100))))
  (:connection (:from (:box 33 :out 0)) (:to (:box 31 :in 0)))
  (:connection (:from (:box 34 :out 0)) (:to (:box 37 :in 0)))
  (:connection
   (:from (:box 34 :out 0))
   (:to (:box 43 :in 0))
   (:attributes (:color nil :style nil :modif (0 0.42044336))))
  (:connection
   (:from (:box 34 :out 0))
   (:to (:box 48 :in 1))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif (0.45 0))))
  (:connection (:from (:box 35 :out 0)) (:to (:box 51 :in 5)))
  (:connection (:from (:box 35 :out 1)) (:to (:box 28 :in 1)))
  (:connection (:from (:box 35 :out 2)) (:to (:box 28 :in 2)))
  (:connection (:from (:box 36 :out 0)) (:to (:box 35 :in 2)))
  (:connection (:from (:box 37 :out 0)) (:to (:box 35 :in 0)))
  (:connection (:from (:box 37 :out 0)) (:to (:box 30 :in 0)))
  (:connection
   (:from (:box 38 :out 0))
   (:to (:box 48 :in 0))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection (:from (:box 39 :out 0)) (:to (:box 38 :in 1)))
  (:connection (:from (:box 40 :out 0)) (:to (:box 38 :in 0)))
  (:connection (:from (:box 40 :out 0)) (:to (:box 48 :in 3)))
  (:connection (:from (:box 41 :out 0)) (:to (:box 51 :in 9)))
  (:connection
   (:from (:box 41 :out 1))
   (:to (:box 11 :in 1))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection
   (:from (:box 41 :out 2))
   (:to (:box 11 :in 2))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection
   (:from (:box 42 :out 0))
   (:to (:box 41 :in 2))
   (:attributes (:color nil :style nil :modif (0 5/19))))
  (:connection (:from (:box 43 :out 0)) (:to (:box 15 :in 1)))
  (:connection (:from (:box 44 :out 0)) (:to (:box 51 :in 2)))
  (:connection (:from (:box 45 :out 0)) (:to (:box 15 :in 7)))
  (:connection (:from (:box 47 :out 0)) (:to (:box 46 :in 3)))
  (:connection
   (:from (:box 47 :out 1))
   (:to (:box 27 :in 0))
   (:attributes (:color nil :style nil :modif (3/752 0))))
  (:connection
   (:from (:box 48 :out 0))
   (:to (:box 41 :in 0))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif (0 2/7))))
  (:connection (:from (:box 49 :out 0)) (:to (:box 15 :in 6)))
  (:connection (:from (:box 49 :out 0)) (:to (:box 48 :in 2)))
  (:connection
   (:from (:box 51 :out 0))
   (:to (:box 47 :in 0))
   (:attributes (:color nil :style nil :modif (0 -8/27))))
  (:connection (:from (:box 52 :out 0)) (:to (:box 46 :in 0)))
  (:connection (:from (:box 53 :out 0)) (:to (:box 52 :in 0)))
  (:connection (:from (:box 54 :out 0)) (:to (:box 52 :in 1)))
  (:connection
   (:from (:box 55 :out 0))
   (:to (:box 46 :in 1))
   (:attributes (:color nil :style nil :modif (4/93 0))))
  (:connection (:from (:box 56 :out 0)) (:to (:box 55 :in 0)))
  (:connection (:from (:box 57 :out 0)) (:to (:box 46 :in 2)))
  (:connection (:from (:box 58 :out 0)) (:to (:box 57 :in 0)))
  (:connection
   (:from (:box 59 :out 0))
   (:to (:box 44 :in 0))
   (:attributes (:color nil :style nil :modif (12/1229 0))))
  (:connection (:from (:box 59 :out 0)) (:to (:box 51 :in 1)))
  (:connection (:from (:box 61 :out 0)) (:to (:box 4 :in 0)))
  (:connection (:from (:box 65 :out 0)) (:to (:box 14 :in 0)))))