
(:patch
 (:name "Scenario_Interpretations")
 (:doc "")
 (:info
  (:created "2022/08/21 19:56:13")
  (:modified "2022/08/22 18:07:55")
  (:by "om-sharp")
  (:version 1.06))
 (:window (:size (1139 929)) (:position (576 63)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:type :io)
   (:reference
    (:in (:type omin) (:index 1) (:name "len_scen") (:doc "")))
   (:group-id nil)
   (:name "len_scen")
   (:x 737)
   (:y 75)
   (:w 74)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 0))
  (:box
   (:type :io)
   (:reference (:out (:type omout) (:name "out") (:index 1) (:doc "")))
   (:group-id nil)
   (:name "out")
   (:x 213)
   (:y 838)
   (:w 68)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "out-value")
     (:value nil)
     (:reactive nil)))
   (:outputs)
   (:id 1))
  (:box
   (:type :io)
   (:reference
    (:in (:type omin) (:index 2) (:name "scen_max_cont") (:doc "")))
   (:group-id nil)
   (:name "scen_max_cont")
   (:x 802)
   (:y 108)
   (:w 127)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 2))
  (:box
   (:type :io)
   (:reference
    (:in
     (:type omin)
     (:index 3)
     (:name "voice_max_cont_list")
     (:doc "")))
   (:group-id nil)
   (:name "voice_max_cont_list")
   (:x 226)
   (:y 6)
   (:w 130)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 3))
  (:box
   (:type :io)
   (:reference
    (:in
     (:type omin)
     (:index 4)
     (:name "path_output_directory")
     (:doc "")))
   (:group-id nil)
   (:name "path_output_directory")
   (:x 865)
   (:y 335)
   (:w 148)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 4))
  (:box
   (:type :io)
   (:reference (:in (:type omin) (:index 5) (:name "xfade") (:doc "")))
   (:group-id nil)
   (:name "xfade")
   (:x 153)
   (:y 303)
   (:w 52)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 5))
  (:box
   (:type :io)
   (:reference
    (:in (:type omin) (:index 6) (:name "scenario") (:doc "")))
   (:group-id nil)
   (:name "scenario")
   (:x 226)
   (:y 76)
   (:w 81)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 6))
  (:box
   (:type :io)
   (:reference
    (:in (:type omin) (:index 7) (:name "voice_generator") (:doc "")))
   (:group-id nil)
   (:name "voice_generator")
   (:x 56)
   (:y 69)
   (:w 108)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 7))
  (:box
   (:type :io)
   (:reference
    (:in (:type omin) (:index 8) (:name "snd_database") (:doc "")))
   (:group-id nil)
   (:name "snd_database")
   (:x 22)
   (:y 312)
   (:w 104)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 8))
  (:box
   (:type :function)
   (:reference save-sound)
   (:group-id nil)
   (:name "save-sound")
   (:x 246)
   (:y 662)
   (:w 101)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock :eval-once)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "FILENAME")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 9))
  (:box
   (:type :special)
   (:reference loop-for)
   (:group-id nil)
   (:name "for")
   (:x 900)
   (:y 290)
   (:w 50)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.85 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "from")
     (:value 1)
     (:reactive nil))
    (:input (:type :standard) (:name "to") (:value 3) (:reactive nil))
    (:input (:type :optional) (:name "by") (:value 1) (:reactive nil)))
   (:outputs (:output (:name "i") (:reactive nil)))
   (:id 10))
  (:box
   (:type :special)
   (:reference loop-list)
   (:group-id nil)
   (:name "list-loop")
   (:x 166)
   (:y 61)
   (:w 68)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.85 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "list")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "i") (:reactive nil)))
   (:id 11))
  (:box
   (:type :special)
   (:reference iterate)
   (:group-id nil)
   (:name "iterate")
   (:x 297)
   (:y 832)
   (:w 475)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.85 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "action")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "action")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "action")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "action")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "action")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "action")
     (:value nil)
     (:reactive nil)))
   (:outputs)
   (:id 12))
  (:box
   (:type :function)
   (:reference length)
   (:group-id nil)
   (:name "length")
   (:x 915)
   (:y 167)
   (:w 72)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock :eval-once)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SEQUENCE")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 13))
  (:box
   (:type :function)
   (:reference make-list)
   (:group-id nil)
   (:name "make-list")
   (:x 810)
   (:y 235)
   (:w 89)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SIZE")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :key)
     (:name "initial-element")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 14))
  (:box
   (:type :function)
   (:reference make-list)
   (:group-id nil)
   (:name "make-list")
   (:x 633)
   (:y 235)
   (:w 89)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SIZE")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :key)
     (:name "initial-element")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 15))
  (:box
   (:type :special)
   (:reference loop-list)
   (:group-id nil)
   (:name "list-loop")
   (:x 817)
   (:y 291)
   (:w 68)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.85 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "list")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "i") (:reactive nil)))
   (:id 16))
  (:box
   (:type :function)
   (:reference make-list)
   (:group-id nil)
   (:name "make-list")
   (:x 721)
   (:y 235)
   (:w 89)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SIZE")
     (:value 1)
     (:reactive nil))
    (:input
     (:type :key)
     (:name "initial-element")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 17))
  (:box
   (:type :special)
   (:reference loop-list)
   (:group-id nil)
   (:name "list-loop")
   (:x 727)
   (:y 293)
   (:w 68)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.85 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "list")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "i") (:reactive nil)))
   (:id 18))
  (:box
   (:type :special)
   (:reference loop-list)
   (:group-id nil)
   (:name "list-loop")
   (:x 639)
   (:y 293)
   (:w 68)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.85 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "list")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "i") (:reactive nil)))
   (:id 19))
  (:box
   (:type :function)
   (:reference format)
   (:group-id nil)
   (:name "format")
   (:x 632)
   (:y 164)
   (:w 125)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "DESTINATION")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "CONTROL-STRING")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "format-arguments")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "format-arguments")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 20))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 640)
   (:y 117)
   (:w 73)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "[L~DC~D]")
   (:id 21))
  (:box
   (:type :function)
   (:reference (:symbol "OM-PRINT-FORMAT" "OM-LISP"))
   (:group-id nil)
   (:name "om-print-format")
   (:x 838)
   (:y 629)
   (:w 129)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FORMAT-STRING")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "args")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "prompt")
     (:value "DYCI2")
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 22))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 777)
   (:y 590)
   (:w 102)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "ITERATION #~D")
   (:id 23))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 881)
   (:y 592)
   (:w 54)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 24))
  (:box
   (:type :function)
   (:reference (:symbol "OM-PRINT-FORMAT" "OM-LISP"))
   (:group-id nil)
   (:name "om-print-format")
   (:x 436)
   (:y 592)
   (:w 129)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FORMAT-STRING")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "args")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "prompt")
     (:value "DYCI2")
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 25))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 300)
   (:y 550)
   (:w 219)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "FILTERED GENERATED SEQUENCE~A")
   (:id 26))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 521)
   (:y 550)
   (:w 54)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 27))
  (:box
   (:type :function)
   (:reference (:symbol "OM-PRINT-FORMAT" "OM-LISP"))
   (:group-id nil)
   (:name "om-print-format")
   (:x 528)
   (:y 480)
   (:w 129)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FORMAT-STRING")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "args")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "prompt")
     (:value "DYCI2")
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 28))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 439)
   (:y 444)
   (:w 164)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "GENERATED SEQUENCE ~A")
   (:id 29))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 604)
   (:y 445)
   (:w 54)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 30))
  (:box
   (:type :function)
   (:reference (:symbol "OM-PRINT-FORMAT" "OM-LISP"))
   (:group-id nil)
   (:name "om-print-format")
   (:x 533)
   (:y 718)
   (:w 129)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FORMAT-STRING")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "args")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "prompt")
     (:value "DYCI2")
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 31))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 464)
   (:y 675)
   (:w 132)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "SAVED SOUND ~A")
   (:id 32))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 598)
   (:y 676)
   (:w 54)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 33))
  (:box
   (:type :function)
   (:reference (:symbol "OM-PRINT-FORMAT" "OM-LISP"))
   (:group-id nil)
   (:name "om-print-format")
   (:x 682)
   (:y 780)
   (:w 129)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FORMAT-STRING")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "args")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "prompt")
     (:value "DYCI2")
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 34))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 642)
   (:y 744)
   (:w 89)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "OUTPUT ~A")
   (:id 35))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 733)
   (:y 744)
   (:w 54)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 36))
  (:box
   (:type :special)
   (:reference collect)
   (:group-id nil)
   (:name "collect")
   (:x 280)
   (:y 716)
   (:w 57)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.7 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "data-in")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "push")
     (:value t)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "init")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "collect") (:reactive nil))
    (:output (:name "data-out") (:reactive nil))
    (:output (:name "init") (:reactive nil)))
   (:id 37))
  (:box
   (:type :abstraction)
   (:reference
    (:patch-from-file
     (:pathname
      (:directory (:relative))
      (:device :unspecific)
      (:host :unspecific)
      (:name "Generate_Sequence")
      (:type "opat"))))
   (:group-id nil)
   (:name "Generate_Sequence")
   (:x 118)
   (:y 176)
   (:w 142)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:pre-delay 0)
   (:lock :eval-once)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "generator")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "max_continuity")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "scenario")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "filtered_generated_sequence") (:reactive nil))
    (:output (:name "generated_sequence") (:reactive nil)))
   (:id 38))
  (:box
   (:type :abstraction)
   (:reference
    (:patch-from-file
     (:pathname
      (:directory (:relative))
      (:device :unspecific)
      (:host :unspecific)
      (:name "Remix")
      (:type "opat"))))
   (:group-id nil)
   (:name "Remix")
   (:x 63)
   (:y 363)
   (:w 141)
   (:h 79)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:pre-delay 0)
   (:lock :eval-once)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SOUNDS")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "SEGMENTS")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "CROSSFADE")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 39))
  (:box
   (:type :abstraction)
   (:reference
    (:patch-from-file
     (:pathname
      (:directory (:relative))
      (:device :unspecific)
      (:host :unspecific)
      (:name "Path_Generated_Sequence")
      (:type "opat"))))
   (:group-id nil)
   (:name "Path_Generated_Sequence")
   (:x 710)
   (:y 383)
   (:w 177)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:pre-delay 0)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "name_scen")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "len_scen")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "cont_scen")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "idtf_gen")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "cont_gen")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "path_output_directory")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "path") (:reactive nil)))
   (:id 40))
  (:comment
   (:x 202)
   (:y 360)
   (:w 199)
   (:h 83)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "Concatenative audio processing.
Cuts all segments of all database audio files to separate audio files and remixes them according to scenario query.")
   (:id 41))
  (:comment
   (:x 267)
   (:y 131)
   (:w 328)
   (:h 158)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "Here is where the python magic happens. 
Receives :
1. [dataset audio file-index, onset, offset] [active dimensions data] of all dataset analysis files (txt) inside your directory.
2. Label continuities
3. Scenario Query  
Outputs :
1.  A list (sequence) only of the segments (index onset offset) that satisfy the scenario query.")
   (:id 42)))
 (:connections
  (:connection
   (:from (:box 0 :out 0))
   (:to (:box 17 :in 1))
   (:attributes (:color nil :style nil :modif (0 -131/495))))
  (:connection (:from (:box 0 :out 0)) (:to (:box 20 :in 2)))
  (:connection
   (:from (:box 2 :out 0))
   (:to (:box 14 :in 1))
   (:attributes (:color nil :style nil :modif (0 -131/496))))
  (:connection (:from (:box 2 :out 0)) (:to (:box 20 :in 3)))
  (:connection
   (:from (:box 3 :out 0))
   (:to (:box 13 :in 0))
   (:attributes (:color nil :style nil :modif (0 -3/41))))
  (:connection
   (:from (:box 3 :out 0))
   (:to (:box 11 :in 0))
   (:attributes (:color nil :style nil :modif (0 -11/60))))
  (:connection (:from (:box 4 :out 0)) (:to (:box 40 :in 5)))
  (:connection (:from (:box 5 :out 0)) (:to (:box 39 :in 2)))
  (:connection (:from (:box 6 :out 0)) (:to (:box 38 :in 2)))
  (:connection (:from (:box 7 :out 0)) (:to (:box 38 :in 0)))
  (:connection (:from (:box 8 :out 0)) (:to (:box 39 :in 0)))
  (:connection (:from (:box 9 :out 0)) (:to (:box 33 :in 0)))
  (:connection (:from (:box 9 :out 0)) (:to (:box 37 :in 0)))
  (:connection (:from (:box 10 :out 0)) (:to (:box 24 :in 0)))
  (:connection (:from (:box 10 :out 0)) (:to (:box 40 :in 3)))
  (:connection (:from (:box 11 :out 0)) (:to (:box 38 :in 1)))
  (:connection (:from (:box 11 :out 0)) (:to (:box 40 :in 4)))
  (:connection
   (:from (:box 13 :out 0))
   (:to (:box 10 :in 1))
   (:attributes (:color nil :style nil :modif (0 45973/277033))))
  (:connection
   (:from (:box 13 :out 0))
   (:to (:box 14 :in 0))
   (:attributes (:color nil :style nil :modif (0 190/429))))
  (:connection
   (:from (:box 13 :out 0))
   (:to (:box 15 :in 0))
   (:attributes (:color nil :style nil :modif (0 26489/59345))))
  (:connection
   (:from (:box 13 :out 0))
   (:to (:box 17 :in 0))
   (:attributes (:color nil :style nil :modif (0 0.445338))))
  (:connection (:from (:box 14 :out 0)) (:to (:box 16 :in 0)))
  (:connection (:from (:box 15 :out 0)) (:to (:box 19 :in 0)))
  (:connection (:from (:box 16 :out 0)) (:to (:box 40 :in 2)))
  (:connection (:from (:box 17 :out 0)) (:to (:box 18 :in 0)))
  (:connection (:from (:box 18 :out 0)) (:to (:box 40 :in 1)))
  (:connection (:from (:box 19 :out 0)) (:to (:box 40 :in 0)))
  (:connection (:from (:box 20 :out 0)) (:to (:box 15 :in 1)))
  (:connection (:from (:box 21 :out 0)) (:to (:box 20 :in 1)))
  (:connection (:from (:box 22 :out 0)) (:to (:box 12 :in 1)))
  (:connection (:from (:box 23 :out 0)) (:to (:box 22 :in 0)))
  (:connection (:from (:box 24 :out 0)) (:to (:box 22 :in 1)))
  (:connection (:from (:box 25 :out 0)) (:to (:box 12 :in 3)))
  (:connection (:from (:box 26 :out 0)) (:to (:box 25 :in 0)))
  (:connection (:from (:box 27 :out 0)) (:to (:box 25 :in 1)))
  (:connection (:from (:box 28 :out 0)) (:to (:box 12 :in 2)))
  (:connection (:from (:box 29 :out 0)) (:to (:box 28 :in 0)))
  (:connection (:from (:box 30 :out 0)) (:to (:box 28 :in 1)))
  (:connection (:from (:box 31 :out 0)) (:to (:box 12 :in 4)))
  (:connection (:from (:box 32 :out 0)) (:to (:box 31 :in 0)))
  (:connection (:from (:box 33 :out 0)) (:to (:box 31 :in 1)))
  (:connection (:from (:box 34 :out 0)) (:to (:box 12 :in 5)))
  (:connection (:from (:box 35 :out 0)) (:to (:box 34 :in 0)))
  (:connection (:from (:box 36 :out 0)) (:to (:box 34 :in 1)))
  (:connection (:from (:box 37 :out 0)) (:to (:box 12 :in 0)))
  (:connection (:from (:box 37 :out 1)) (:to (:box 1 :in 0)))
  (:connection (:from (:box 38 :out 0)) (:to (:box 27 :in 0)))
  (:connection (:from (:box 38 :out 0)) (:to (:box 39 :in 1)))
  (:connection (:from (:box 38 :out 1)) (:to (:box 30 :in 0)))
  (:connection (:from (:box 39 :out 0)) (:to (:box 9 :in 0)))
  (:connection (:from (:box 39 :out 0)) (:to (:box 36 :in 0)))
  (:connection (:from (:box 40 :out 0)) (:to (:box 9 :in 1)))))