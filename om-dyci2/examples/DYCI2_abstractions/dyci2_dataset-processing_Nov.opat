
(:patch
 (:name "dyci2_dataset-processing_Nov")
 (:doc "")
 (:info
  (:created "2022/08/23 0:47:29")
  (:modified "2022/11/28 17:07:31")
  (:by "om-sharp")
  (:version 1.06))
 (:window (:size (938 764)) (:position (98 162)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:type :io)
   (:reference
    (:in
     (:type omin)
     (:index 1)
     (:name "function_process_label")
     (:doc "")))
   (:group-id nil)
   (:name "function_process_label")
   (:x 544)
   (:y 293)
   (:w 153)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 0))
  (:box
   (:type :io)
   (:reference
    (:in
     (:type omin)
     (:index 2)
     (:name "choose-directory-dialog")
     (:doc "")))
   (:group-id nil)
   (:name "choose-directory-dialog")
   (:x 235)
   (:y 95)
   (:w 153)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 1))
  (:box
   (:type :io)
   (:reference
    (:in (:type omin) (:index 3) (:name "audio-file-type") (:doc "")))
   (:group-id nil)
   (:name "audio-file-type")
   (:x 448)
   (:y 192)
   (:w 110)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 2))
  (:box
   (:type :io)
   (:reference
    (:in (:type omin) (:index 4) (:name "dimension-state") (:doc "")))
   (:group-id nil)
   (:name "dimension-state")
   (:x 481)
   (:y 243)
   (:w 144)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 3))
  (:box
   (:type :io)
   (:reference
    (:out (:type omout) (:name "sound") (:index 1) (:doc "")))
   (:group-id nil)
   (:name "sound")
   (:x 394)
   (:y 396)
   (:w 108)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "out-value")
     (:value nil)
     (:reactive nil)))
   (:outputs)
   (:id 4))
  (:box
   (:type :io)
   (:reference
    (:out (:type omout) (:name "root-directory") (:index 2) (:doc "")))
   (:group-id nil)
   (:name "root-directory")
   (:x 229)
   (:y 272)
   (:w 98)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "out-value")
     (:value nil)
     (:reactive nil)))
   (:outputs)
   (:id 5))
  (:box
   (:type :function)
   (:reference (:symbol "OM-DIRECTORY" "OM-API"))
   (:group-id nil)
   (:name "om-directory")
   (:x 351)
   (:y 286)
   (:w 109)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "PATH")
     (:value nil)
     (:reactive nil))
    (:input (:type :key) (:name "type") (:value nil) (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 6))
  (:box
   (:type :function)
   (:reference directory-namestring)
   (:group-id nil)
   (:name "directory-namestring")
   (:x 239)
   (:y 229)
   (:w 152)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "P")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 7))
  (:box
   (:type :abstraction)
   (:reference
    (:patch-from-file
     (:pathname
      (:directory (:relative))
      (:device :unspecific)
      (:host :unspecific)
      (:name "Loop_Process_Dataset")
      (:type "opat"))))
   (:group-id nil)
   (:name "Loop_Process_Dataset")
   (:x 424)
   (:y 344)
   (:w 200)
   (:h 37)
   (:color
    (:color-or-nil
     (:color
      (:color
       0.5019567608833313D0
       0.9999629259109497D0
       0.031039152294397354D0
       0.5764706))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:pre-delay 0)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "lab_files")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "list_activation_labels")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "extension_audio_files")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "function_process_label")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "sound") (:reactive nil))
    (:output (:name "dataset-segments") (:reactive nil))
    (:output (:name "processed-labels") (:reactive nil)))
   (:id 8))
  (:comment
   (:x 71)
   (:y 342)
   (:w 364)
   (:h 68)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "Gather and output from the leftmost outlet : [dataset audio files], from the middle outlet : [file-index onset offset] and from the rightmost outlet [active dimensions data] of all analysis files (txt) inside your directory.  ")
   (:id 9))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 400)
   (:y 251)
   (:w 41)
   (:h 29)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "txt")
   (:id 10))
  (:box
   (:type :io)
   (:reference
    (:out (:type omout) (:name "memory") (:index 3) (:doc "")))
   (:group-id nil)
   (:name "memory")
   (:x 518)
   (:y 403)
   (:w 66)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "out-value")
     (:value nil)
     (:reactive nil)))
   (:outputs)
   (:id 11))
  (:box
   (:type :io)
   (:reference
    (:out (:type omout) (:name "labels") (:index 4) (:doc "")))
   (:group-id nil)
   (:name "labels")
   (:x 588)
   (:y 401)
   (:w 53)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 0.0)) (:t-or-nil t)))
   (:border 0)
   (:roundness 0)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "out-value")
     (:value nil)
     (:reactive nil)))
   (:outputs)
   (:id 12)))
 (:connections
  (:connection (:from (:box 0 :out 0)) (:to (:box 8 :in 3)))
  (:connection (:from (:box 1 :out 0)) (:to (:box 7 :in 0)))
  (:connection (:from (:box 2 :out 0)) (:to (:box 8 :in 1)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 8 :in 2)))
  (:connection (:from (:box 6 :out 0)) (:to (:box 8 :in 0)))
  (:connection (:from (:box 7 :out 0)) (:to (:box 6 :in 0)))
  (:connection (:from (:box 7 :out 0)) (:to (:box 5 :in 0)))
  (:connection (:from (:box 8 :out 0)) (:to (:box 4 :in 0)))
  (:connection (:from (:box 8 :out 1)) (:to (:box 11 :in 0)))
  (:connection (:from (:box 8 :out 2)) (:to (:box 12 :in 0)))
  (:connection (:from (:box 10 :out 0)) (:to (:box 6 :in 1)))))