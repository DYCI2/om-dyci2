
(:patch
 (:name "dyci2generator-basic")
 (:doc "")
 (:info
  (:created "2018/06/17 2:59:29")
<<<<<<< Updated upstream
  (:modified "2022/07/12 14:46:21")
=======
  (:modified "2022/07/12 14:46:34")
>>>>>>> Stashed changes
  (:by "om-sharp")
  (:version 1.06))
 (:window (:size (1039 708)) (:position (580 -899)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 262)
   (:y 43)
   (:w 99)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list "A" "B" "C" "D"))
   (:id 0))
  (:box
   (:type :function)
   (:reference nth-random)
   (:group-id nil)
   (:name "nth-random")
   (:x 260)
   (:y 74)
   (:w 103)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LIST")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 1))
  (:box
   (:type :special)
   (:reference repeat-n)
   (:group-id nil)
   (:name "repeat-n")
   (:x 289)
   (:y 137)
   (:w 91)
   (:h 28)
   (:color
    (:color-or-nil (:color (:color 0.82 0.85 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :left)
   (:reactive nil)
   (:lock nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "self")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "num")
     (:value 0)
     (:reactive nil)))
   (:outputs (:output (:name "collected results") (:reactive nil)))
   (:id 2))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 199)
   (:y 59)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 15)
   (:id 3))
  (:box
   (:library "om-dyci2")
   (:type :object)
   (:reference (:symbol "DYCI2GENERATOR" "DYCI2"))
   (:group-id nil)
   (:name nil)
   (:x 37)
   (:y 202)
   (:w 355)
   (:h 52)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font (:font (:face "Calibri") (:size 12) (:style :italic)))
   (:align :center)
   (:display :text)
   (:showname nil)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "MEMORY")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LABLS")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "MEMORY") (:reactive nil))
    (:output (:name "LABLS") (:reactive nil)))
   (:window (:size (nil nil)) (:position (nil nil)))
   (:edition-params)
   (:value
    (:object
     (:class (:symbol "DYCI2GENERATOR" "DYCI2"))
     (:slots
      ((:memory
        (:list
         "M1"
         "M2"
         "M3"
         "M4"
         "M5"
         "M6"
         "M7"
         "M8"
         "M9"
         "M10"
         "M11"
         "M12"
         "M13"
         "M14"
         "M15"))
       (:labls
        (:list
         "C"
         "C"
         "A"
         "A"
         "A"
         "C"
         "B"
         "D"
         "D"
         "C"
         "D"
         "D"
         "B"
         "D"
         "C"))))))
   (:id 4))
  (:box
   (:library "om-dyci2")
   (:type :function)
   (:reference (:symbol "DYCI2QUERY" "DYCI2"))
   (:group-id nil)
   (:name "dyci2query")
   (:x 143)
   (:y 315)
   (:w 97)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "QUERY")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 5))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 197)
   (:y 271)
   (:w 155)
   (:h 29)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list "A" "B" "C" "D" "C" "B" "A"))
   (:id 6))
  (:comment
   (:x 291)
   (:y 21)
   (:w 46)
   (:h 23)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "Labels")
   (:id 7))
  (:comment
   (:x 402)
   (:y 204)
   (:w 215)
   (:h 53)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "initalize a DYCI2 Generator: lock after eval to make queries on the same generator.")
   (:id 8))
  (:comment
   (:x 246)
   (:y 320)
   (:w 163)
   (:h 23)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "Query for new scenario")
   (:id 9))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 63)
   (:y 416)
   (:w 255)
   (:h 29)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list "M6" "M12" "M3" "M4" "M14" "M12" "M10"))
   (:id 10))
  (:box
   (:type :function)
   (:reference debug-dyci2)
   (:group-id nil)
   (:name "debug-dyci2")
   (:x 455)
   (:y 18)
   (:w 106)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 11))
  (:box
   (:type :function)
   (:reference (:symbol "GC-ALL" "HARLEQUIN-COMMON-LISP"))
   (:group-id nil)
   (:name "gc-all")
   (:x 478)
   (:y 45)
   (:w 69)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 12))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "gen-memory")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (467 382)) (:position (518 200)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference (:in (:type omin) (:index 1) (:name "N") (:doc "")))
       (:group-id nil)
       (:name "N")
       (:x 311)
       (:y 39)
       (:w 40)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "out") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "out")
       (:x 203)
       (:y 294)
       (:w 40)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 1))
      (:box
       (:type :special)
       (:reference loop-for)
       (:group-id nil)
       (:name "loop-for")
       (:x 264)
       (:y 92)
       (:w 67)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "from")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "to")
         (:value 10)
         (:reactive nil)))
       (:outputs (:output (:name "i") (:reactive nil)))
       (:id 2))
      (:box
       (:type :function)
       (:reference string+)
       (:group-id nil)
       (:name "string+")
       (:x 174)
       (:y 196)
       (:w 78)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :optional)
         (:name "strings")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "strings")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:type :special)
       (:reference collect)
       (:group-id nil)
       (:name "collect")
       (:x 195)
       (:y 235)
       (:w 57)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "push")
         (:value t)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 4))
      (:box
       (:type :special)
       (:reference iterate)
       (:group-id nil)
       (:name "iterate")
       (:x 136)
       (:y 290)
       (:w 56)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "action")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 5))
      (:box
       (:type :function)
       (:reference number-to-string)
       (:group-id nil)
       (:name "number-to-string")
       (:x 225)
       (:y 154)
       (:w 134)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "NUM")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 6))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 265)
       (:y 57)
       (:w 32)
       (:h 29)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 1)
       (:id 7))
      (:box
       (:type :value)
       (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
       (:group-id nil)
       (:name "value box")
       (:x 176)
       (:y 153)
       (:w 36)
       (:h 29)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value "M")
       (:id 8)))
     (:connections
      (:connection (:from (:box 0 :out 0)) (:to (:box 2 :in 1)))
      (:connection (:from (:box 2 :out 0)) (:to (:box 6 :in 0)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 4 :in 0)))
      (:connection (:from (:box 4 :out 0)) (:to (:box 5 :in 0)))
      (:connection (:from (:box 4 :out 1)) (:to (:box 1 :in 0)))
      (:connection (:from (:box 6 :out 0)) (:to (:box 3 :in 1)))
      (:connection (:from (:box 7 :out 0)) (:to (:box 2 :in 0)))
      (:connection (:from (:box 8 :out 0)) (:to (:box 3 :in 0))))))
   (:group-id nil)
   (:name "gen-memory")
   (:x 161)
   (:y 125)
   (:w 109)
   (:h 51)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:pre-delay 0)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "N")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 13))
  (:comment
   (:x 632)
   (:y 91)
   (:w 251)
   (:h 53)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "aleatoire pour creer une suite d'etiquette 

une cotee etiquette une ")
   (:id 14))
  (:comment
   (:x 630)
   (:y 170)
   (:w 250)
   (:h 98)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "list of content
list of lables 

no gen-memory

")
   (:id 15))
  (:comment
   (:x 633)
   (:y 43)
   (:w 311)
   (:h 38)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "create a simpler patch to explain lables and content
query with scenario")
   (:id 16))
  (:comment
   (:x 630)
   (:y 283)
   (:w 250)
   (:h 98)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "list of content
list of lables 

no gen-memory

")
   (:id 17))
  (:comment
   (:x 359)
   (:y 275)
   (:w 46)
   (:h 23)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "query")
   (:id 18))
  (:comment
   (:x 627)
   (:y 362)
   (:w 323)
   (:h 38)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "create colour palette for all internal library devices
colour for variables and control for user to change")
   (:id 19))
  (:comment
<<<<<<< Updated upstream
   (:x 453)
   (:y 540)
   (:w 182)
   (:h 53)
=======
   (:x 581)
   (:y 480)
   (:w 168)
   (:h 23)
>>>>>>> Stashed changes
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
<<<<<<< Updated upstream
   (:text
    "1) title
2) define what the patch does
3) comment everything")
=======
   (:text "enter your comment here...")
>>>>>>> Stashed changes
   (:id 20)))
 (:connections
  (:connection (:from (:box 0 :out 0)) (:to (:box 1 :in 0)))
  (:connection (:from (:box 1 :out 0)) (:to (:box 2 :in 0)))
  (:connection
   (:from (:box 2 :out 0))
   (:to (:box 4 :in 2))
   (:attributes (:color nil :style nil :modif (0 -11/151))))
  (:connection (:from (:box 3 :out 0)) (:to (:box 2 :in 1)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 13 :in 0)))
  (:connection (:from (:box 4 :out 0)) (:to (:box 5 :in 0)))
  (:connection (:from (:box 5 :out 0)) (:to (:box 10 :in 0)))
  (:connection (:from (:box 6 :out 0)) (:to (:box 5 :in 1)))
  (:connection (:from (:box 13 :out 0)) (:to (:box 4 :in 1)))))