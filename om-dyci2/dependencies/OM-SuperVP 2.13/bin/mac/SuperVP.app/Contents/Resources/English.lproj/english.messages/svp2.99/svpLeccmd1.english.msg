leccmd:usagehead = PROGRAM USAGE:~

leccmd:usagehelp =

helpoptions:: 
==============

   -h   : prints out this help description.
   -ha  : prints out all sections of the help besides the extended 
            filter description.
   -hi  : prints out the help message for input options.
   -hp  : prints out the help for all processing options.
   -hf  : prints out the description of the different filtering modules.
   -ho  : prints out the help for output options.
   -ht  : prints out the help for transient or onset detection.
   -hv  : prints out the help for voiced/unvoiced cut-off frequency
          estimation.
   -he  : prints out the help for envelope modification
   -hr  : prints out the help for phase randomization.
   -hh  : prints out general info about the help.
~
   
leccmd:helpintro =
=========================== SuperVP %s ==============================

Command Line Help :: 

SuperVP is  IRCAMs phase vocoder  implementation. It serves  as signal
processing  kernel in  AudioSculpt. There  exist real  time processing
objects for Max/MSP as well.

Generally, SuperVP processing may use 2 sound tracks, the main and the
mixer track. If applicable on  both tracks the options determining the
main track are  in upper case, the options applied  to the mixer track
are specified in lower case.

Command  line option  parameters  specified in  <>  are mandatory.  If
option flags  are specified in []  they may be omitted  resulting in a
default value.

Parameter files:: 

The parameter  files that  are not referenced  by means of  a complete
path name (either starting with  "/", "./", or "../") will be prefixed
by  the directory stored  in the  environment variable  SVPPARAMS!  If
SVPPARAMS is not set the current directory is used.

---------------------------------------------------------------------~

leccmd:helphtml_head =
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
       "http://www.w3.org/TR/html4/strict.dtd">
<.html>
<.head>
<.title> %s - %s <./title>
<style type="text/css"> 
div.Indent {margin-left:3%%; }
body { margin-left:3%%; margin-right:3%%; }
<./style>
<./head>
<.body>
<.a HREF="@INDEXLINK@">Back to Index<./a>
~

leccmd:helphtml_food =
<./body>
<./html>
~

leccmd:usageinput =
=====================================================================
========================  Input options%s ============================
~

leccmd:usage-S = 
-Ss<filename> ::                                          (Def: stdin) 

   specifies  input file  name which  is relative  to  the environment
   variable $SFDIR (if set).  <filename>  can be either a soundfile or
   a spectral data  file generated by an earlier  call to SuperVP (see
   output  options).   To  specify  that  a  data  file  is  used  the
   corresponding track should be switched  to data input mode with the
   -isdata flag.  Note, the exception  that the filename may be either
   directly attached to the flag  (as for all other one character flag
   modifiers), or may be separated by a space.

   Supported  sound files  comprise  AIFF/AIFC/WAV/NEXT/SDII with  all
   variations of sample size and with u-law/a-law compression.

 ------ Example: -Sflute

   Specifies input data to be read from $SFDIR/flute!
----------------------------------------------------------------------~

leccmd:usage-filepat = 
-filepat <Pattern=repl1,repl2,...>[::]<Pattern=repl1,repl2,...> :: %s (Def: none) 

   The filepat  flag allows to declare  a substring of  the input file
   name  as  pattern that  will  be  replaced  by all  the  subsequent
   replacement strings. The  generated list of sound files  is used to
   create a  multi channel file that  contains the files  in the given
   order in the subsequent channels. If any of the generated filenames
   contains more  than a  single channel the  file will  fill mutliple
   channels.

   The  filepat mechanism  is especially  useful to  read  and process
   multi channel files  that are stored in multiple  files (i.e. split
   files in  Protools).  Note, however,  that the output file  will be
   stored  as a  single multi  channel file  as long  as there  are no
   output file patterns declared (see: %s).

 ------ Example: -filepat CC=L,R -S snd-CC.wav

   will read the files $SFDIR/snd-L.wav and $SFDIR/snd-R.wav 
   into subsequent channels.

----------------------------------------------------------------------~
leccmd:usage-ofilepat = 
-ofilepat <Pattern=repl1,repl2,...> :: %s                (Def: none) 

   The filepat flag  allows to declare a substring  of the output file
   name  as  pattern that  will  be  replaced  by all  the  subsequent
   replacement strings. The  generated list of sound files  is used to
   create a multiple output files that receive the individual channels
   of the  processed sound  in the given.  If there are  more channels
   than  file names  the  last  file will  contain  all the  remaining
   channels.

   The filepat mechanism is  especially useful to generate split multi
   channel  files  (i.e.   for  Protools).  For  reading  split  multi
   channel sounds see %s.

 ------ Example: -ofilepat CC=L,R snd-CC.wav

   will write the subsequent  channels into the files $SFDIR/snd-L.wav
   and $SFDIR/snd-R.wav.

----------------------------------------------------------------------~

leccmd:usage-isdata =
-isdata <track>:: 
   
   File specified  for given  track (S for  first track, s  for second
   track) contains spectral data in one of the supported spectral data
   formats (see: output options %s )

 ------ Example: -Sflute.g3 -isdata S

   Specifies input data to be read from $SFDIR/flute.g3
   is in gabarit format
----------------------------------------------------------------------~

leccmd:usage-B =                       
-Bb<start> ::                                               (Def: 0.0)

   specifies start position in the input file.  The starting point may
   be negative which will add silence in the beginning of the sound.

   If  start  contains  a  decimal  point  or  ends  with  "s"  it  is
   interpreted as time  in seconds if not it  specifies time in sample
   number!  The first sample is at position 0;

    ------ Example : -B1.4   
    starts processing at time 1.4s, 
    ------ Example : -B1s  
    starts processing at time 1s,
    ------ Example : -B44100 
    starts processing at sample position 44100

----------------------------------------------------------------------~

leccmd:usage-C = 
-Cc[k]<channel> ::                            (Def. all channels or 1)
   
   Select  a channel  to  be processed.   Channel  numbers start  from
   1. The  default value depends  on the  selected output  format. For
   sounds the  default is to  process all channels, for  analysis data
   only  one channel  can  be  processed and  the  default channel  is
   channel 1.
		
   The modifier  k is only supported  for the first track  '-C' and is
   used for multi channel files  to keep the channels not selected for
   processing unchanged in the output file.

   ------ Example : -C2 
   selects the second channel from a multi channel sound file. 
   and creates a mono output file.
          
   ------ Example : -Ck1
   selects the first channel from a multi channel sound file and
   creates a sound  file with the same number  of channels then
   the   input   and   only   the  first   channel   processed.
----------------------------------------------------------------------~

leccmd:usage-E =                             
-Ee<end> ::                              (Def: end of file)

   specifies last  sample to  be processed in  the input file,  if end
   points to samples past the end  of file zeros are added to the file
   content.

   If end  contains a decimal  point or ends  with the letter s  it is
   interpreted as time in seconds,  if not it specifies time in sample
   number!

   ------ Example : -E5.0 
   end processing at time 5s,

   ------ Example : -E5s
   end processing at time 5s.

   ------ Example : -E88200 
   end processing at sample 88200 (excluding 
                           sample 88200, count starts at 0).
----------------------------------------------------------------------~

leccmd:usage-mixlist =
-mixlist <mixinfofile> :: 
   
   mix input files as specified  in mixinfofile when reading the sound
   input files.  Each  entry in the mixer parameter  file consists of a
   file name (possibly quoted by "...") and a number of subsequent lines
   containing mixing  position.  If no  quotes are given  the complete
   line without any  trailing blank characters are used  as file name.
   Any  input file  may be  followed by  zero or  more  target channel
   mixing  description  lines.  If  none  is  given  the file  is  not
   used.  If  more than  one  is  given the  file  can  be mixed  into
   different positions. Each position descriptor has the form

%s
      [target_channel/start time 1,source channel 1,mix factor 1/start time 2,...]
%s      
   The first  entry (target channel)  specifies the channel  where the
   sound  should  be placed.  It  has to  be  an  integer number  with
   counting starting at 1.  The  target channel may be larger than the
   number of channels of the current  input sound -S in which case the
   number  of channels  of the  output will  be increased.   After the
   target channel  multiple entries of mixing  descriptors specify the
   placement  of  the target  channel.   Each  entry  is separated  by
   "/". No  "/" has to  be placed  at the end  of the list.   For each
   descriptor  you need  at least  specify the  start time  (where the
   mixed sound will  start relative to the main  input sound file) and
   the source  channel (which channel  to use). Additionally,  a third
   entry  may be  added to  specify a  scaling factor  that  should be
   applied  when  mixing this  segment.   More  than  a single  target
   channel  mixing descriptor may  be following  a single  source file
   name.

   If  no -B  or -E  option has  been specified  the output  file will
   contain all mixed segments.  That means that if start times < 0 are
   specified or the end of a  mixing input is located after the end of
   the  main  input  file the  output  sound  will  be longer  as  the
   original.  If -B  or -E has been given, they  will limit the output
   sound file accordingly.

   Empty lines and lines starting with  # in the mixer input file will
   be ignored. A complete example of a mixer input file is

%s
        "./temp/sax8070.aiff"
        [1/0.1,1/-0.1,1]
        [1/1,1/-0.1,1]

        "./temp/sax3390.aiff"
        [2/1,1/0.5,1]
        "./temp/sax5234.aiff"     
        # comment: next file is not used
        "./temp/sax1420.aiff"
        "./temp/sax1420_3390.aiff"
        [2/0.6,2/0.5,1]
        [1/0.4,1/0.5,2]
%s
   ------ Examples: -S sax.aiff -mixlist mix.par

-----------------------------------------------------------------------~

leccmd:usageproc =
=======================================================================
=======================   Processing options%s =========================~

leccmd:usage-v = 
-v  :: 
   prints out details about the SVP patch structure and 
   parameters.
----------------------------------------------------------------------~

leccmd:usage-logfile = 
-logfile filename :: 
   sets message output file to filename, the filename
   stderr is treated as special indicator for stderr output
----------------------------------------------------------------------~

leccmd:usage-t = 
-t  :: 
    displays the current processing time in the input file
----------------------------------------------------------------------

-T  :: 
   displays the current processing time in the output file

----------------------------------------------------------------------

-tirel <filename> :: 

   stores input output file time relations as ASCII bpf file in filename

----------------------------------------------------------------------~
leccmd:usage-I = 
-I<step>[unit]          :: 
-i<step>[unit]          :: 
-Inum <step>[unit]      :: 
-inum <step>[unit]          :: 
-Ipos <filename> [vstep][unit]::  
-ipos <filename> [vstep][unit]::  

   specifies analysis step.  The  "step" parameter can be specified in
   samples, seconds  [unit=s] or milli-seconds  [unit=ms].  
  
   The -I flag sets the increment for the first track and -i those for
   the second track. 

   Analysis  increment  modi  are   selected  according  to  the  text
   extension of the -I or -i flag. The default mode (auto) is selected
   if no -I or -i flag is given.

   The increment modi are:

%s
   auto (default  mode) moves  analysis window according  to -oversamp
        flag, such that a sufficient overlap of analysis and synthesis
        windows is always guarranteed.
   
   num fixed increment of size  "step" samples, the "num" modifier can
        be neglected. The  num mode is the default mode  if no mode is
        explicitly  selected.   Using  a  fixed analysis  stepsize  is
        generally  not a  good idea.  It  may have  applications if  a
        perfectly regluar analysis grid is required.

   pos read analysis positions  from given file.  The virtual stepsize
        (vstep)  can  be  used  to control  positioning  of  synthesis
        frames.  This parameter is  only used when resynthesis (-Z) is
        requested.  If not given automatic placement, according to the
        oversampling setting will be  performed.  The file consists of
        lines containing  a sequence of  lines each containing  any of
        the following specifications: 

        single position        : indicates the  sample
        (ex: 10000.)             position to read the next frame
                                 The frame is positioned in
                                 the output stream with
                                 location given by vstep.
        "c" followed by pos    : indicates a repositioning
        (ex: c 10000.)           of the analysis frame position.
                                 The read pointer is repositioned without
                                 creating analysis frame. This may be
                                 used to jump between file positions
                                 without adding samples to the output 
                                 file.
        "u" followed by pos    : indicates a target position
        (ex: u 10000.)           The frame increment is calculated
                                 automatically and a sequence
                                 of frames is created that stops with the last
                                 frame having its center at
                                 position "pos".
        "f"                    : automatically move forward until                                      
                                 a new position can be read from
                                 the parameter file, only useful
                                 if reading from a named pipe.
                                 Position increment is the same
                                 as with "u pos"
        "b"                    : automatically move backward until
                                 a new position can be read from
                                 the parameter file, only useful
                                 if reading from a named pipe.
                                 Position increment is the same
                                 as with "u pos"

%s
    	------ Example : -I256
        
        use fixed input step size

        ------ Example : -Ipos posfile 

%s
            example posfile:    
            u 30000       (: read frames until sample position 30000)
            c 100000      (: position frame at sample position 100000)
            u 30000       (: read frames backward until sample pos 30000)
            c 100000      (: position frame at sample position 100000)
            u 200000      (: read frames until sample position 200000)
%s
        The sequence  of position commands  will process the  file and
        apply all treatments using  the sound segment between sample 0
        and sample 200000 with the special effect to reverse the sound
        samples located between sample 30000 and 100000.

   libsvp :: 
    
   If a library with memory based io is used a further input mode is

   -Imem  which indicates that input is read via a
    callback (only for use in svp library applications)
   
----------------------------------------------------------------------~

leccmd:usage-M =
-M<windowSize>[unit]   ::          %s                      (Def: 1024)
-M<bpfFile>            ::                                  
-Mauto [auto-params]   ::                                  
-m<windowSize>[unit]   ::            
-m<bpfFile>            ::                                  
-mauto [auto-params]   ::                                  

   The  window  size determines  the  size  of  the individual  signal
   segments  that will  be  treated  in SuperVP.   If  specified as  a
   constant number then the windowsize can be specified in samples [no
   unit],  seconds   [unit=s]  or  milli-seconds   [unit=ms].   SupeVP
   supports time  varying window sizes. Time varying  window sizes can
   be  determined either  by  means of  an  bpf file  or  they can  be
   calculated from the fundamental frequency  given via %s. In case of
   time varying  windowsizes only a  limited numlber of sizes  will be
   available. The number of qunatization steps of the windowsize 
   is specfified by means of the command line flag %s.

   Window placement:
   =================

   Frequency domain processing:
   ----------------------------

   If  the analysis  flag  "-A"  is specified,  the  segments will  be
   overlapping.   The offset  between  2 subsequent  frames is  either
   automatically  determined  according  to  a  target  overlap  (see
   %s flag)  or equal  to a user  selected fixed  stepsize (see
   flag  -I).   Note, that  in  almost  all  situations the  automatic
   selection of the stepsize should  be prefered, because it will take
   into  account the  requirements of  the algorithms  that  have been
   selected  for  treatment.   The  overlapping frames  will  each  be
   multiplied  with the  analysis  window  and used  as  input to  the
   Fourier transform.

   Time domain processing :
   ------------------------

   If the flag  -A is not specifed and only  time domain processing is
   required the signal segments will not overlap.  In that case the -I
   flag is not used and the stepsize equals the window size.

   ------ Example: -M2000

   Time varying windowsize:
   =========================

   BPF file:
   ---------

   Windowsizes can be controlled by means of a bpf file. The bpf file
   contains entries specifying time position and window size in seconds
   on individual lines.

   ------ Example:   -Mwin.bpf

   With M.bpf containing

%s
  0.1  0.02
  0.5  0.03
%s

  will adapt windowsizes over  time. Windowsize will be constant 0.02s
  and   0.3s  before   and   after  time   position   0.1s  and   0.5s
  respectively.  Between time positions  0.1 and  0.5 the  window size
  will be interpolated linearly between 0.02s and 0.03s

  Automatic Windowsize determination:
  -----------------------------------

  If the  command line  includes an F0  bpf this  bpf can be  used to
  automatically adapt  the window  size to the  local f0  value. This
  option is  intended for monophonic sounds.  The calculation applied
  to  derive the window  size M  in seconds  from the  F0 bpf  is the
  following 
 
%s
  M = pf / min(f0max, max(f0min, f0(mc, T)))
%s  
 
  The value f0(channel,  currtime) is the value of  the f0 breakpoint
  function  of the  f0 masterchannel  at time  T.  The  parameters pf
  (periodfac), fm  (f0min), fM (f0max) as well  as mc (masterchannel)
  can be  controlled by the  -Mauto auto-params.  If f0max  and f0min
  are specified on the command line these 2 values are used to derive
  window size limits. In this  case the bpf wil be read incrementally
  as   needed.   Otherwise   the   complete  bpf   is   read   during
  initialization.  A complete specification would look like this

  ------ Example: 
 
      -Mauto  "pf 4, f0min 80, f0max 300, mc 0"
 
  Note that you can freely  mix short and long option names.  Default
  values are available for all parameters. They are 

%s
   masterchannel (mc)   =  0
   f0max (fM)           =  from bpf file
   f0min (fm)           =  from bpf file
   periodfactor (pf)    =  4
%s  

  The grid of window sizes to be used will be controlled by the length
  of the list of windowsizes to be used (see: %s), and by the limiting
  values derived from f0max and fmin.

----------------------------------------------------------------------~
leccmd:usage-winn =
-winn ::     %s                                              (Def: 10)
   
   Control the number of different windowsizes that will be used
   are used for processing with time varying windows (see %s).

   Example: -winn 20

   Use a list of 20 different windowsizes to cover the given range
   window sizes.

----------------------------------------------------------------------~

leccmd:usage-icps =
-icps [freq limit][,chan1,chan2,...] ::     %s             (Def: off)
   
   the  inter channel  phase  synchronization serves  to preserve  the
   stereo image  when multi channel audio files  are processed  with time
   stretching or  transposition.  The  frequency limit is  the highest
   frequency for that the inter channel phase relations are taken into
   account.  Because interaural phase relations are usually considered
   to  affect  perception only  up  to  a  frequency limit  of  around
   1000-1200Hz the frequency limit should be around this frequency. If
   no frequency argument is specfied the default value is 1200Hz.

   By  default  inter channel  phase  synchronization  is taking  into
   account all channels to find sinusoidal components that are emitted
   from the same  source. If more than 2 channels  are present a comma
   separated  list  of  channels  can  be given  that  determines  the
   channels  to be  used (channel  numbers start  at 1).  More  than 2
   channels can be specified in which case the phase relations will be
   preserved between all specified channels.

   ------ Example: -icps 1000
   
   Use inter channel phase synchronization to preserve the stereo image
   up to frequency 1000Hz.

   ------ Example: -icps 1200,2,4
   
   Use  inter channel  phase  synchronization to  preserve the  stereo
   image  between channels 2  and 4  in a  multi channel  sound signal
   having at least 4 channels up to frequency 1200Hz.

---------------------------------------------------------------------~

leccmd:usage-N =
-N<FFT size> ::              %s   
   
   specifies FFT size in samples. FFT size has to be a power of 2.  If
   the FFT size  is smaller than the window size, the  power of 2 that
   is  equal to or  larger as  the window  size will  be automatically
   selected. The FFT  size is used for both  tracks.  Note, that since
   supervp version 2.92.21  the default FFT size is  no longer a fixed
   number but it is given in terms of frequency oversampling (see %s).

   ------ Example: -N4096

---------------------------------------------------------------------~

leccmd:usage-Np =
-Np<FFT power> ::   %s                                         (Def: 0)
   
   specifies FFT  size relative  to the window  size. The FFT  size is
   always a power of 2 and it  has to be larger or equal to the window
   size.  The larger  the FFT size is compared to  the window size the
   more samples in the frequency  domain will be used to represent the
   spectrum. Because  the minimal  possible FFT size  is equal  to the
   window  size the  ratio  between  FFT size  and  windowsize can  be
   understood  as a parameter  that controls  the oversampling  of the
   spectral  representation.   The   value  FFt  power  specifies  the
   frequency domain oversampling in terms of a power of 2. In the case
   that two tracks are used the frequency domain oversampling will use
   the maximum window to determine the FFT size.


   ------ Example: -Np2

   use an fftsize equal to or larger than 4 times the window size.

---------------------------------------------------------------------~

leccmd:usageAna =

====================================================================
==================== Analysis modules%s =============================

There are many analysis modules available in SuperVP. All the analysis
will  cut the  sound signal  into overlapping  frames and  perform the
analysis on all  frames. Accordingly, the result is  always a function
of the frame  time.  Frame times are always assigned  to the center of
the signal segemnt tat has been used for the analysis.

Note, that you can only perform a single analysis type per run.
  
The available analysis modules are described below:
----------------------------------------------------
~
leccmd:usage-A =
-Aa[analysis_type] [] ::                                     (Def: fft)
   
   specifies the analysis module to  use in the processing chain.  You
   select the appropriate analysis for  track one with the -A flag and
   for track 2 with the -a flag. analysis_type is one of the following
   list.

   Short time Fourier transform (STFT) :
%s
   fft         = Spectrogram analysis or processing 
                 with or without envelope                       %s
   reasfft     = Spectrogram analysis with reassignemnt         %s
   freeze      = processing with freeze effect                  %s           
   newfreeze   = processing with  new (extended) freeze effect  %s
%s

   Envelope estimation :
%s
   ced         = discrete cepstrum (slow)                     %s
   ced_inv     = inverse envelope of discrete cepstrum (slow) %s
   lpc         = AR or linear prediction modeling             %s
   lpc_inv     = inverse  AR or linear prediction modeling    %s
   tenv        = true envelope                                %s
   tenv_inv    = inverse true envelope                        %s
%s

   Fundamental Frequency :
%s
   f0          = harmonic analysis   %s
   f0p         = pitched percussions %s
%s

   Formants :
%s
   formant_lpc = formant analysis using lpc AR model            %s
   formant_ced = formant analysis using discrete cepstrum       %s
   formant_tenv = formant analysis using true envelope          %s
%s

   Spectral peaks :
%s
   pic         = analysis of spectral peaks                    %s
   mask        = spectral analysis of spectral peaks with
               = perceptive features according to Terhard      %s
%s
--------------------------------------~
leccmd:usage-Afft = 
%s
fft                          :: 
fft  [[+]<max f0>Hz[,prec]]  ::                      
fft  [[+]<order>tT[,prec]]   ::                              
fft  [order]                 :: %s                           (Def:  30)

   Fast Fourier transform.  The optional argument specifies parameters
   for spectral envelope estimation  (see: %s).  The spectral envelope
   estimator  is either  LPC (Def:)  or the  true  envelope estimator.
   True  envelope is  selected if  either  the order  is specified  in
   appending a t,T  or Hz.  The given order will  be used to determine
   the   order  of   the  selected   spectral  envelope   model.   For
   specification  of true  envelope  cepstral order  see the  examples
   below.   The plus sign  in front  the order  selection of  the true
   envelope estimator  will adaptively  select an optimal  order given
   the present f0  (see: %s, %s). The following value  in Hz or number
   of coefficients, will be used to derive the minimum order that will
   be used for unvoised signal segments  (when f0 = 0). The model will
   be used to estimate the  spectral envelope and prewarp the envelope
   such that after transposition  the envelope stays unchanged.  Note,
   that  the spectral envelope  prewarping will  only be  performed if
   transposition has  been specified by means  of -transke.  Similarly
   envelope scaling is performed only of the -envscal option is given.

   ------ Example: -Afft

   FFT analysis  without specification of the  spectral envelope model
   and order.

   ------ Example: -Afft 25  
   
   uses  LPC  and  order  25  for the  preservation  of  the  spectral
   envelope.

   ------ Example: -Afft 25t  or -Afft 100Hz

   uses   true   envelope   cepstrum    model   with   order   25   or
   samplerate/(2*100)  for  the   estimation  and  prewarping  of  the
   spectral envelope.

   ------ Example: -Afft 25t,1  or -Afft 100Hz,0.5

   uses true envelope cepstrum model with order as above but with true
   envelope  convergence criterion  of  1dB or  0.5dB  instead of  the
   default values of 2dB respectively.

   ------ Example: -Afft +25t  or -Afft +100Hz

   uses true  envelope cepstrum model with adaptive  order larger than
   25 or  samplerate/(2*100) for the estimation and  prewarping of the
   spectral  envelope. The specified  minimum order  will be  used for
   unvoiced segments where F0 is 0.
          
--------------------------------------------------------~
leccmd:usage-Areasfft = 
reasfft  :: %s

    Reassigned Fast  Fourier transform creates  reassigned spectrogram
    according to Auger/Flandrin.   The reassigned spectrogram improves
    the  visualization of  the quasi  stationary sinusoids  and abrupt
    transients in the spectrogram. It can only be used for analysis.

    ------ Example: -Areasfft 

--------------------------------------------------------~
leccmd:usage-Alpc = 
lpc [order] ::      %s                                 (Def: order 30)

    linear prediction analysis.  order is the number of poles. The lpc
    filter  is multiplied  by the  residual  energy to  have a  proper
    spectral representation.   See -ns/ -truelpc  switches for further
    information on lpc normalization.

    ------ Example: -Alpc 50

--------------------------------------------------------~
leccmd:usage-Alpc_inv = 
lpc_inv  [order]  ::       %s                          (Def: order 30)

    linear prediction  analysis with envelope inversion.  order is the
    number of poles.  LPC  analysis with inverted spectrum for inverse
    filtering (for  possible application see -G  option or -Fgabarit).
    The  inverse lpc  filter  is multiplied  by  the inverse  residual
    energy such  that it may  be used to create  normalized excitation
    signal with the  -Gmul mixer.  If you apply  inverse lpc filtering
    using  the  same signal  for  both  tracks  you create  an  energy
    normalized excitation signal that may be used as excitation for an
    lpc  spectral  envelope  obtained  with a  second  -alpc  analysis
    recreating the  energy contour of the related  second signal.  See
    -ns/   -truelpc   switches   for   further  information   on   lpc
    normalization.
   
    ------ Example : -Alpc_inv 50

--------------------------------------------------------~
leccmd:usage-Afreeze = 
freeze [nbframes] ::   %s                           (Def: nbframes 30)

    Collect  frequency statistics  for  nbframes and  then freeze  the
    amplitudes  at  frame  nbframe  and  modulate  the  phase  of  the
    synthesized frequencies according the frequency tables gathered so
    far.

    ------ Example : -Afreeze 42 

--------------------------------------------------------~
leccmd:usage-Anewfreeze = 
newfreeze [parfile|parstring] :: %s
 
    freeze the  sound at  the given time  instances for  the specified
    duration.   Multiple freeze  points  can be  established with  the
    newfreeze modul.

    Parameter string for each freeze point defines :

     start, duration, stat_length

    where

%s
    start       : specifies the start time of the freeze
    duration    : specifies the duration of the freeze
    stat_length : specifies the duration over which frequency
	          statistics for each frequency bin
	          are gathered before the freeze
%s

    All  values  are specified  in  seconds.   The  parameters may  be
    specified on  the command  line as a  sequence of  comma separated
    floating  point values or  in a  parameter file  as a  sequence of
    white space separated floating point values.

    After each  freeze the  original sound is  continued. If  the last
    character of  the parameter string  is the character e  then after
    last  freeze  period  the  sound  simply decays  to  zero  without
    continuing  with  the original  sound.   The frequency  statistics
    tables  can collect  a maximum  of  100 frames.  Time ranges  that
    extend over more frames are simply reduced to fit this limit.  The
    frequency  statistics  are used  to  modulate  the  phases of  the
    synthesized  frames. More  variation in  frequency will  result in
    increased  phase  modulation  which  in turn  increases  amplitude
    modulation which  may reduce  the synthetic impression  of freezed
    sounds.

    The example  below freezes the input  sound at time  0.1s for 0.4s
    without using the  frequency statistics and at time  0.5s for 0.6s
    modulating phases according to  the frequency variations seen over
    the last  0.1s The  sound ends after  the second freeze  by simply
    decaying to zero within half the size of the analysis window.  For
    the  same result  the  freezefile would  contain  the same  string
    however,  replacing the  commas  by white  spaces.  The  newfreeze
    module supports phase synchronization see -P.

    ------ Example : -Anewfreeze 0.1,0.4,0.,0.5,0.6,0.1,e
    ------ Example : -Anewfreeze freezefile
------------------------------------------------~
leccmd:usage-Apic = 
pic [theshold] [nnumber]::   %s          (Def: no threshold, all peaks)

   peak detection.
   
   threshold is in dB attenuation  below the peak amplitude. A peak is
   only  taken if  its  maximum is  at  least threshold  dB above  the
   neighboring minima.   number is  the max.  number  of peaks  in the
   output,  the  peaks  selected   are  the  peaks  with  the  largest
   amplitude.   For  output they  are  sorted  according to  frequency
   (attention: no blank between n and value)
            
    ------ Example: -Apic 30 n20
    
    detect  20 strongest peaks  that have  amplitude larger  than 30db
    above the two neighboring minima.

------------------------------------------------~
leccmd:usage-Aced = 
ced [order] ::    %s                                   (Def: order=30)

    discrete cepstrum analysis. Provides a spectral envelope.  default
    order is

    ------ Example: -Aced  55 or  -Aced 100Hz

    Use 55 (first case) or  fftsize*100/samplerate as the order of the
    cepstrum.    

---------------------------------------------------~
leccmd:usage-Af0 = 
f0 [fm<Min>,][fM<max>,][F<Fmax>,] %s ......
... [sn<thresh>,][smooth<ord>,][E[wei],][M[specmatwei],][primes<1/0>,][wqsrt<1/0>,][cgn<normfac>,] ......
... [n<number>,][C,][Cdem,][Cwf<factor>,][Cnp<limit>,][Cws<step>] :: 

     pitch detection

%s
     fm     : is followed by minimum value for pitch in Hertz (Def: 50)
     fM     : is followed by maximum value for pitch in Hertz (Def: 1000)
     F      : is followed by maximum frequency in spectrum (Def: 3500)
     sn     : is followed by noise threshold in dB (Def: 50)
     smooth : is followed by median smoothing order (Def: 1 (no smoothing))
              smoothing order is enforced (rounded up) to be uneven!
     E      : is followed by envelope smoothness weight of f0 scoring 
              algorithm                        (Def: 0.14)
     M      : is followed by spectral match weight of f0 scoring 
              algorithm                        (Def: 0.26)
     cgn    : is followed by centroid position normalization factor     (Def: 40)
              can be either : 
                - a positive value, that are  directly used as  normalization factor
                - a value in the range [-1,0] meaning to use (max_freq/f0_min)   as  normalization factor
                (this is deprecated and will  be removed from the f0 library !)
                - a negative value < -1.1 in which case the normalization factor is derived
                from the signal spectrum -cgn*std::max(ffloat(1),cg /fmax)
                where cgn is the parameter value, cg is the frequency  of the spectral centroid of the
                spectral peaks above noise threshold and fmax is the frequency of the peak representing
                the amplitude maximum of the spectrum.
     primes : followed by a boolean that selects a spectral match algorithm based on crosscorrelation
              between expected and observed peak positions and amplitudes that takes into account prime partial 
              positions only and uses harmonic weighting of partial positions. 
     wfexp  : exponent to control frequency dependent weighting of peaks,  
              only used in the prime matching algorithm. (Def: 0.5)
     n      : is followed by the number of f0 estimates that will be provided
              for each frame (Def: 1)
     C      : triggers the computation of an alternative confidence rating that
              will replace the usual pitch confidence value: "coeff" in ASCII
              and binary format, "score" column (third) in SDIF; this rating is
              not applicable when more that one estimate is requested
     Cdem   : enables demodulation when computing the alternative confidence
              rating
     Cwf    : is followed by the number of periods of the f0 estimate that will
              be used for the periodicity component of the alternate confidence
              rating (Def: 4)
     Cnp    : is followed by the number of partials that should be considered
              when deciding whether demodulating would enhance the accuracy of
              the alternate confidence rating, it implies Cdem (Def: 10)
     Cws    : is followed by window size quantization step used to generate
              windows of increasing size for the alternate confidence rating,
              as such it must be greater than 1 (Def: 1.2)
%s

     If  E,  M, cgn,  is  specified, primes or wsqrt are onthe  score based  f0 algorithm  is  used,
     otherwise the histogram based f0 algorithm.

     When primes is activated the spectral matching is limited primes, and
     is based on a number of features found in the swipep algorithm by
     Arturo Camacho (University of Florida, 2007) using however not the spectrum directly but peaks
     to evaluate f0 candidates. The influence of peaks is weighted accoring to their frequency 
     following pow(peak_freq,wfexp).
     The M, E, cgn parameters are ignored in this case. 

     There is no blank between  the parameter name and its value.  The
     output file will be in SDIF format as long as -Oa is not given

    ------ Example: -Af0 "fm100, fM1000, F2500, sn60, smooth3"
    ------ Example: -Af0 fm10,sn25
    ------ Example: -Af0 fm10,sn25,M

-------------------------------------~
leccmd:usage-Af0p = 
f0p [fmMin,][fMmax,][s<0/1>,][t<tunefac>,][d<duration>]:: %s

   pitch detection for pitched  percussions. Detect transients and for
   each pair  of transients detect  the prominent pitch. The  pitch is
   determined  by the  strongest sinusoidal  peak of  the  average log
   amplitude  spectrum   with  average  duration   given  by  duration
   parameter.  The  F0 provided as  output is tunefac*F_sin,  which is
   the product of the tuning factor and the frequency of the strongest
   sinusoid.  Tuneing  factor  !=  1  is necessary  for  some  pitched
   percussion  instrumlents like  xylophones,  that are  tuned to  the
   octave of the target note.
   
   Note, that  transient preservation is performed to  detect the note
   events  transient.   To  select  appropriate   transient  detection
   parameters (see %s).

%s
     fm  : is followed by minimum value for pitch in Hertz (Def: 50)
     fM  : is followed by maximum value for pitch in Hertz (Def: 2000)
     s   : output pairs of F0s, one at the note onset and one before the
           next onset.
     t   : is followed by the tuning factor (Def: 1)
     d   : is followed by the average duration in seconds
%s

     There is no blank between  the parameter name and its value.  "s,
     d and  t" can  as well be  the corresponding  capital characters.
     The output  file will  be in SDIF  format as  long as -Oa  is not
     given

    ------ Example: -Af0p "fm100, fM1000,s1,t0.5,d0.1"

-------------------------------------~
leccmd:usage-Aformant_lpc = 
formant_lpc [nnumber] [lpc order] :: %s      (Def: number=5, order=15)

   formant detection  from a spectral  envelope computed via  lpc.  In
   this analysis a formant is understood  to be a peak of the spectral
   envelope calculated  using the lpc analysis module.   number is the
   max. number  of formants to  detect (ordered  according to
   increasing frequency) (no  blank between n and value)  order is the
   lpc order. 

 ------ Example: -Aformat_lpc n3 10

-------------------------------------------~
leccmd:usage-Aformant_ced = 
formant_ced [nnumber] [ced order] ::  %s      (Def: number=5, order=45)

   formant detection  from a spectral envelope  computed with discrete
   cepstrum.  In this analysis a formant is understood to be a peak of
   the  spectral envelope  calculated using  the ced  analysis module.
   number is the  max number of formants to  detect (ordered according
   to increasing  frequency) (no blank  between n and value)  order is
   the ced order.

    ------ Example: -Aformant_ced n16 55

--------------------------------------------~
leccmd:usage-Aformant_tenv = 
formant_tenv [nnumber] [[+]order[,prec]] ::  %s   (Def: number=5, order=30, prec = 2)
formant_tenv [nnumber] [[+]<maxf0>Hz[,prec]] ::  

   formant detection  from a spectral envelope  computed using true envelope.  
   In this analysis a formant is understood to be a peak of
   the  spectral envelope  calculated using  the ced  analysis module.
   number is the  max number of formants to  detect (ordered according
   to increasing  frequency) (no blank  between n and value).
   For explanation on tenv parameters see %s.

    ------ Example: -Aformant_tenv n16 +3,1

   formant estimation using f0 adapted envelope order with convergence
   threshold of 1db.

--------------------------------------------~
leccmd:usage-Aced_inv = 
ced_inv [order] ::    %s                                     (Def: 30)

   discrete cepstrum  analysis with  envelope inversion.  Use  it like
   CED analysis, however, the spectral enevlope will be inversed.  For
   whitening filter (see -G option).  Order is the cepstrum order. For
   order interpretation see -Aced.

    ------ Example : -Aced_inv 50  or  -Aced_inv 100Hz

------------------------------------------~
leccmd:usage-Atenv =
tenv [[+]order[,prec]]:: %s                (Def: order = 30, prec = 2) 
tenv [[+]<maxf0>Hz[,prec]]:: 

    true envelope cepstrum  analysis.  Estimates the spectral envelope
    using  the  true envelope  cepstral  model  with  given order  and
    spectral precision. In case the  optional +sign is set, the order
    will be adapted to the  fundamental frequency of the sound signal
    following the formula

    opt_order = srate / f0 * 0.5 

    The  f0 can  either  be specified  using  the %s  flag  or can  be
    calculated internally.   If order adaptation is  selected then the
    order  given by means  of order  value or  maxf0 will  establish a
    constraint on the order. That means the selected order will always
    be larger  then the  given order or  the optimal order  related to
    maxf0. 

    The   precision   establishes   the   convergence   criterion   in
    dB. Iterative estimation of the envelope will stop of the observed
    spectrum  is nowhere  lerger  then prec  dB  avbove the  estimated
    envelope.
    
    ------ Example: -Atenv 55 or -Atenv 100Hz 

     Use 55  (first case)  or samplerate/(2*100) as  the order  of the
     cepstrum.

    ------ Example: -Atenv +55 or -Atenv +100Hz,1 

    Use  adaptive order  larger than  55 (first  case) or  larger than
    samplerate/(2*100) as the order of the cepstrum.

-----------------------------------------------------~
leccmd:usage-Atenv_inv = 
tenv_inv [[+]order[,prec]]::    %s          (Def: order = 30, prec = 2) 
tenv_inv [[+]<maxf0>Hz[,prec]]:: 

   true envelope  cepstrum analysis  with envelope inversion.   Use it
   like  tenv  analysis,  however,  the spectral  enevlope  will  be
   inversed.   For whitening  filter (see  -G option).   Order  is the
   cepstrum order. For order interpretation see %s.  

  ------ Example : -Atenv_inv 50 or -Atenv_inv 100Hz

   Please see the help about output selection %s  for the formatting 
   of the output data.
---------------------------------------------------------------------
~
leccmd:usage-Amask = 
mask [list] [threshold] [nnumber]::    %s             (def: list = all)

    Terhardt algorithm for  calculating perceptual characteristics for
    spectral peaks. List is a list of words in:

%s
    amp     : calculates data needed to output snd pressure 
                      excess
    weight  : calculates data needed to output weight
    freq    : calculates data needed to putput true pitch
    all     : calculates all of the above      
%s
    threshold (see %s ) number  is the max.   number of  peaks, for
    mask  peaks are  selected according  to their  weight.   (no blank
    between n and value)

    ------ Example: -Amask weight 10 n20

--------------------------------------------------
%s~
leccmd:usage-tlpc =
-truelpc :: 
   
   do not apply  any normalization after lpc in  the analysis section.
   Intended for using lpc analysis for lpc filtering.

---------------------------------------------------------------------~
 
leccmd:usage-Z =
-Z :: 
   performs a resynthesis (inverse FFT and overlap/add)
---------------------------------------------------------------------~

leccmd:usage-R =
-Rr<samplerate> :: 

   sampling rate
   needs  to  be specified  if  raw  (header-less)  sound samples  are
   treated. If -R  or -r flag is given  the automatic determination of
   the sound format  is skipped!  For all other  cases the -R/-r flags
   should  not be  used to  allow the  automatic determination  of the
   sound  file format!   The raw  snd file  samples format  is  4 byte
   floating point encoding.
   
   ------ Example: -R44100

   select sound input to be raw float samples with 44.1kHz samplerate.
 
---------------------------------------------------------------------~
leccmd:usage-P = 
 -Pp[n/0/1] ::          %s                             (Def: see text)
   
   controlles    phase   synchronization   and    possibly   transient
   preservation mode for time  dilation (see -D), transposition or the
   newfreeze   and   -Gcross  modules.    With   argument  "n"   phase
   synchronization and  transient preservation is  switched off.  With
   argument "0"  phase synchronization  is switched on.   The argument
   "1" enables  transient detection  and preservation.  -P  applies to
   the first track and -p to the second track.

   Default Values :
   
   When treatments  like time dilation (see -D),  any transposition or
   the  newfreeze  and  -Gcross   modules  are  selected,  then  phase
   synchronization is by  default switched on. In all  other cases the
   default   i  s  phase   synchronization  switched   off.  Transient
   preservation is never switched on by default!

   Phase synchronization generally improves amplitude reproduction for
   all sinusoidal components of  the sound and decreases the phasiness
   when  processing  non stationary  sounds.  The  off  state is  only
   available for  backwards compatibility and  simple comparision with
   historical  versions of  the phase  vocoder.  This  switch  will be
   ignored if no dilation/newfreeze is requested.

   Transient preservation localizes transients peaks in time/frequency
   domain  and re-initializes phases  for the  related bins  after the
   transient  has  passed  in order  to  keep  the  wave form  of  the
   transient.

   Further information on transient detection and preservation
   is available via the transient detection help 
   (see %s and the flags -td_thresh/-td_G/-td_nument/-td_band/...).
   
----------------------------------------------------------------------

-parover <value>  ::            %s                             (Def: 1)

   adapts the samplerate of  the transposition parameters with respect
   to the analysis step  size (-I).  The parameter oversampling factor
   has  to  be  larger  then   1  and  smaller  then  128.   Parameter
   oversampling   is  especially  useful   when  a   transposition  is
   compensating or imposing the fundamental frequency. Oversampling of
   the transposition parameter allows  to increase the sampling of the
   parameter trajectory with nearly no cost.

   ------ Example: -parover 8

----------------------------------------------------------------------

-ps_fac  <value> ::                                        (Def: 0.25)

   Controls the  inter peak phase synchronization by  means of setting
   the frequency deviation  limit up to which the  different bins of a
   spectral peak will be synchronized with the central bin of the same
   peak. value  specifies the  frequency  deviation  in  terms of  the
   bandwidth  of the  mainlobe of  the analysis  window.   The default
   value synchronizes all bins that  have a frequency estimate of less
   than a quarter  of the bandwith of the  mainlobe. Increasing ps_fac
   will achieve  better synchronization for spectral  peaks related to
   sinusoids  with  time  varying  frequency.  At the  same  time  the
   probability  that  a  synchronization  between  unrelated  bins  is
   performed increases.   The exact value of this  parameter is rather
   uncritical.

----------------------------------------------------------------------

-ps_cross  <value> ::                                       (Def: 0.3)

   old name for %s.

----------------------------------------------------------------------~

leccmd:usage-W =
-Ww<type> ::         %s                                  (Def: hanning)
   
   specifies analysis window type. The supported analysis window types
   are:

%s
       rectangular (rect, rectangle)
       triangular  (triangle)
       hamming
       hanning
       blackman
       exactblackman
%s

    ------ Example: -Wblackman

---------------------------------------------------------------------~

leccmd:usage-J =
-J<type> ::    %s                        (Def:same as analysis window)
   
   Note:  Choosing  a synthesis  window  different  from the  analysis
   is no longer supported.
   
----------------------------------------------------------------------~

leccmd:usage-H =
-H<samplerate> :: 
   
   Changes the  samplerate of the output sound.  Since version 2.97.19
   this option can be combined with all other treatments. If you don't
   need other treatments you better don't use -A and -Z.
  
   ------ Example: -H32000

   Simply changes the samplerate

   ------ Example: -H32000 -trans 100 -A -Z

   Changes the samplerate nd transposes the input sound by 100 cent.
   This requires analysis synthesis flags to be present.


----------------------------------------------------------------------~

leccmd:usage-resS =
-resS <value> ::                                           (Def: 70dB)

   specifies stopband attenuation of the interpolation filter used for
   resampling The  window size  and oversampling of  the interpolation
   filter  are   automatically  adjusted  to   achieve  the  requested
   attenuation of  aliasing resulting from  the interpolation process!
   To prevent  excessive filter sizes  attenuation of more  than 140dB
   are not recommended.

----------------------------------------------------------------------~

leccmd:usage-resM =
-resM <value> ::                                              (Def: 0) 
        
   Maximum transposition in cents that the transposition module should
   take care of. Normally this value can be derived from the parameter
   files  of the  (see:  -trans,-transke,-transnc).  If  transposition
   parameters are changed on the fly (real time control) the parameter
   files will not provide the necessary info and the maximum supported
   transposition  should be  given with  the -resM  flag.   Note, that
   higher transpositions will work correctly, however, may not achieve
   best quality.

----------------------------------------------------------------------~

leccmd:usage-avseg = 
-avseg <file or pair of time values> :: 

   computes averaged  spectra for the  time segments specified.   If a
   file name  is given this file  should contain pairs of  start - and
   end times  of the  segments. The  segments can also  be given  as a
   comma separated  list of  times directly on  the command  line.  If
   only a single number is  given single segment is formed that starts
   at the  time given and continues  until the end of  the sound.  The
   segment positions  need to be  in increasing time order  and cannot
   overlap.

   You need  to select the output  options -OM1 or -OM2  to obtain the
   spectral  averaged  output.   See  %s and  
   -OM  for  further information on the output format.
	
   ------ Example: -avseg 1.0,1.1 -OM1

   adds  an  segment  lying between  1.0s  and  1.1s  to the  list  of
   segments.  and stores the averaged spectrum in the output file.
   
----------------------------------------------------------------------~
leccmd:usage-transient = 
======================================================================
======================  Transient detection%s =========================
     
SuperVP makes  use of transient  detection in a number  of situations,
the  most  prominent  ones  are, transient  preservation  during  time
stretching, and onset detection.  The command line parameters that are
used to  configure the transient detector  all start with  a -td_. The
exceptions  to this  rule are  the  two commands  to enable  transient
detection: For onset detection you have to request the onset detection
output by  means of -OT,  the results will  then be stored in  an SDIF
file. For transient preservation or transient remixing you have to add
a 1 to the phase synchronization flag to enable transient preservation
during processing.

The list of flags that modify the transient estimator is

basic detection:
%s
  -td_int     - select mode for classification of individual spectral peaks 
                as transient or non transient.
  -td_thresh  - adjust threshold for peak mean time for transient peaks.
  -td_G       - adjust confidence threshold for transient events
  -td_band    - select frequency band to use for transient detection
  -td_nument  - select size of frequency sub-bands used for monitoring 
                transient states 
  -td_beatpos - get prior information for transient detection from 
                beat positions

filtering (selection) of transients:

  -td_minoff  - minimum offset between transient
  -td_mina    - minimum amplitude required for a transient to be detected
  -td_minren  - minimum relative transient energy for a transient to be detected
  -td_evstre  - select frequency band to use for relative energy calculation

multi channel:

  -td_nosync  - synchronize transient detection between the sound channels

transient remixing:
  -td_ampfac  - factor to apply to transient bins during restart
  -td_relaxto - factor to apply to stationary bins when transient 
                restart has relaxed
  -td_relax   - time constant to use to blend between transient 
                restart and stationary parts
  -td_forcerelax 
              - force instantaneous relaxation for all non 
                transient bins during restart

%s
----------------------------------------------------------------------~

leccmd:usage-td = 
--------------------  Basic transient detection  ---------------------
   
-td_int <value> ::                                             (Def: 5)

   switch selects the  method that is used to  increase the robustness
   of  the  classification  of   spectral  peaks  into  transient  and
   non-transient ones.

%s
         value      |    method
         ==============================
         0          | calculate mean time directly from the peak
         ---------------------------------------------------
         1-4        | extend mean time calculation to use
                    | at least the width of a stationary peak
                    | extensions always include complete neighboring 
                    | peaks, extend directions are selected
                    | according to
         1          |   minimum peak width 
         2          |   higher amplitude of peak max 
         3          |   higher mean energy within stat mainlobe_width/2 
         4          |   higher mean energy within stat mainlobe_width 
         ---------------------------------------------------
         5          | require a transient peak to have signal duration
                    |    below the duration of the analysis window 

%s
	
   ---- Example: -td_int 5

   Use duration requirement to remove unreliable transient peaks.
   
--------------------------------
     
-td_thresh <value> ::                                       (Def: 1.4)

   adjust threshold of peak mean time (center of gravity of the energy
   of the signal related to the peak) to detect a transient peak . The
   mean  time to end  a transient  is related  to the  mean time  of a
   simple ramp  covered by the  analysis window. The amount  of access
   mean  time  to detect  a  start of  a  transient  is determined  by
   td_thresh. By  increasing td_thresh the transients need  to be more
   pronounced with respect  to the noise background to  be detected as
   transient. The  parameter is required  to be above 1  because other
   wise  the  transient  would  be  ended before  it  began.   Optimal
   thresholds depend on the noise  in the signal and on the confidence
   threshold determined by -td_G, however,  a range between 1.2 2.5 is
   usually reasonable.
	
   ---- Example: -td_thresh 2

--------------------------------

-td_G <value> ::                                            (Def: 2.5)
   
   confidence  factor  to use  when  comparing  the  number of  attack
   transient peaks in the  transient statistic bands current frame and
   comparing it to the number of attack transients in the related band
   in the previous frame.  The  larger the value the higher the number
   of attack  transient peaks in the  current frame needs to  be to be
   detected as  part of  an attack transient.   The value  denotes the
   access of the transient peak frequency estimated in previous frames
   in terms of the standard deviation.


   ---- Example: -td_G 2

   Reduce transient attack confidence  by requesting only an access of
   2  times  the standard  deviation  for a  band  to  be detected  as
   transient.

---------------------------------

-td_band <value,value> ::                       (Def: 0,sample rate/2)

   band  in Hz  used  for transient  detection.   only spectral  peaks
   within the band will be used to determine transient events.

   See: -td_nument

---------------------------------

-td_nument <value> ::                                        (Def: 10)

   smallest  bandwidth used  for the  statistical monitoring  of noise
   related background  transient activity. The  bandwidth is specified
   in terms  of the  mainlobe width of  a stationary  sinusoidal peak.
   Optimal detection  performance is achieved if the  bandwidth of the
   transient event  equals the size of the  observation band.  Smaller
   bands will decrease the signficance of the transient event compared
   to background noise related fluctuation of transient peaks.  Larger
   bands  will reduce  the impact  of  the transient  compared to  the
   theoretical maximum (all bins in a band are transient).  Therefore,
   a set of bandwidths covering the bandwidth specified via -td_nument
   up to the  width of the complete frequency  band used for transient
   detection (-td_band) will be used.

   The smaller the minimum bandwidth  of the bands used to monitor the
   transient  peak probabilities  the better  a very  narrow transient
   event may be detected, however, at the same time the possibility to
   detect  a false  transient due  to  random variations  in the  band
   increases. 
  
    ---- Example: -td_nument 30

   requires to collect transient statistics  in bands that may hold 30
   stationary sinusoidal peaks.

   See: -td_G


---------------------------------

-td_beatpos <file1>[,GRed1,dur1,sub1][::<file2>[,GRed2,dur2,sub2] ::  (Def: Gredx=0.1,durx=0.015s,subx=1)

   modify  required transient confidence  (-td_G) using  beat position
   markers.   Beat position  markers  a read  from  ASCII files.   The
   information  for  the  2  tracks  are separated  by  double  colons
   "::". The  marker files simply  specify beat positions  in seconds.
   Around each  beat position  the confidence that  is required  for a
   transient  is  lowered according  as  specified  by the  respective
   parameter  Gred. The  reduction  has  a time  duration  given by  a
   Gaussian  function with std  deviation given  by the  dur parameter
   (specified in seconds). Note, that the Gaussian priors are cut such
   that they will  never overlap Beat positions can  be sub sampled to
   take  into account  intermediate rhythmic  positions  (Tatum).  Sub
   sampling of  the beat positions  is controlled by the  sub sampling
   parameter sub, which is an integer >= 1.

  
    ---- Example: -td_beatpos file.beat,0.2,0.005,2

    reads beat positions from ASCII file file.beat and reduce required
    confidence by 0.2 around each  beat position taking a sub division
    of beat  marks by factor 2  and a std deviation  of the confidence
    reduction of 5ms.

   See: -td_G


----------------------------------------------------------------------
-------------------  Multi channel synchronization -------------------

-td_nosync  ::                 (Def.: sync transients between channels)
   
   requires  to  not   syncronize  transients  detected  in  different
   channels of a multi channel  audio file. Per default the transients
   of the different channels are synchronized to prevent the artifacts
   resulting  from  the fact  that  the  transients  in the  different
   channels may  be detected  at different places  or may  be detected
   only in one of the channels.

   ---- Example: -td_nosync

----------------------------------------------------------------------
-------------  Transient and stationary component remixing -----------

-td_ampfac <value> ::                                        (Def: 1.)

   specifies  factor to be used to scale transients. Note, that since
   2.94.9 the amplitude restart compensatin is controlled automatically
   taking into account the oversampling or framestep.

   Now, td_ampfac is will mutliply to the automatically derived value
   such that effective transient rescaling can be obtained.

   ---- Example: -td_ampfac 1.5

   Multiply transient amplitudes by factor 1.5 such that transient
   will appear slightly enforced.
	
-----------------------------

-td_relax <value> ::                                           (Def=-1)

   specfies time  constant in ms with that  the amplitude compensation
   indicated by td_ampfac should relax .
         
   The value  -1 indicates that  no relaxation should be  performed in
   which case the  value indicated by -td_relaxto is  ignored.  In all
   other cases  the amplification of transient regions  relaxes with a
   time constant specified. The  initial multiplication factor after a
   transient has been detected  is td_ampfac.  This factor relaxes too
   the  factor  indicated  by  td_relaxto.  The  minimum  and  maximum
   relaxation time constants are 0ms, and 9000ms respectively.

   ---- Example: -td_relax 100

-----------------------------

-td_relaxto <value> ::                                        (Def.: 1)

   specfies  the amplification  factor that  the  transient multiplier
   will have after complete relaxation.
    
   This factor can be used to control the part of the stationary sound
   that  will rest  in the  output when  transient extraction  is with
   transient relaxation  with user specified  relaxation time constant
   is applied.

   ---- Example: -td_relaxto 0

   Removes all components not related to a transient.
   
-----------------------------

-td_forcerelax :: 

   force previous transients  to instantaneously relax into stationary
   state whenever a new transient arrives.

---------------------------------------------------------------------
----------------- Selection of prominent transients -----------------

-td_mina <value> ::                                           (Def: 0)

   specifies  minimum  amplitude that  an  attack  transient needs  to
   achieve to  be detected.  The  given amplitude is interpreted  as a
   amplitude  value normalized by  the maximum  peak amplitude  of the
   amplitude range (32768 for 16-bit int samples, 1 for float samples)
   and  the  range of  the  parameter  is  [0-1].  This  parameter  is
   especially  effective  for filtering  transient  events in  silence
   regions  with very  weak noise  events.  Reasonable  depend  on the
   background noise  level - this  will generally be below  -40db such
   that -td_mina should  be below 0.01. Instead of  a constant value a
   bpf file with time varying mina values can be given.

   The -td_mina  parameter is  the only transient  detection parameter
   that affects  the spectral  flow transient detector  (selected with
   -OF).

   ---- Example: -td_mina 0.01

---------------------------

-td_minren <value> ::                                         (Def.: 0)

   minimum relative energy  difference an attack has to  produce to be
   detected as an attack. The relative energy difference is calculated
   as  the energy  difference  between the  transient  bins after  the
   attack  and  before  the  attack  normalized by  the  total  energy
   difference.  The  energy difference is calculated  in the frequency
   bands according  to -td_evstre. Instead  of a constant value  a bpf
   file with time varying mina values can be given.
    
   ---- Example: -td_minren 0.1

   requires a  normalized energy  difference due to  the attack  of at
   least 10%s of the energy in each reference band.

----------------------------

-td_evstre <value> ::                                        (Def.: 1)

   selects   reference   frequency   bands  for   transient   strength
   evaluation. The bands are:

   value=0 : the statistical bands as given by -td_nument
   value=1 : the selected transient analysis band as given by -td_band
   value=2 : the whole frequency band 
   
   If you use the values  as described above, then the attack strength
   will be calculated  from the amplitude values in  the current frame
   where for  the transient  frames the amplitude  values of  the last
   frame before the transient will be subtracted.  If you add 4 to the
   mode value  then the attack  strength is calculated using  only the
   amplitude values of the current frame. 

   Problems with the different methods are:

   value=2 :  if the  transient detector band  is limited to  a narrow
      frequency range (for example detect only bass drum events), then
      the transient  strength should not compare  the transient energy
      to the  complete energy (which depends on  all other instruments
      and therefore  may vary  arbitrarily) but to  the energy  in the
      band where the transient takes place (-> value=1).

   value=1 :  for this setting  the minren threshold changes  with the
      band limits,  (with value=2 the  band limits will not  effect the
      minren threshold).
   
   value=0 : because  the subbands are rather small  there will always
      be one  having a rather  large attack strength. So  filtering is
      les effective.

   

   ----- Example: -td_evstre 2

----------------------------

-td_minoff <value> ::                                        (Def : 0 )
        
   minimum distance  between two detected transients.   Within a range
   of +-value  only the strongest transient according  to the relative
   energy difference (-td_relen) is selected. All other transients are
   ignored.
    
   ----- Example: -td_minoff 0.1

   requires   100ms  of  time   difference  between   two  consecutive
   transients.

----------------------------------------------------------

-td_declick <value> ::  (experimental)
   
   specifies  maximum  duration  of  click  events  in  seconds.   All
   transients  that start sound  events of  duration shorter  than the
   given duration will be removed from the signal.

   ---- Example: -td_declick 6.3492e-04

   Removes clicks that have  been detected as transients with duration
   shorter than 0.63492ms.

   Note  that click  removal  is related  to  transient detection  and
   therefore it will  only work if the -D (with  any argument) and the
   -P1 flag have been given on the command line.

----------------------------------------------------------------------~

leccmd:usage-envintro = 
======================================================================
=============== Envelope estimation and modification%s ================

There  exits a  number of  methods for  spectral  envelope estimation.
SuperVP  immplements  LPC,   True  Envelope,  discrete  Cepstrum.  For
harmonic  and  mixed harmonic  with  noise  signals  best results  are
usually achieved  with the True envelope method,  a cepstral smoothing
technique  that   can  be   interpreted  as  an   optimal  bandlimited
interpolation  of the  envelope  examples that  are  obtained via  the
harmonic partials of the  signal.  For formant estimation and tracking
or for estimation of noise  envelope the LPC method may provide better
estimates.

The  following flags  can be  used to  control the  estimation  of the
envelope and its use: 

Flags controlling the use of the envelope:

%s
 -envp        : use envelope phase when modifying spectral envelopes %s
 -envscal     : scale the envelope and mean level by independent 
                factors                                              %s
 -envscal-no  : (deprecated, use -envscal instead)
                scale the envelope (including signal energy) by a    
                factor, (creates normalized residual)                %s
 -envtr       : distort envelope while preserving                    %s
 -envwarp     : piecewise linear warping of the spectral envelope    %s
 -envpl       : preserve preceived loudness after envelope 
                processing                                           %s

 True envelope parameters:

 -envmo       : select true envelope mode                            %s
 -envf0sc     : scale automatically true envelope order              %s
 -envorder    : specify an ascii bpf file for true envelope order    %s
 -envf0max    : specify an ascii bpf file for f0max                  %s

 Lpc envelope parameters:

 -lpcorder    : specify a const value or ascii bpf file for lpc order %s

 Glottal pulse model:

 -envgl       : use Liljencrants/Fant glottic excitation model 
                to seperate vocal tract and source envelope.         %s
 -envglnew    : target paramters for glottic puls modification.      %s
 -envrd       : use Liljencrants/Fant glottic excitation model
                to seperate vocal tract and source envelope.         %s
 -envrdnew    : target paramters for glottic puls modification.      %s
 -envrd_par   : rd estimation parameters.                            %s
 -envgl_mrk   : glottal clusre instant estimation.                   %s

%s
-----------------------------------~

leccmd:usage-envmo = 
-envmo <modeflag>[::modeflag]  :: %s                                   (Def.: 513) 

   sets the  estimation mode for  true envelope analysis.  If  no "::"
   separator is given  the mode is used for  envelope estimators in al
   tracks. Otherwise  the value before the  "::" is used  for th first
   track and the value after the "::" is used for the second track.

   The  mode flag  is  an  integer with  the  bits encoding  different
   options.  The mode bits  that are used are bit 0 to  9 which can be
   combined  together to  select  the different  modi.  The result  of
   enabling the various bits are as follows: 
   
%s
   bit 0 (+/-1)  : enable  smoothing with  Hamming window  (NOTE: the
                   order  will   be  increased  such   that  the  same
                   effective  resolution as for  rectangular smoothing
                   will  be obtained!!  Bit  0 takes  precendence over
                   bit 2)
   bit 1 (+/-2)  : enable log mel scale frequency warping
   bit 2 (+/-4)  : enable smoothing with Nuttall window (NOTE: the order
                   will be increased such that the same effective 
                   resolution as for rectangular smoothing will be obtained!! )
   bit 3 (+/-8)  : don't use step size control (slow but may occcasinally
                   prevent overshoot) 
   bit 4 (+/-16) : use straightfoward non optimized algorithm (really slow)
   bit 5 (+/-32) : don't use sub sampling  (slow) 
   bit 6 (+/-64) : use sqrt of energy ration to control step size of
                   iterative algorithm   (slower, in some conditions
                   less overshoot, described in
                   icmc2005, if not set the dafx 2005 version is used
                   with step size control according to energy ratios) 
   bit 7 (+/-128): interpolate spectral peaks prior to env estimation
   bit 8 (+/-256): treat values vuf as unvoiced and use mean energy for 
                   envelope estimation
   bit 9 (+/-512): apply two  step envelope estimation, in  the first
                   step  envelopes are  calculated with  reduced order
                   (order *  0.5) and from the  resulting envelope two
                   synthetic peaks at 0Hz and half the sample rate are
                   constructed to fill  potential holes in the regular
                   sampling of  the envelope. In the  second step the
                   final envelope is estimated using the full order.
   bit 12 (+4096): in the case where the envelope is calculated using 
                   mel freqeucny scale the output envelope is kept in mel
                   scale representation and not transformed back into linear 
                   frequency scale. This bit is ignored if bit 1 (mel scale) 
                   is off.
%s

   for the default (mode==513) bit 0 is set such that smoothing with  
   hamming window is used. Default preSmoothFac is 2.

   ---- Example :   -envmo 0 
 
   switches off hamming windowing in cepstral domain and don't use
   presmoothing of the envelope.

   ---- Example :    -envmo 3  

    transforms to log frequency scale before envelope estimation.
         
----------------------------~
leccmd:usage-envf0sc = 
-envf0sc <scale_factor> ::  %s                              (Def.: 1.0) 

   automatically scale  calculated optimal envelope order.

   For true envelope estimation the optimal cepstra order is related to 
   the fundamental frequency. In general the optimal order is

   opt_order = srate / f0 * 0.5

   If all partials are present  (notably the partial at frequency 0!!)
   this  order achieves  an optimal  bandlimited interpolation  of the
   partial  sequence.  In  real  world sound  signals  the partial  at
   frequency  0  is hardly  present  such  that  the partial  sequence
   provides an irregular sampling of the envelope. The related problem
   for the bandlimited interpolation can  be solved either by means of
   pre-smoothing  (-envmo  >=512),  or  by  scaling the  order  by  an
   additional factor of 0.5.

   For very smooth or peaky envelopes the interpolation results can be
   improved by  means of  scaling the optimal  order (down  for smooth
   envelopes,  up for  peaky envelopes).  Clarinet like  sound sources
   require the  order to  be scaled down  by factor 0.5  because every
   second partial is  weak and therefore the envelope  is sampled with
   a period of 2 f0.
   
   The -envf0sc allows  to provide a fixed scaling  factor, which will
   be used  if adaptive  true envelope order  has been  requested with
   -Afft  +<minord>t/-Atenc  +<minord>  and  the  -F0  flag  has  been
   given. The optimal order will then be calculated according to

   order = srate / f0 * 0.5 * scale_factor

   The scale_factor has  to be from the interval  [0,2]. Values in the
   range  [0.2,1.2] are  reasonable  choices. Values  outside of  this
   range  may provide artistic  artifacts.  Even  if order  scaling is
   requested,  the  order  will  never  be  exceed  the  maxord  value
   specified with the -A flag.

   ---- Example:  -envf0sc 0.5

   reduces selected true envelope order 

------------------------------~
leccmd:usage-envp = 
-envp [<0/1>][::0/1] :: %s                                                  (Def: off)  

   In  normal operation  all envelope  treatment functions  affect the
   amplitude  spectrum only.  By means of  giving the  -envp flag  the
   envelope  can be  forced to  include phase  such that  the envelope
   represents a minimum phase filter.

   Without values,  this flag enables phase processing for both tracks
   if applicable.  A single value turns it on  (1) or off  (0) for the
   first or single track. A value after "::" affects the second track.

   If a single value  is specified,  the default for  the second track
   depends on the  mixer type:  it is the same as  the first track for
   "add"  and "cross", off for "amul", and on for "mul" and "pmul".
   
   This option  affects the envelopes  estimated via the LPC  and true
   envelope model only.

------------------------------~
leccmd:usage-envpl = 
-envpl <0/1>[::0/1] :: %s                                 (Def: 0=off)  

   Enable  renormalization  of  the  signal  spectrum  after  spectral
   envelope modification (%s, %s, %s, %s, ...) such that the perceived
   loudness  stays approximately  the same.   Loudness  calculation is
   done  using  a  simple  ear  filter  and  loudness  model.   Source
   characteristics  and masking  effects are  not taken  into account.
   Note that  loudness preservation does  not prevent the  signal from
   saturation due to modifcations  because signal amplitude may change
   considerably even if liudness is preserved.

   The parameter after "::" is used for the sound in the second track.

   ---- Example: -envpl 1 -transke 300

   Enable loudness normalization after transposition with envelope 
   preservation. 

------------------------------~
leccmd:usage-envgl = 
-envgl <te,am>[,ta,doscal][::te2,am2,[ta2,doscal2]]:: %s (Def: off)     


   Liljencrants/Fant model  of glottic puls  to take into  account for
   envelope modification when  transposing with wave form preservation
   (see %s).   The parameters are  the effective open time  (te, often
   denoted as open  quotient), that is the time from  the start of the
   glottic air flow  until the maximum negative derivative  of the air
   flow.   The asymmetry  coefficient  (am) that  determines the  time
   position of the maximum air flow in terms of the open time te.  And
   the effective closing time (ta) of the glottic excitation signal of
   the speech signal. In an  ideal case the model parameters should be
   adapted to  the signal. Until a robust  glottic parameter estimator
   is available the glottic parameters have to be be set manually.  As
   reasonable default  value the settings te=0.7,  am=0.7, and ta=0.01
   can be used.   te and ta are relative to  the fundamental period of
   the signal  segment.  Accordingly, the  glottal puls model  is only
   activated  if  the  fundamental   frequency  is  provided  (see  %s
   flag). The  first set of  values (before the optional  ::) controls
   the  parameters the  first track,  the  second set  for the  second
   track.  If you  want to specify only the  parameters for the second
   track use an empty string for the first track.

   The parameter  te should be selected  within 0< te  < 1. Reasonable
   values are 0.3 < te <0.9.  The asymmetry coefficient has to respect
   0.5 <  am < 1 with  realistic settings in  the interval 0.6 <  am <
   0.8. Ta  should be  selected  according to  0  < ta  < 1-te.   With
   realistic  values being  ta <  0.05.  If  ta is  not  specified its
   default value is 0.01.  Each parameter can be specified either as a
   constant or as a bpf file name in which case a dynamic glottic puls
   model can be used.

   Scaling the glottic puls:

   The glottal  puls parameters are  used to distinguish  the spectral
   envelope  of the  glottal puls  from the  spectral envelope  of the
   vocal  tract  when  transposition  with  envelope  preservation  or
   envelope scaling is performed.  In these cases the envelope related
   to the  glottal puls is  removed from the envelope  spectrum before
   the respective transformation is carried out.  Therefore, the
   glottic puls will always be kept unchanged.

   If the  complete envelope (vocal-tract plus glottal  puls) shall be
   used  during  transposition or  envelope  scaling  then the  doscal
   modifier of the  -envgl option has to be set to  1.  Note, that the
   results   of  envelope  modification   with  doscal=1   and  -envgl
   completely off are  different only with respect to  phase.  This is
   due to  the fact that the  envelope that is estimated  via the true
   envelope  estimator is  supposed to  have minimum  phase  while the
   spectral envelope  of the glottal puls by  construction has maximum
   or mixed phase.

   ---- Example: -envgl 0.7,0.6,0

   specify glottal  puls parameters  for envelope processing.   Do not
   include  spectral envelope  related  to the  glottal into  envelope
   processing.

   ---- Example: -envgl ::0.7,0.6,0

   specify glottal  puls parameters  for envelope processing in the
   second track, only.

   ---- Example: -envgl 0.7,0.6,0.01,1

   specify  glottal puls  parameters  for envelope  processing in  the
   first  track.  Do include  envelope related  to glottal  pulse into
   envelope processing.


------------------------------~
leccmd:usage-envglnew = 
-envglnew <te,am>[,ta][::te2,am2,[ta2]] :: %s (Def: off)     


   Glottic puls modification:

   For each  of the  glottic source parameters  (of the first  and the
   second track) a target value can be specified. If a target value is
   given the  signal will be  filtered such that the  original glottic
   source  of the  speech  signal is  transformed  into an  excitation
   signal  with  the  given  glottic puls  parameters.   Glottic  puls
   transformation will only be performed if the %s flag has been given
   as  well.  For  more  explanations  related  to  the  glottic  puls
   parameters see the descrition of the -envgl flag.
 
   ---- Example: -envglnew 0.7,0.6,0.1

   applies a signal filter that corresponds with the transformation of
   the  original  glottic  puls  (   as  specified  with  %s)  into  a
   transformed   glottic  puls  excitation   signal  with   the  given
   parameters.


------------------------------~
leccmd:usage-envrd =
-envrd <rd>[doscal][::rd[doscal2]]:: %s (Def: off)


   Liljencrants/Fant model  of glottic puls  to take into  account for
   envelope modification when  transposing with wave form preservation
   (see %s). The parameter is the relaxation coefficient of the glottis.
   Accordingly, the  glottal puls model  is only activated  if  the
   fundamental frequency  is  provided  (see  %s flag). The  first set
   of  values (before the optional  ::) controls the  parameters
   the  first track,  the  second set  for the  second track.  If you
   want to specify only the  parameters for the second track use an empty
   string for the first track.

   The parameter Rd  can be selected in the range  [0.3, 6] but values
   above 3 are only found at  the end of words.  This parameter can be
   specified either as a constant or  as a bpf file name in which case
   a dynamic glottic puls model can be used.

   Scaling the glottic puls:

   The glottal  puls parameters are  used to distinguish  the spectral
   envelope  of the  glottal puls  from the  spectral envelope  of the
   vocal  tract  when  transposition  with  envelope  preservation  or
   envelope scaling is performed.  In these cases the envelope related
   to the  glottal puls is  removed from the envelope  spectrum before
   the respective transformation is carried out.  Therefore, the
   glottic puls will always be kept unchanged.

   If the  complete envelope (vocal-tract plus glottal  puls) shall be
   used  during  transposition or  envelope  scaling  then the  doscal
   modifier of the  -envrd option has to be set to  1.  Note, that the
   results   of  envelope  modification   with  doscal=1   and  -envrd
   completely off are  different only with respect to  phase.  This is
   due to  the fact that the  envelope that is estimated  via the true
   envelope  estimator is  supposed to  have minimum  phase  while the
   spectral envelope  of the glottal pulse by  construction has maximum
   or mixed phase.

   ---- Example: -envrd 1.5

   specify glottal  puls parameters  for envelope processing.

   ---- Example: -envrd ::1.5

   specify glottal  puls parameters  for envelope processing in the
   second track, only.

   Rd estimation:

   With value "-1", the Rd shape parameter is automatically estimated.
   For more information about the algorithm and the related parameters
   see the flag %s.  The  fundamental frequency has to be provided and
   the window size should be at least 4 time the fundamental period in
   order to create the necessary  harmonic model. This can be achieved
   for exaple by means of using dynamic window size with the switch %s
   using auto  mode.  Note that the  polarity of the signal  has to be
   correct !  The  glottic pulses have to be positive  and so the most
   important impulse made  by the derivative pulse has  to be negative
   (easy to  see in vocal fry  segments).  Since this  polarity is not
   obvious  to detect, a  good solution  is to  run the  Rd estimation
   twice with  both polarities and keep  the one with  the best median
   confidence. To change the polarity you have to invert the signal.

   ---- Example: -Mauto "pf 4" -envrd -1

------------------------------~
leccmd:usage-envrd_par =
-envrd_par [rd estimation paramers] :: %s (Def: default settings)

   The rd pulse  shape parameter estimation algorithm has  a number of
   parameters  that  are  configure  with  the  -enrd_par  flag.   The
   parameters are specified using  an identifier tag followed by space
   or = and by the related  value.  The objective of the estimation is
   to  find  the rd  shape  parameter  of  the Liljencrants-Fant  (LF)
   glottal pulse Model from the observed partial amplitudes. The basic
   idea  is   that  the  amplitude   sequence  is  constructed   by  a
   superposition  of the glottal  pulse spectrum  and the  vocal tract
   resonator filter.  These 2 components  are to be separated based on
   the fact that  the glottal pulse spectrum is  mixed phase while the
   vocal  tract  spectrum is  minimum  phase.  The  algorithm is  
   searching  the rd parameter  that best  explains the  amplitude and
   phases of the  sequence of partials up to  partial number OH, while
   the minimum  phase version of the amplitude  sequence is calculated
   using a larger number of partials denoted by MP. OH is in the range
   ohmin <=  OH <= ohmax,  while MP = min(mmfreq/f0,  mmpart).  mmfreq
   and  mmpart ar  only  used if  they  are >  0. If  MP  < ohmax  the
   algorithm ends with  an error. 

   The  rd  estimation  will  be  performed only  if  the  fundamental
   frequency is > 0 and  if the voiced/unvoiced frequency boundary VUF
   (see %s) is above the f0.  Assuming we know the rd shape parameter
   the glottal  pulse spectrum is removed from  the amplitude sequence
   of the  partials and the  resulting sequence of  partial parameters
   should  then  contain  only  the  effect of  the  vocal  tract  and
   therefore be minimum  phase.  If we don't know  the rd parameter we
   can search the rd parameter that creates a partial sequecne that is
   as close  to minimum phase  as possible. Unfortunately, due  to the
   fact  that the real  world pulse  is not  following the  LF glottal
   pulse model  the rd estimation  is not very stable.   Therefore, to
   avoid irregular jumps a viterbi smoothing algorithm is available in
   svp.

   If  viterbi smoothing  is  activated  the most  likely  path of  rd
   parameters is determined by  means of maximizing the probability of
   the rd sequence  assuming a a Gaussian model  of the deviation from
   the minimum phase partial  sequence and the rd parameter variation.
   The  liklihood of  the deviation  of  the phase  sequence from  the
   minimum phase  sequence is  controled by the  std deviation  of the
   phase error rstd and the likelihood  of a change in rd over time is
   controlled  the rate of  change in  the rd  sequence (delta_rd/ms).
   The larger rstd and the smaller tstd the smoother the rd trajectory
   will be. Note, that the  smoothing will depend on the ratio betwenn
   estd  and  rstd, and  so  changing any  of  the  two parameters  is
   sufficient.

   Multiple parameter settings are separted by ",". The list of parameter
   tags is as follows: 

%s
    rmin    : minimum value of rd parameter range            (Def: 0.3)
    rmax    : maximum value of rd parameter range            (Def: 5.5)
    rstep   : precision of the rd parameter estimate         (Def: 0.01)
    resmet  : value indicating the residual evaluation method 
              allowed values 
                  2 -> MSPD2IX algorithm with configurable weights
                       see: wd2i0, wd2i1, wd2i2
                  4 -> phase slope regression
    wd2i0   : MSPD2IX weight for phase flatness measure      (Def:= 1/3.)
              without integration
    wd2i1   : MSPD2IX weight for phase flatness measure      (Def:= 1/3.)
              with simple integration
    wd2i2   : MSPD2IX weight for phase flatness measure      (Def:= 1/3.)
              with two integrations
    optmet  : optimization method 1 => grid,                 (Def:= 1)
                                  2 => brent (not working) 
    mhfreq  : maximum frequency (Hz) for the partials to be
              used for calculation of the minimum phase model
                                                             (Def: 8000)
    mhpart  : maximum partial number to be used for the 
              calculation of the minimum phase model         (Def: -1)
    ohmax   : maximum partial number to be used for the 
              evaluation of the convolutional residual       (Def: 7) 
    ohmin   : maximum partial number to be used for the 
              evaluation of the convolutional residual       (Def: 3) 
    vit     : if present enable viterbi smoothing            (Def: no smoothing)
    v_estd  : std deviation to be used for probabilistic model of 
              normalized residual phase error during viterbi smoothing
                                                             (Def: 0.3)
    v_rstd  : std deviation for rd slope (1/ms)              (Def: 0.03)
%s
 
   ---- Example: -envrd_par "min=0.3, max=5.5, step=0.01, resmet=4, optmet=0, 
                mmfreq=8000, mmpart=-1, ohmin=4, ohmax=7, vit, v_ersig=0.3, v_trsig=0.2 "

   Command line example setting default parameters with viterbi 
   smoothing.

------------------------------~
leccmd:usage-envrdnew =
-envrdnew <rd>[::rd2] :: %s (Def: off)


   Glottic puls modification:

   Specify a target value for the relaxation coefficient rd of the
   glottis model (for the first  and/or the second track).If a target
   value is given the  signal will be  filtered such that the  original
   glottic source  of the  speech  signal is  transformed  into an
   excitation signal  with  the  given  glottic puls  parameters.
   Glottic  puls transformation will only be performed if the %s flag
   has been given as  well. For  more  explanations  related  to  the
   glottic  puls parameters see the descrition of the -envrd flag.

   ---- Example: -envrdnew 0.7

   applies a signal filter that corresponds with the transformation of
   the  original  glottic  puls  (   as  specified  with  %s)  into  a
   transformed   glottic  puls  excitation   signal  with   the  given
   parameters.

------------------------------~
leccmd:usage-envglmrk =
-envglmrk [0|1] :: %s (Def: off(0))

   ATTENTION:: This  flag is used internally for  svp_multi and should
   not  be  used on  the  comand  line.  The glottal  closure  instant
   positions are enabled automatically  by means of adding c qualifier
   to the output flag selection flag -OG (see %s).

   Compute Glottal Closure Instants for voice analysis. These instants
   represent the times of most important excitation of the vocal-tract
   filter. They can be used for pitch synchronous processing.
   The Rd estimation is necessary and is thus automatically activated.
   True-envelope computation is necessary and automatique window size
   is highly recommended.
   

   ---- Example: -Afft +2t -Mauto "pf 4" -envglmrk 1

------------------------------~
leccmd:usage-envwarp = 
-envwarp <warpfile> ::      %s

   warp  the  spectral  envelope  using  a  piecewise  linear  warping
   function  that defines relations  between original  and transformed
   frequency break  points.  The number of  frequency breakpoints used
   to define the  warping function is fixed.  The  warp parameter file
   has the following format: 
 
%s  
   nBpf
   time fre_src_1 fre_targ_1 fre_src_2 fre_targ_2 ...

   nBpf           : specifies the number of frequency breakpoints 
                    that define the piecewise linear of the frequency 
                    axis.
   time           : is the time for that the following mapping is applied.
   freinx freoutx : a pair of breakpoints defining a segment boundary
                    of the mapping between source and traget frequency axis. 
                    nBpf pairs of frequencies have to be specified. The 
                    mapping is performed such that the envelope between 
                    frequency fre_src_x to fre_src_x+1 is warped into 
                    fre_targ_x to fre_targ_x+1. 
%s

   All  lines defining  time varying  mappings need  to have  the same
   number of break  points. Src frequency break points  are allowed to
   be non  monotonous (values may decrease)  and do not  need to cover
   the complete frequency axis.   Target frequency breakpoints have to
   be non  decreasing and  they have to  cover the  complete frequency
   axis.   The  frequency  mapping  works  on  the  original  spectral
   envelope.  Any  transposition may effect the final  location of the
   spectral  envelope as  explained under  %s,  %s and  %s.  For  time
   locations before  the first  or after the  last warpfile  entry the
   closest warping function in time  will be used (warping function is
   extrapolated over time).
 
   ---- Example: -envwarp warpfile

   warpfile

   4
   0.1   0 0   1000 2000    2000 1000    22050 22050 

   Distorts spectral envelope using a non monotonous mapping   

------------------------------~
leccmd:usage-envscal = 
-envscal <env factor>[,mean factor][::<env factor>[,mean factor]] :: %s or      
-envscal-pw <env factor>[,mean factor][::<env factor>[,mean factor]] ::   
-envscal-en <env factor>[,mean factor][::<env factor>[,mean factor]]::  or      
-envscal-ml <env factor>[,mean factor][::<env factor>[,mean factor]] ::   
    
   apply amplitude rescaling of log amplitude spectral envelope of the
   sound in  track 1/2.  Allows  to rescale the spectral  envelope and
   its mean level in the analysis module. 
   
   The envelope representation used for envelope scaling distinguishes
   three parts of the spectral  envelope E. A frequency dependent part
   T(w) which  is responsible  for the timbre  of the sound,  a signal
   dependent  constant envelope  level  M, that  represents the  local
   power of the  signal and a systematic constant  level O related to
   the energy of analysis  window. During envelope modification we aim
   to change either the signal timbre or the signal energy modulation.
   The window  dependent constant should  never be modified to  keep a
   coherent internal  representation. According to  the notation above
   the complete envelope  is a function of the frequency  w and can be
   represented as

%s
    E(w)  =  exp(log(T(w) + log(M) + log(O)) 
%s
   
   Using the time dependent envelope scaling factors s(t) and m(t) 
   we modify the envelope as follows

%s
    E(w) =  exp(s(t) *  log(T(w)) +  m(t)*log(M)  +   log(O))
%s

   Accordingly, for each of the  tracks two scaling factors or scaling
   factor  bpf's  are necessary  to  give  complete  control over  the
   envelope. The factors can either  be constant or a bpf. The scaling
   factor arguments given before the '::' are assigned to track 0, the
   ones after  the '::' are assigned  to track 1.  For each  track the
   first scaling factor  specifies s(t) and the second  one, after the
   ',' specifies m(t).
   
   The -envscal parameter are effective in different analysis modules.
   The processing  modules %s,%s,...  and the  %s/%s/%s 
   envelope analysis modules (as well as in their inverse counterparts 
   %s/%s/%s.  A related module  with similar syntax  is the  
   envscal filter  %s.

   Envelope filters that are created by means of the envelope analysis
   modules can be used either in  the cross synthesis modules -G or in
   the gabarit  and envscal  filter. In all  these cases  the envelope
   filter should not contain the  window dependent offset O because it
   is already present  in the signal. The offset O  is required if the
   envelope  is used  to  represent (visualize)  the  envelope of  the
   original  spectrum. Therefore,  the offset  O is  removed  from the
   results of  the envelope  analysis only, if  the -envscale  flag is
   present on  the command line.   To achieve consistent  results with
   envelope filters  the -envscal flag  should be given  with constant
   scaling factor  1. Note, that  the envelope scaling  operation does
   not  effect  the envelope  coefficients  that  will  be output  via
   -OE. The scaled  envelope has to be stored either  in sdif (-OS) or
   gabarit (-Og) format or used in the inplace mixer.

   Default values:
      
   The  default scaling  values are  selected such  that  the envelope
   scaling  flag can  be used  with default  values in  the processing
   (fft) and  the envelope estimation modules  (tenv/ced). The default
   scaling  factors for  the different  parts of  the envelope  in the
   different modules are

%s
                   process. fft,..  | envelope estimation (tenv, ced)  
     ===============================|=================================
    timbre (T)           1          |             1
    mean   (M)           1          |             0
%s

   As an example we use the case where the timbre of a sound should be
   imposed  on  another  sound,  however, with  the  perceived  energy
   contour kept from the original sound. The fact that only the timbre
   should be replaced can be achieved using default values

   ---- Example: -atenv 2000Hz -Afft -envscal 0::1 -Gamul  ... 

   or explicit notation of the mean scaling factors.

   ---- Example: -atenv 2000Hz -Afft -envscal 0,1::1,0 -Gamul ... 


   Mean Envelope Modifiers:

   Up  to now we  did not  discuss how  the mean  envelope level  M is
   obtained.  Because  M should  represent the time  varying perceived
   energy of the signal. It is  obtained from the envelope by means of
   a  weighted  mean  of  the  envelope energy  using  equal  loudness
   contours for  50db sound pressure  level according to ISO  226. Two
   other  modes  for calculating  M  are  the  average energy  of  the
   envelope which is  selected by means of adding  the modifier -en to
   the envscale  flag. Alternatively you  can use the modifier  -ml to
   calculate  the mean  using the  mean of  the log  amplitude  of the
   envelope. This mode is similar to the residual energy that would be
   obtained using the  lpc analysis. The default mode  can be selected
   by not  providing an explicit mean  specifier or by  means of using
   -pw as mean specifier.
   
   ---- Example: -Afft -envscal-ml 0
   
   would remove the spectral envelope  from the input sound creating a
   residual signal using a mean envelope model equivalentto an inverse 
   lpc  filter. The signal energy (according  to the log  mean of  the 
   envelope) is kept in the residual.

   ---- Example: -envscal 0
   
   The default  is the same  as above besides  the fact that  the mean
   signal  energy  in the  spectral  envelope  is  calculated using  a
   perceptual weighting according to an equal loudness contour. In
   both examples the mean energy would not change.

   ---- Example: -envscal-en 0,0
   
   creates  again  a  residual  signal,  however,  in  this  case  the
   mean energy of the envelope is removed from the signal as well.

   Note: If envelopes created with "-Atenv ... -envscal y" are applied
   to complete  the spectral envelope that has  been partly suppressed
   by means of "-Afft ...  -envscal x" you should organize the scaling
   parameters x  and y such  that they  obey the relation  x + y  = 1.
   Envelope scaling effects can be obtained if x+y != 1.

------------------------------~
leccmd:usage-envscal-no = 
-envscal-no <env factor>[,mean factor][::<env factor>[,mean factor]] :: %s       
    
   This   flag  represents   envelope   scaling  with   a  subset   of
   possibilities provided  by the  %s flag. It  will continue  to work
   with old scripts but is no longer supported.
   
   Only the  perceived energy mean  level mode is available  with this
   flag.  If you want to use other mean level modes you have to use %s
   and with explicit mean level scaling factors.

   Default values:
      
   The  default scaling  values are  selected such  that  the envelope
   scaling  flag can  be used  with default  values in  the processing
   modules    %s,...    and    the    envelope   estimation    modules
   %s,%s,%s...  Compared to %s, however,  the -envscal-no flag will by
   default create  a residual  with normalized  mean level  (perceived
   power)  during processing  and will keep  the mean perceived  power
   during envelope  estimation.  The default  scaling factors  for the
   different parts  of the envelope in  the different modules are

%s
                   process. fft,..  | envelope estimation (tenv, ced)  
     ===============================|=================================
    timbre (T)           1          |             1
    mean   (M)           0          |             1
%s

    
------------------------------~

leccmd:usage-envtr = 
-envtr <multiplier> ::  %s                                     (Def: 0)  

   Distort envelope during envelope preservation.
 
   If transposition with envelope preservation (%s) is performed
   and  the -envtr  flag  has been  given,  the envelope  preservation
   algorithm  will  distort  the  envelope  such that  only  the  high
   frequency part of the envelope will be preserved. The low frequency
   part of the envelope will be transposed.

   This  modification  tries  to  achieve to  two  objectives:  First,
   prevent  any degradation  of the  lower harmonics  when transposing
   down.   This problem  arises  due  to the  fact  that the  spectral
   envelope  below the  fundamental  is usually  very  weak such  that
   transposing down results  in a loss of the  lower partials. Second,
   it is  well known  that the first  formant moves together  with the
   fundamental.  This  behavior can be  mimiced with the  -envtr flag.
   There are two  modes of operation that are distinct  in the way the
   point  of  change   between  envelope  transposition  and  envelope
   preservation  is   determined.   The  first   mode  determines  the
   crossover point in terms of the given multiplier times the position
   of the first maximum of  the spectral envelope.  The second mode is
   selected if the -F0 flag is given which provides a bpf file with f0
   values. If this flag is  present the crossover point is selected to
   be at the frequency determined by the f0 value of the current frame
   times  the   multiplier.   This  mode  is   especially  useful  for
   transposing down to prevent loss of energy in the fundamental.
        
---------------------------------------------------------------------~
leccmd:usage-envorder = 
-envorder <filename>[::<filename>] :: %s or     
-envorder ::<filename> :: 

   Defines the true envelope order through an ascii bpf file. The file
   before the '::'  will be used for track 0,  the file after the '::'
   for track 1.

   If adaptive true envelope order has been requested, the bpf defines
   the minimum order,  which may be exceeded according to the value of
   the fundamental frequency.

------------------------------~
leccmd:usage-envf0max = 
-envf0max <filename>[::<filename>] ::  %s  or
-envf0max ::<filename> :: 

   Defines the true envelope order through  an ascii bpf file which is
   interpreted as the f0max values.  The file before the '::'  will be
   used for track 0, the file after the '::' for track 1.

   The order is derived from f0max according to

   order = srate / f0max * 0.5

   If adaptive true envelope order has been requested, the bpf defines
   the minimum order,  which may be exceeded according to the value of
   the fundamental frequency. Note, that the minimum ordere will be used
   for all unvoiced segments of the input sound.

---------------------------------------------------------------------~
leccmd:usage-lpcorder = 
-lpcorder <filename or const>[::<filename or const>] :: %s or     
-lpcorder ::<filename> :: 

   Defines the  lpc order. The file  or value before the  '::' will be
   used for track 0, the file or value after the '::' for track 1.
   
   This flag  provides an alternative  possibility to specify  the lpc
   order.  The standard way being the case where the order is directly
   specified as a  parameter of the -Alpc or  -alpc flags. In contrast
   to those cases the -lpcorder flag provides the possibility to use a
   time varying lpc order sepcified in a bpf file.

------------------------------~

leccmd:usage-quiet =
  
-quiet :: 
   
   suppress all warning and information messages.
   
---------------------------------------------------------------------~

leccmd:usage-info =
  
-info <bool> ::           %s                     (Def: 1)
   
   If the output  of the supervp command is a  sound file supervp will
   store the  comand line in  the file header whenever  possible.  The
   comments in the header may in some occasions be a problem for other
   problems. The  generation of these omments can  be suppressed means
   of the -info command line flag with an argument of value 0.

   ---- Example:  -info 0
 
   Switches the writiung of comments in the sound file header off.
   
---------------------------------------------------------------------~

leccmd:usage-meta =
  
-meta <bool> ::           %s                     (Def: 0)
   
   If meta bool argument  is set to 1 and the input  and the output of
   the supervp command are sound files supervp will copy metadata from
   the input  to the  output when possible.  These include  AIFF MARK,
   INST and  APPL chunks as well  as WAVE smpl, inst  and bext chunks.
   The  bext coding  history  will be  updated  if one  of the  coding
   parameters was changed.  Supplying the -meta command line flag with
   an argument  of value  0 will prevent  this copying, none  of these
   chunks being generated in the output.

   ---- Example:  -meta 0
 
   Prevents the copying of metadata chunks.
   
---------------------------------------------------------------------~
   
