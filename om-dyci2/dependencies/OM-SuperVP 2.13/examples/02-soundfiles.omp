; OM File Header - Saved 2010/10/26 16:28:39
; (6.030002 :patc (om-make-point 233 46) (om-make-point 319 308) (om-make-point 822 613) "" 183 0 nil "2010/10/26 16:28:39")
; End File Header
; External resources 
; (list (list (quote :picture) "../../../../../OM-SRC/OPENMUSIC/libraries/OM-SuperVP 2.5/resources/pict/superVP") (list (quote :sound) "../../in-files/PianoOriginal.aiff"))
(in-package :om)(load-lib-for (quote ("OM-SuperVP")))(setf *om-current-persistent* (om-load-patch1 "02-soundfiles" (quote ((om-load-boxcall (quote genfun) "FILE-CHOOSER" (quote file-chooser) (quote nil) (om-make-point 279 161) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 173 48) (quote "try the different methods to define a soundfile -->") "" (om-make-point 214 309) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 427 179) (om-make-point 128 26) "PianoOriginal.aiff" "\"PianoOriginal.aiff\"" nil) (om-load-boxcomment "comment" (om-make-point 230 61) (quote "3. With the path to the sound in OM format OR the filename if it is in the default input-files folder...") "" (om-make-point 425 118) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 108 51) (quote "2. With an OM pathname...") "" (om-make-point 272 122) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 128 40) (quote "1. With an OM SOUND object...") "" (om-make-point 120 125) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 551 317) (om-make-point 61 28) "out.aiff" "\"out.aiff\"" nil) (om-load-editor-box1 "SOUND1" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 396 435) (om-make-point 168 56) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx microplay scale)) (list (quote :midishare) (quote t) 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil nil)) t nil nil nil) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 126 167) (om-make-point 80 58) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "PianoOriginal" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PianoOriginal.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx microplay scale)) (list (quote :midishare) (quote t) 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 478 255) (om-make-point 20 28) 2 "2" nil) (om-load-boxcall (quote genfun) "SUPERVP-TIMESTRETCH" (quote supervp-timestretch) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 426 283) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SUPERVP-PROCESSING" (quote supervp-processing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SRCPATH" nil) (om-load-inputfun (quote input-funbox) "no documentation" "PROCESSINGS" "") (om-load-inputfun (quote input-funbox) "no documentation" "BEGIN" nil) (om-load-inputfun (quote input-funbox) "no documentation" "END" nil) (om-load-inputfun (quote input-funbox) "no documentation" "WINDOWSIZE" 4096) (om-load-inputfun (quote input-funbox) "no documentation" "FFTSIZE" 4096) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WINDOWSTEP-OVERSAMP" 8 (list (list "1/4" 4) (list "1/8" 8) (list "1/16" 16) (list "1/32" 32))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WINDOW-TYPE" "hanning" (list (list "Blackman" "blackman") (list "Hanning" "hanning") (list "Hamming" "hamming"))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "SHAPE-INVARIANT" nil (list (list "Shape Invariant On" (quote t)) (list "Shape Invariant Off" nil))) (om-load-inputfun (quote input-funbox) "no documentation" "PRESERVE-TRANSIENT" (quote t)) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "NORMALIZE" nil (list (list "Normalize On" (quote t)) (list "Normalize Off" nil))) (om-load-inputfun (quote input-funbox) "no documentation" "OUTFILE" "out.aiff"))) (om-make-point 379 356) (om-make-point 200 63) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 338 30) (quote "02 - How to define the sounds to process ?") "" (om-make-point 108 45) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((11 0 7 0 nil 0) (9 0 10 0 nil 0) (8 0 11 0 nil 0) (10 0 11 1 nil 0) (6 0 11 11 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "superVP" :source (quote |OM-SuperVP|) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "superVP" (quote |OM-SuperVP|)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 32 49)) (setf (pict-size newpict) (om-make-point 66 56)) newpict)) 6.030002))