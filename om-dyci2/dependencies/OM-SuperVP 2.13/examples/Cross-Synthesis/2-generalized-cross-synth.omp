; OM File Header - Saved 2009/06/15 16:37:19
; (6.0011 :patc (om-make-point 250 32) (om-make-point 245 148) (om-make-point 845 610) "" 183 0 nil "2009/06/15 16:37:19")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-SuperVP")))(setf *om-current-persistent* (om-load-patch1 "2- Generalized-cross-synth" (quote ((om-load-boxcomment "comment" (om-make-point 289 44) (quote "2 - Generalized Cross Synthesis") "" (om-make-point 143 10) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SOUND2" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 173 188) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :name "voix-6NV0033" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale microplay approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems player)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) (quote :midishare))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 265 176) (om-make-point 240 30) (list (list 0 1 0 1 0 0) (list 1 1 0 1 0 0) (list 2 0 1 0 1 0)) "((0 1 0 1 0 0)(1 1 0 1 0 0)(2 0 1 0 1 0))" nil) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "append" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 271 96) (om-make-point 93 68) (load-buffer-textfile (quote ("0    1 0 1 0 0" "0.5  1 0 1 0 0" "2    0 1 0 1 0" "4    0 1 0 1 0" "" "" "")) (quote textfile) "append" "text") "x" nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil) (om-load-editor-box1 "SOUND2" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 94 234) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :name "PianoOriginal" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale microplay approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems player)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) (quote :midishare))) t nil nil nil) (om-load-editor-box1 "SOUND1" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 215 371) (om-make-point 214 75) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems player)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) (quote :midishare))) t nil nil nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 428 233) (om-make-point 65 28) "Out2.aif" "\"Out2.aif\"" nil) (om-load-boxcall (quote genfun) "SUPERVP-CROSS-SYNTHESIS" (quote supervp-cross-synthesis) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SRCPATH" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SRCPATH2" nil) (om-load-inputfun (quote input-funbox) "no documentation" "PARAMETER-FILE" "") (om-load-inputfun (quote input-funbox) "no documentation" "WINDOWSIZE" 4096) (om-load-inputfun (quote input-funbox) "no documentation" "FFTSIZE" 4096) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WINDOWSTEP-OVERSAMP" 8 (list (list "1/4" 4) (list "1/8" 8) (list "1/16" 16) (list "1/32" 32))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WINDOW-TYPE" "hanning" (list (list "Blackman" "blackman") (list "Hanning" "hanning") (list "Hamming" "hamming"))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "NORMALIZE" (quote t) (list (list "Normalize On" (quote t)) (list "Normalize Off" nil))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "CROSSMODE" (quote t) (list (list "Cross" (quote t)) (list "Add" nil))) (om-load-inputfun (quote input-funbox) "no documentation" "OUTPATH" "out.aiff"))) (om-make-point 198 291) (om-make-point 227 63) nil nil nil 1))) (quote ((7 0 5 0 nil 0) (4 0 7 0 nil 0) (1 0 7 1 nil 0) (2 0 7 2 nil 0) (6 0 7 9 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "superVP" :source (quote |OM-SuperVP|) :pict-pathname nil :thepict (om-get-picture "superVP" (quote |OM-SuperVP|)) :storemode :external :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 74 13)) (setf (pict-size newpict) (om-make-point 63 57)) newpict)) 6.0011))
