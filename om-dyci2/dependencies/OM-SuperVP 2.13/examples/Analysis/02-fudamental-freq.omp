; OM File Header - Saved 2009/06/15 16:37:19
; (6.0011 :patc (om-make-point 147 51) (om-make-point 50 50) (om-make-point 894 603) "" 183 0 nil "2009/06/15 16:37:19")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-SuperVP")))(setf *om-current-persistent* (om-load-patch1 "02-fudamental-freq" (quote ((om-load-boxcomment "comment1" (om-make-point 390 32) (quote "FUNDAMENTAL FREQUENCY ESTIMATE") "" (om-make-point 94 38) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 162 30) (quote "Convert SDIF F0 to a BPF") "" (om-make-point 354 360) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 170 29) (quote "SDIF sound analysis file") "" (om-make-point 380 276) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 243 208) (quote "FFT box parameters :$- Begin time of analysis (s)$- End time of analysis (s)$- Min frequency of analysis (Hz)$- Max frequency of analysis (Hz)$- Max spectrum frequency$- Noise threshold$- Smoothing order$- Analysis window size$- FFT size$- Analysis step$- Analysis window type$- Output file (key argument, press 'k')") "" (om-make-point 5 215) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 187 45) (quote "Output file will be saved in the default outfiles folder") "" (om-make-point 450 202) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 275 432) (om-make-point 315 115) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil) (om-load-boxcall (quote genfun) "F0->BPF" (quote f0->bpf) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 264 356) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 390 146) (om-make-point 80 25) "out.f0.sdif" "\"out.f0.sdif\"" nil) (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 259 270) (om-make-point 116 66) (let ((newobj (make-instance (quote sdiffile)))) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil) (om-load-boxcall (quote genfun) "F0-ESTIMATE" (quote f0-estimate) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "FILENAME" nil) (om-load-inputfun (quote input-funbox) "no documentation" "BEGIN-TIME" nil) (om-load-inputfun (quote input-funbox) "no documentation" "END-TIME" nil) (om-load-inputfun (quote input-funbox) "no documentation" "FUND-MINFREQ" 400) (om-load-inputfun (quote input-funbox) "no documentation" "FUND-MAXFREQ" 950) (om-load-inputfun (quote input-funbox) "no documentation" "SPECTRUM-MAXFREQ" 4000.0) (om-load-inputfun (quote input-funbox) "no documentation" "NOISE-THRESHOLD" 50.0) (om-load-inputfun (quote input-funbox) "no documentation" "SMOOTH-ORDER" 3) (om-load-inputfun (quote input-funbox) "no documentation" "WINDOWSIZE" 4096) (om-load-inputfun (quote input-funbox) "no documentation" "FFTSIZE" 4096) (om-load-inputfun (quote input-funbox) "no documentation" "STEP" 256) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WINDOWTYPE" "hanning" (list (list "Blackman" "blackman") (list "Hanning" "hanning") (list "Hamming" "hamming"))) (om-load-inputfun (quote input-keyword) "Choose from this list (:out)" "Keyword input" (quote :out)))) (om-make-point 185 187) (om-make-point 238 58) nil nil nil 1) (om-load-editor-box1 "SOUND2" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 136 89) (om-make-point 138 78) (let ((newobj (let ((thesound (load-sound (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :name "PianoOriginal" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale microplay show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx player)) (list nil nil (quote t) 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare))) t nil nil nil))) (quote ((6 0 5 0 nil 0) (8 0 6 0 nil 0) (9 0 8 0 nil 0) (10 0 9 0 nil 0) (7 0 9 12 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "superVP" :source (quote |OM-SuperVP|) :pict-pathname nil :thepict (om-get-picture "superVP" (quote |OM-SuperVP|)) :storemode :external :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 24 41)) (setf (pict-size newpict) (om-make-point 66 58)) newpict)) 6.0011))
