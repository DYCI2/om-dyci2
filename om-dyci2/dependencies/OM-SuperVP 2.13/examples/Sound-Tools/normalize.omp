; OM File Header - Saved 2010/10/26 16:38:43
; (6.030002 :patc (om-make-point 76 55) (om-make-point 50 50) (om-make-point 500 400) "" 183 0 "2010/10/26 16:37:00" "2010/10/26 16:38:43")
; End File Header
; External resources 
; (list (list (quote :picture) "../../../resources/pict/superVP") (list (quote :sound) "../../../out-files/svp-normalized.aiff" "../../../../../../OM-SRC/OPENMUSIC/libraries/OM-SuperVP 2.5/resources/sound/PianoOriginal.aiff"))
(in-package :om)(load-lib-for (quote ("OM-SuperVP")))(setf *om-current-persistent* (om-load-patch1 "normalize" (quote ((om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 373 171) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "SUPERVP-NORMALIZE" (quote supervp-normalize) (quote ((om-load-inputfun (quote input-funbox) "sound or sound file pathname" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file name" "OUTFILE" "normout.aif") (om-load-inputfun (quote input-funbox) "scale factor" "RESCALE" nil))) (om-make-point 278 204) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 309 34) (quote "SuperVP Rescale/Normalization") "" (om-make-point 128 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 273 110) (om-make-point 134 30) "svp-normalized.aiff" "\"svp-normalized.aiff\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 316 143) nil nil nil nil 1) (om-load-editor-box1 "svp-normalized.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 225 294) (om-make-point 208 69) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "svp-normalized" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "svp-normalized.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 873 794) (om-make-point 504 222) 0 1 (quote t) nil 0)) t nil nil t) (om-load-editor-box1 "PianoOriginal.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 174 134) (om-make-point 124 60) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "bresson" "OM-SRC" "OPENMUSIC" "libraries" "OM-SuperVP 2.5" "resources" "sound")) :device nil :host nil :name "PianoOriginal" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PianoOriginal.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil t))) (quote ((6 0 1 0 nil 0) (4 0 1 1 nil 0) (0 0 1 2 nil 0) (3 0 4 0 nil 0) (1 0 5 0 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "superVP" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "superVP" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 16 38)) (setf (pict-size newpict) (om-make-point 100 100)) newpict)) 6.030002))