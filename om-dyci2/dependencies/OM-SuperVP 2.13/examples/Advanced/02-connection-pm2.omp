; OM File Header - Saved 2012/11/27 10:51:59
; (6.060015 :patc (om-make-point 104 75) (om-make-point 414 91) (om-make-point 1147 937) "" 183 0 nil "2012/11/27 10:51:59")
; End File Header
; External resources 
; (list (list (quote :picture) "../../../../../../OM-SRC/SOURCES/LIBRARIES/OM-SuperVP/resources/pict/superVP") (list (quote :sound) "../../../in-files/PianoOriginal.aiff") (list (quote :sdif) "../../../out-files/markers.sdif" "../../../out-files/chordseq.sdif"))
(in-package :om)(load-lib-for (quote ("RepMus" "OM-pm2" "OM-SuperVP")))(setf *om-current-persistent* (om-load-patch1 "02-connection-pm2" (quote ((om-load-boxcall (quote genfun) "TRANSIENT-DETECTION" (quote transient-detection) (quote ((om-load-inputfun (quote input-funbox) "" "INFILE" nil))) (om-make-point 573 246) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 674 476) (om-make-point 100 30) "chordseq.sdif" "\"chordseq.sdif\"" nil) (om-load-boxcall (quote genfun) "CHORD-SEQ-ANALYSIS" (quote chord-seq-analysis) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "BEGIN-T" (quote :begin-t) nil nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "END-T" (quote :end-t) nil nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "MARKERS" (quote :markers) nil nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "MAX-PARTIALS" (quote :max-partials) 12 nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "AMP-TRESHOLD" (quote :amp-treshold) -40 nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "ANALYSIS-TYPE" (quote :analysis-type) "averaged-spectrum" (list (list "Averaged Spectrum" "averaged-spectrum") (list "Inharmonic Partial Averaging" "inharmonic-partial-averaging"))) (om-load-inputkeyword (quote input-keyword) "no documentation" "WINDOWSIZE" (quote :windowsize) 4096 nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "FFTSIZE" (quote :fftsize) 4096 nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "STEP" (quote :step) 256 (list (list "Blackman" "blackman") (list "Hanning" "hanning") (list "Hamming" "hamming"))) (om-load-inputkeyword (quote input-keyword) "no documentation" "WINDOWTYPE" (quote :windowtype) "hanning" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:out)" "Keyword input" (quote :out) nil nil))) (om-make-point 502 522) nil nil nil nil 1) (om-load-boxcomment "comment2" (om-make-point 243 111) (quote "The PM2-ADDITIVE TOOLS perform partial tracking or chord-seq analysis or sound files and can be used complementarily with the om-supervp library") "" (om-make-point 21 168) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment11" (om-make-point 454 88) (quote "OM-SuperVP - advanced examples$$connection with pm2 additive analysis tools") "" (om-make-point 129 52) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 370 72) (quote "1) Marker Generation by Transient Detection$2) chord-sequence analysis of the segmented sound file$3) Conversion to symbolic pitches $(uses as->om from the RepMus user library)") "" (om-make-point 6 346) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 25 28) (quote "(3)") "" (om-make-point 445 728) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 25 28) (quote "(2)") "" (om-make-point 632 530) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 25 28) (quote "(1)") "" (om-make-point 570 366) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "GET-MRK-ONSETS" (quote get-mrk-onsets) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 623 381) nil nil nil nil 1) (om-load-editor-box1 "markers.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 636 317) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "markers" :type "sdif")))) newobj) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil) (om-load-editor-box1 "chordseq.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 493 586) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "chordseq" :type "sdif")))) newobj) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil) (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8600) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 473 657) (om-make-point 184 63) nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 522 737) (om-make-point 152 109) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list nil (quote :midishare) 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t))) t nil nil nil) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 446 449) (om-make-point 160 53) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list nil (quote :midishare) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t))) t nil nil nil) (om-load-editor-box1 "SOUND4" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 456 157) (om-make-point 127 68) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "PianoOriginal" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PianoOriginal.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote :midishare) (quote t) 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (quote ((15 0 0 0 nil 0) (14 0 2 0 nil 0) (1 0 2 11 nil 0) (10 0 9 0 nil 0) (0 0 10 0 nil 0) (2 0 11 0 nil 0) (11 0 12 0 nil 0) (12 0 13 0 nil 0) (15 0 14 0 nil 0) (9 0 14 2 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "superVP" :source (quote |OM-SuperVP|) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "superVP" (quote |OM-SuperVP|)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 23 55)) (setf (pict-size newpict) (om-make-point 100 100)) newpict)) 6.060015))