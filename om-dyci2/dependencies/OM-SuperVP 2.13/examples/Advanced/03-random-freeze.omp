; OM File Header - Saved 2010/12/27 15:53:35
; (6.0301 :patc (om-make-point 245 15) (om-make-point 435 73) (om-make-point 1013 753) "" 183 0 nil "2010/12/27 15:53:35")
; End File Header
; External resources 
; (list (list (quote :picture) "../../../../../OM-SRC/LIBRARIES/IRCAM-LIBS/OM-SuperVP 2.5/resources/pict/superVP") (list (quote :sdif) "../../../out-files/markers.sdif") (list (quote :sound) "../../../in-files/PianoOriginal.aiff" "../../../out-files/out.aiff" "../../../out-files/temp_out.aif"))
(in-package :om)(load-lib-for (quote ("OM-SuperVP")))(setf *om-current-persistent* (om-load-patch1 "03-random-freeze" (quote ((om-load-boxcomment "comment" (om-make-point 123 26) (quote "final target duration") "" (om-make-point 614 269) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 103 26) (quote "intermediate file") "" (om-make-point 706 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 787 246) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil))) (om-make-point 245 469) nil nil nil (list (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 274 162) (om-make-point 32 30) 0.1 "0.1" nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 71 127) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 198 43) (om-make-point 35 30) 500 "500" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 143 42) (om-make-point 35 30) 200 "200" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 250 100) (om-make-point 53 30) 1000.0 "1000.0" nil) (om-load-boxcall (quote lispfun) "/" (quote /) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 189 150) (om-make-point 68 39) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 129 200) (om-make-point 186 39) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 150 255) nil nil nil nil 3) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 500))) (om-make-point 151 78) nil nil nil nil 1) (om-load-boxin "time-values" 0 (om-make-point 19 52) "no documentation" "time-values" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 176 332) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 37 328) nil nil nil 0)) (quote ((9 0 1 0 nil 0) (8 0 5 0 nil 0) (4 0 5 1 nil 0) (1 0 6 0 nil 0) (5 0 6 1 nil 0) (0 0 6 2 nil 0) (6 0 7 0 nil 0) (3 0 8 0 nil 0) (2 0 8 1 nil 0) (7 1 10 0 nil 0) (7 0 11 0 nil 0))) 1 "make_freeze_params" nil) (om-load-boxcall (quote genfun) "TRANSIENT-DETECTION 2" (quote transient-detection) (quote ((om-load-inputfun (quote input-funbox) "" "INFILE" nil))) (om-make-point 241 196) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 115 30) (quote "- random-freeze -") "" (om-make-point 670 58) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11" (om-make-point 356 44) (quote "OM-SuperVP - advanced examples") "" (om-make-point 553 19) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 25 28) (quote "(1)") "" (om-make-point 252 285) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 277 60) (quote "1) Marker Generation by Transient Detection$2) Random Freeze sound segments$3) Stretch sound back to a specific duration") "" (om-make-point 121 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 25 28) (quote "(3)") "" (om-make-point 603 398) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 25 28) (quote "(2)") "" (om-make-point 196 562) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 137 52) (quote "<-- This loop generates parameters for the freezing process.") "" (om-make-point 371 467) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "SOUND1" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 172 108) (om-make-point 156 62) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "PianoOriginal" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PianoOriginal.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx microplay scale)) (list (quote :midishare) (quote t) 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil nil)) t nil nil nil) (om-load-editor-box1 "markers.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 290 272) (om-make-point 70 50) (let ((newobj (om-load-if (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "markers" :type "sdif") (quote load-sdif-file)))) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil) (om-load-boxcall (quote genfun) "GET-MRK-ONSETS" (quote get-mrk-onsets) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 275 328) nil nil nil nil 1) (om-load-editor-box1 "out.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 568 538) (om-make-point 281 67) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "out" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "out.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx microplay scale)) (list (quote :midishare) (quote t) 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 742 272) (om-make-point 20 28) 3 "3" nil) (om-load-editor-box1 "PianoOriginal.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 175 405) (om-make-point 173 55) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "PianoOriginal" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote (2.1304267898425433D-10 0.07167467645371582D0 0.2117281691870249D0 0.32794545484947507D0 0.46612353565065767D0 0.5704377364985595D0 0.6960991974490908D0 1.625396825609868D0 1.8459863949839086D0)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PianoOriginal.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx microplay scale)) (list (quote :midishare) (quote t) 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil nil)) t nil nil nil) (om-load-editor-box1 "temp_out.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 567 164) (om-make-point 132 69) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "temp_out" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "temp_out.aif") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx microplay scale)) (list (quote :midishare) (quote t) 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "SUPERVP-TIMESTRETCH" (quote supervp-timestretch) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" 2))) (om-make-point 707 368) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SUPERVP-PROCESSING1" (quote supervp-processing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SRCPATH" nil) (om-load-inputfun (quote input-funbox) "no documentation" "PROCESSINGS" "") (om-load-inputfun (quote input-funbox) "no documentation" "BEGIN" nil) (om-load-inputfun (quote input-funbox) "no documentation" "END" nil) (om-load-inputfun (quote input-funbox) "no documentation" "WINDOWSIZE" 4096) (om-load-inputfun (quote input-funbox) "no documentation" "FFTSIZE" 4096) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WINDOWSTEP-OVERSAMP" 8 (list (list "1/4" 4) (list "1/8" 8) (list "1/16" 16) (list "1/32" 32))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WINDOW-TYPE" "hanning" (list (list "Blackman" "blackman") (list "Hanning" "hanning") (list "Hamming" "hamming"))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "SHAPE-INVARIANT" nil (list (list "Shape Invariant On" (quote t)) (list "Shape Invariant Off" nil))) (om-load-inputfun (quote input-funbox) "no documentation" "PRESERVE-TRANSIENT" (quote t)) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "NORMALIZE" nil (list (list "Normalize On" (quote t)) (list "Normalize Off" nil))) (om-load-inputfun (quote input-funbox) "no documentation" "OUTFILE" "out.aiff"))) (om-make-point 224 624) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SUPERVP-FREEZE" (quote supervp-freeze) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" (list (list 0.1 0.4 0.1))))) (om-make-point 244 536) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 340 575) (om-make-point 96 30) "temp_out.aif" "\"temp_out.aif\"" nil) (om-load-boxcall (quote genfun) "SUPERVP-PROCESSING" (quote supervp-processing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SRCPATH" nil) (om-load-inputfun (quote input-funbox) "no documentation" "PROCESSINGS" "") (om-load-inputfun (quote input-funbox) "no documentation" "BEGIN" nil) (om-load-inputfun (quote input-funbox) "no documentation" "END" nil) (om-load-inputfun (quote input-funbox) "no documentation" "WINDOWSIZE" 4096) (om-load-inputfun (quote input-funbox) "no documentation" "FFTSIZE" 4096) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WINDOWSTEP-OVERSAMP" 8 (list (list "1/4" 4) (list "1/8" 8) (list "1/16" 16) (list "1/32" 32))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WINDOW-TYPE" "hanning" (list (list "Blackman" "blackman") (list "Hanning" "hanning") (list "Hamming" "hamming"))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "SHAPE-INVARIANT" nil (list (list "Shape Invariant On" (quote t)) (list "Shape Invariant Off" nil))) (om-load-inputfun (quote input-funbox) "no documentation" "PRESERVE-TRANSIENT" (quote t)) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "NORMALIZE" nil (list (list "Normalize On" (quote t)) (list "Normalize Off" nil))) (om-load-inputfun (quote input-funbox) "no documentation" "OUTFILE" "out.aiff"))) (om-make-point 647 447) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "/1" (quote /) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 725 310) (om-make-point 91 39) nil nil nil 1))) (quote ((18 0 2 0 nil 0) (17 2 3 0 nil 0) (12 0 4 0 nil 0) (4 0 13 0 nil 0) (13 0 14 0 nil 0) (23 0 15 0 nil 0) (12 0 17 0 nil 0) (14 0 17 2 nil 0) (20 0 18 0 nil 0) (24 0 19 0 nil 0) (17 0 20 0 nil 0) (21 0 20 1 nil 0) (22 0 20 11 nil 0) (3 0 21 0 nil 0) (18 0 23 0 nil 0) (19 0 23 1 nil 0) (16 0 24 0 nil 0) (2 0 24 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "superVP" :source (quote |OM-SuperVP|) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "superVP" (quote |OM-SuperVP|)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 15 37)) (setf (pict-size newpict) (om-make-point 100 100)) newpict)) 6.0301))